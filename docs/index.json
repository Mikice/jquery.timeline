[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/timeline.esdoc.js",
    "content": "/*!\r\n * Typedef for jQuery Timeline's ESDoc\r\n * @version: 2.0.0a3\r\n */\r\n\r\n/** @type {string} [NAME=\"Timeline\"] */\r\n/** @type {string} VERSION */\r\n/** @type {string} DATA_KEY */\r\n/** @type {string} EVENT_KEY */\r\n/** @type {string} PREFIX */\r\n/** @type {string} LOADING_MESSAGE */\r\n/** @type {number} MIN_POINTER_SIZE */\r\n/** @type {string} DATA_API_KEY */\r\n/** @type {Object} JQUERY_NO_CONFLICT */\r\n\r\n/**\r\n * In principle, this option conforms to the specification of options in \"Date.prototype.toLocaleString()\".\r\n * However, there includes some extensions of this plugin original.\r\n *\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\r\n * \r\n * @typedef {Object} LocaleOptions\r\n * @property {boolean} [hour12=false] - Whether to use 12-hour time (as opposed to 24-hour time). Possible values are true and false.\r\n * @property {string} [localeMatcher] - \r\n * @property {string} [timeZone] - \r\n * @property {string} [hourCycle] - \r\n * @property {string} [formatMatcher] - \r\n * @property {string} [weekday] - The representation of the weekday. Possible values are \"narrow\", \"short\", \"long\".\r\n * @property {string} [era] - The representation of the era. Possible values are \"narrow\", \"short\", \"long\".\r\n * @property {string} [year] - The representation of the year. Possible values are \"numeric\", \"2-digit\".\r\n * @property {string} [month] - The representation of the month. Possible values are \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\".\r\n * @property {string} [day] - The representation of the day. Possible values are \"numeric\", \"2-digit\".\r\n * @property {string} [hour] - The representation of the hour. Possible values are \"numeric\", \"2-digit\".\r\n * @property {string} [minute] - The representation of the minute. Possible values are \"numeric\", \"2-digit\".\r\n * @property {string} [second] - The representation of the second. Possible values are \"numeric\", \"2-digit\".\r\n * @property {string} [timeZoneName] - The representation of the time zone name. Possible values are \"short\", \"long\".\r\n */\r\n\r\n/**\r\n * \r\n * @typedef {Object} Headline\r\n * @property {boolean} [display=true] - Whether to display headline\r\n * @property {string} [title] - \r\n * @property {boolean} [range=true] - Hide if false\r\n * @property {string} [locale=\"en-US\"] - This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\r\n * @property {LocaleOptions} [format] - This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\r\n * @since 2.0.0\r\n */\r\n\r\n/**\r\n * \r\n * @typedef {Object} Footer\r\n * @property {boolean} [display=true] - Whether to display headline\r\n * @property {string} [content] - \r\n * @property {boolean} [range=false] - Visible if true\r\n * @property {string} [locale=\"en-US\"] - This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\r\n * @property {LocaleOptions} [format] - This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\r\n * @since 2.0.0\r\n */\r\n\r\n/**\r\n * \r\n * @typedef {Object} Sidebar\r\n * @property {boolean} [sticky=false] - Whether does sticky the sidebar by using \"display: sticky\" of CSS.\r\n * @property {boolean} [overlay=false] - \r\n * @property {array.<String>} [list] - Define the contents of the row of the sidebar. Appropriate escaping is necessary when using HTML.\r\n * @since 2.0.0\r\n */\r\n\r\n/**\r\n * Can define the ruler position to top or bottom and both\r\n * \r\n * @typedef {Object} RulerOptions\r\n * @property {array.<String>} [lines] - Multiple tick marks can be set, and array elements are set in order from the top. Set same scale of Default.scale if omitted this. c.g. [ 'year', 'month', 'day', 'weekday' ]\r\n * @property {number} [height=30] - The height of a row of rulers\r\n * @property {number} [fontSize=14] - \r\n * @property {string} [color=\"#777777\"] - \r\n * @property {string} [background=\"#FFFFFF\"] - \r\n * @property {string} [locale=\"en-US\"] - This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\r\n * @property {LocaleOptions} [format] - This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\r\n * @since 2.0.0\r\n */\r\n\r\n/**\r\n * You can set the upper and lower ruler individually\r\n *\r\n * @typedef {Object} Ruler\r\n * @property {RulerOptions} [top] - The upper ruler configuration. The upper ruler is hidden if omitted.\r\n * @property {RulerOptions} [bottom] - The lower ruler configuration. The lower ruler is hidden if omitted.\r\n * @since 2.0.0\r\n */\r\n\r\n/**\r\n *\r\n *\r\n * @typedef {Object} EventMeta\r\n * @property {boolean} [display=false] - \r\n * @property {string} [scale=\"day\"] - \r\n * @property {string} [locale=\"en-US\"] - This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\r\n * @property {LocaleOptions} [format] - This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\r\n * @property {string} [content] - This is value for if you want to show custom content on the meta\r\n * @since 2.0.0\r\n */\r\n\r\n/**\r\n * Default options for generating the timeline by the jQuery.Timeline plugin.\r\n * Those defaults are overridden to undefined settings of the timeline configuration.\r\n *\r\n * @typedef {Object} Default\r\n * @property {string} [type=\"bar\"] - View type of timeline event is either \"bar\" or \"point\"\r\n * @property {string} [scale=\"day\"] - Timetable's minimum level scale is either \"year\", \"month\", \"week\", \"day\", \"hour\", \"minute\"\r\n * @property {string} [startDatetime=\"currently\"] - Beginning date time of timetable on the timeline. format is ( \"^d{4}(/|-)d{2}(/|-)d{2}\\sd{2}:d{2}:d{2}$\" ) or \"currently\"\r\n * @property {string} [endDatetime=\"auto\"] - Ending date time of timetable on the timeline. format is ( \"^d{4}(/|-)d{2}(/|-)d{2}\\sd{2}:d{2}:d{2}$\" ) or \"auto\"\r\n * @property {Headline} [headline] - Settings for the content customize in the headline\r\n * @property {Footer} [footer] - Settings for the content customize in the footer\r\n * @property {number|string} [range=3] - Override the scale range of the timeline to be rendered when endDatetime is undefined or \"auto\"\r\n * @property {Sidebar} [sidebar] - Settings for the content of the sidebar\r\n * @property {number|string} [rows=\"auto\"] - Rows of timeline event area\r\n * @property {number} [rowHeight=48] - Height of one row\r\n * @property {number|string} [width=\"auto\"] - Fixed width (pixel) of timeline view\r\n * @property {number|string} [height=\"auto\"] - Fixed height (pixel) of timeline view; Defaults to ( rows * rowHeight )\r\n * @property {number} [minGridSize=30] - Override value of minimum size (pixel) of timeline grid\r\n * @property {number} [marginHeight=2] - Margin (pixel) top and bottom of events on the timeline\r\n * @property {Ruler} [ruler] - Settings of the ruler\r\n * @property {number|string} [rangeAlign=\"latest\"] - Possible values are \"left\", \"center\", \"right\", \"current\", \"latest\" and specific event id\r\n * @property {string} [loader=\"default\"] - Custom loader definition, possible values are \"default\", false and selector of loader element\r\n * @property {boolean} [hideScrollbar=false] - Whether or not to display the scroll bar displayed when the width of the timeline overflows (even if it is set to non-display, it will not function depending on the browser)\r\n * @property {EventMeta} [eventMeta] - Display meta of range on event node when the timeline type is \"bar\"\r\n * @property {string} [storage=\"session\"] - Specification of Web storage to cache event data, defaults to sessionStorage\r\n * @property {boolean} [reloadCacheKeep=true] - Whether to load cached events during reloading, the cache is discarded if false\r\n * @property {boolean} [zoom=false] - Whether to use the ability to zoom the scale of the timeline by double clicking on any scale on the ruler\r\n * @property {boolean} [wrapScale=true] - Whether wrapping new scale in the timeline container when zoom\r\n * @property {string} [engine=\"canvas\"] - Choose dependent module to core as rendering engine. It'll be \"canvas\" or \"d3.js\"; Maybe add in future version\r\n * @property {boolean} [debug=false] - Enable to debug mode if true then output logs for debugging to console; defaults to false\r\n * @since 2.0.0\r\n */\r\n\r\n/**\r\n * The limited grid number per scale of timeline\r\n *\r\n * @typedef {Object} LimitScaleGrids\r\n * @property {number} [millennium=100] - In other words it's 100000 years\r\n * @property {number} [century=500] - In other words it's 50000 years\r\n * @property {number} [decade=500] - In other words it's 5000 years\r\n * @property {number} [lustrum=500] - In other words it's 2500 years\r\n * @property {number} [year=500] - In other words it's 500 years\r\n * @property {number} [month=540] - In other words it's 45 years\r\n * @property {number} [week=530] - In other words it's 10 years\r\n * @property {number} [day=366] - In other words it's about 1 years\r\n * @property {number} [hour=720] - In other words it's 30 days\r\n * @property {number} [quarterHour=720] - In other words it's 7.5 days\r\n * @property {number} [halfHour=720] - In other words it's 15 days\r\n * @property {number} [minute=720] - In other words it's 12 hours\r\n * @property {number} [second=900] - In other words it's 15 minutes\r\n * @since 2.0.0\r\n */\r\n\r\n/**\r\n * \r\n *\r\n * @typedef {Object} RelationOption\r\n * @property {number} [before] - Set target eventID to connect the relation line to the event (leftward on the timeline) in chronological before from oneself event.\r\n * @property {number} [after] - Set target eventID to connect the relation line to the event (rightward on the timeline) in chronological after from oneself event.\r\n * @property {number} [linesize] - \r\n * @property {string} [linecolor] - \r\n * @property {number|string|boolean} [curve] - Whether the connection line is curved if the connection events are not on the same horizontal. If you specify a boolean value or a shorthand (0 or 1 only), it will be automatically curved. As with the previous version, it is also possible to specify the type of curve using defined preset values.\r\n */\r\n\r\n/**\r\n * The preset as default of event parameters on the timeline\r\n *\r\n * @typedef {Object} EventParams\r\n * @property {string} uid - An unique id of event data, this can not define because this value is automatically generate as data for cache only\r\n * @property {?number} [eventId] - It is an ID that identifies an event for you to manipulate event data via each method. If omitted, consecutive numbers are automatically assigned.\r\n * @property {number} x - Can not define because this value is automatically generate as data for cache only\r\n * @property {number} y - Can not define because this value is automatically generate as data for cache only\r\n * @property {number} width - Can not define because this value is automatically generate as data for cache only\r\n * @property {number} height - Can not define because this value is automatically generate as data for cache only\r\n * @property {string} start - Can not define because this value is automatically generate as data for cache only\r\n * @property {string} end - Can not define because this value is automatically generate as data for cache only\r\n * @property {number} row - Can not define because this value is automatically generate as data for cache only\r\n * @property {string} [bgColor=\"#E7E7E7\"] - \r\n * @property {string} [color=\"#343A40\"] - \r\n * @property {string} [bdColor=\"#6C757D\"] - \r\n * @property {string} [label] - \r\n * @property {string} [content] - \r\n * @property {string} [image] - \r\n * @property {number} [margin] - \r\n * @property {string} [rangeMeta] - \r\n * @property {number|string} [size=\"normal\"] - Define the diameter size of pointer when type of the timeline is \"point\". Possible values are \"large\", \"normal\", \"small\" and value of pixel.\r\n * @property {Object} [extend] - The specified key/value pair is replaced with the data attribute of the event element.\r\n * @property {boolean} [remote=false] - \r\n * @property {RelationOption} [relation] - Setting for connecting events by relation lines when the timeline type is \"point\".\r\n * @property {function} [callback] - Callback processing that binds to openEvent method when this event is clicked.\r\n * @since 2.0.0\r\n */\r\n\r\n/*\r\n * Binding Custom Events\r\n *\r\n * @typedef {Object} Event\r\n * @property {string} INITIALIZED\r\n * @property {string} HIDE\r\n * @property {string} SHOW\r\n * @property {string} CLICK_EVENT\r\n * @property {string} FOCUSIN_EVENT\r\n * @property {string} FOCUSOUT_EVENT\r\n * @property {string} MOUSEENTER_POINTER\r\n * @property {string} MOUSELEAVE_POINTER\r\n * @property {string} ZOOMIN_SCALE\r\n * @since 2.0.0\r\n */\r\n\r\n/*\r\n * Class name of the timeline elements created by the plugin\r\n *\r\n * @typedef {Object} ClassName\r\n * @property {string} TIMELINE_CONTAINER\r\n * @property {string} TIMELINE_MAIN\r\n * @property {string} TIMELINE_HEADLINE\r\n * @property {string} TIMELINE_HEADLINE_WRAPPER\r\n * @property {string} HEADLINE_TITLE\r\n * @property {string} RANGE_META\r\n * @property {string} RANGE_SPAN\r\n * @property {string} TIMELINE_EVENT_CONTAINER\r\n * @property {string} TIMELINE_BACKGROUND_GRID\r\n * @property {string} TIMELINE_RELATION_LINES\r\n * @property {string} TIMELINE_EVENTS\r\n * @property {string} TIMELINE_EVENT_NODE\r\n * @property {string} TIMELINE_EVENT_LABEL\r\n * @property {string} TIMELINE_EVENT_THUMBNAIL\r\n * @property {string} TIMELINE_RULER_LINES\r\n * @property {string} TIMELINE_RULER_ITEM\r\n * @property {string} TIMELINE_SIDEBAR\r\n * @property {string} TIMELINE_SIDEBAR_MARGIN\r\n * @property {string} TIMELINE_SIDEBAR_ITEM\r\n * @property {string} TIMELINE_FOOTER\r\n * @property {string} TIMELINE_FOOTER_CONTENT\r\n * @property {string} VIEWER_EVENT_TITLE\r\n * @property {string} VIEWER_EVENT_CONTENT\r\n * @property {string} VIEWER_EVENT_META\r\n * @property {string} VIEWER_EVENT_IMAGE_WRAPPER\r\n * @property {string} VIEWER_EVENT_IMAGE\r\n * @property {string} VIEWER_EVENT_TYPE_POINTER\r\n * @property {string} HIDE_SCROLLBAR\r\n * @property {string} HIDE\r\n * @property {string} RULER_ITEM_ALIGN_LEFT\r\n * @property {string} STICKY_LEFT\r\n * @property {string} OVERLAY\r\n * @property {string} ALIGN_SELF_RIGHT\r\n * @property {string} LOADER_ITEM\r\n * @since 2.0.0\r\n */\r\n\r\n/*\r\n * Selectors assigned on the timeline element\r\n *\r\n * @typedef {Object} Selector\r\n * @property {string} EVENT_NODE\r\n * @property {string} EVENT_VIEW\r\n * @property {string} RULER_TOP\r\n * @property {string} RULER_BOTTOM\r\n * @property {string} TIMELINE_CONTAINER\r\n * @property {string} TIMELINE_RULER_TOP\r\n * @property {string} TIMELINE_RULER_BOTTOM\r\n * @property {string} TIMELINE_RULER_ITEM\r\n * @property {string} TIMELINE_RELATION_LINES\r\n * @property {string} TIMELINE_EVENTS\r\n * @property {string} TIMELINE_SIDEBAR\r\n * @property {string} TIMELINE_SIDEBAR_ITEM\r\n * @property {string} TIMELINE_EVENT_NODE\r\n * @property {string} VIEWER_EVENT_TYPE_POINTER\r\n * @property {string} LOADER\r\n * @property {string} DEFAULT_EVENTS\r\n * @since 2.0.0\r\n */\r\n\r\n/**\r\n * Pluin Core Class\r\n * @access public\r\n * @since 2.0.0\r\n */\r\nclass Timeline {\r\n    constructor( element, config ) {\r\n        /** @type {Object} */\r\n        this._config        = this._getConfig( config )\r\n        /** @type {Object} */\r\n        this._element       = element\r\n        /** @type {?string} */\r\n        this._selector      = null\r\n        /** @type {boolean} */\r\n        this._isInitialized = false\r\n        /** @type {boolean} */\r\n        this._isCached      = false\r\n        /** @type {boolean} */\r\n        this._isCompleted   = false\r\n        /** @type {boolean} */\r\n        this._isShown       = false\r\n        /** @type {Object} */\r\n        this._instanceProps = {}\r\n    }\r\n    \r\n    // Getters\r\n    \r\n    /** @type {string} */\r\n    static get VERSION() {\r\n        return VERSION\r\n    }\r\n    \r\n    /** @type {Default} */\r\n    static get Default() {\r\n        return Default\r\n    }\r\n    \r\n    // Private\r\n    \r\n    /**\r\n     * Define the default options of this plugin\r\n     * @private\r\n     * @param {Object} config - Initial options\r\n     * @return {Object} Config overrided initial options to default config\r\n     */\r\n    _getConfig( config ) {\r\n        config = {\r\n            ...Default,\r\n            ...config\r\n        }\r\n        return config\r\n    }\r\n    \r\n    /**\r\n     * Filter the scale key name for LimitScaleGrids\r\n     * @private\r\n     * @param {string} key\r\n     * @return {string} Filtered scale key name\r\n     */\r\n    _filterScaleKeyName( key ) {\r\n        let filteredKey = null\r\n        \r\n        switch( true ) {\r\n            case /^quarter-?(|hour)$/i.test( key ):\r\n                filteredKey = 'quarterHour'\r\n                break\r\n            case /^half-?(|hour)$/i.test( key ):\r\n                filteredKey = 'halfHour'\r\n                break\r\n            default:\r\n                filteredKey = key\r\n        }\r\n        return filteredKey\r\n    }\r\n    \r\n    /**\r\n     * Initialize the plugin\r\n     * @private\r\n     */\r\n    _init() {\r\n        this._debug( '_init' )\r\n        \r\n        let _elem       = this._element,\r\n            _selector   = `${_elem.tagName}${( _elem.id ? `#${_elem.id}` : '' )}${( _elem.className ? `.${_elem.className.replace(/\\s/g, '.')}` : '' )}`\r\n        \r\n        this._selector = _selector.toLowerCase()\r\n        \r\n        if ( this._isInitialized || this._isCompleted ) {\r\n            return\r\n        }\r\n        \r\n        this.showLoader()\r\n        \r\n        this._calcVars()\r\n        \r\n        if ( ! this._verifyMaxRenderableRange() ) {\r\n            throw new RangeError( `Timeline display period exceeds maximum renderable range.` )\r\n        }\r\n        \r\n        this.sleep( _sleep ).then(() => {\r\n            \r\n            if ( ! this._isInitialized ) {\r\n                \r\n                this._renderView()\r\n                \r\n                const afterInitEvent = $.Event( Event.INITIALIZED, { _elem } )\r\n                \r\n                $(_elem).trigger( afterInitEvent )\r\n                \r\n                $(_elem).off( Event.INITIALIZED )\r\n            }\r\n            \r\n            if ( ! this._isCached ) {\r\n                this._loadEvent()\r\n            }\r\n            \r\n            if ( this._isCached ) {\r\n                this._placeEvent()\r\n            }\r\n            \r\n            // Assign events for the timeline\r\n            $(document).on(\r\n                Event.CLICK_EVENT,\r\n                `${this._selector} ${Selector.EVENT_NODE}`,\r\n                ( event ) => this.openEvent( event )\r\n            )\r\n            $(_elem).on(\r\n                Event.FOCUSIN_EVENT,\r\n                Selector.TIMELINE_EVENT_NODE,\r\n                ( event ) => this._activeEvent( event )\r\n            )\r\n            $(_elem).on(\r\n                Event.FOCUSOUT_EVENT,\r\n                Selector.TIMELINE_EVENT_NODE,\r\n                ( event ) => this._activeEvent( event )\r\n            )\r\n            if ( /^point(|er)$/i.test( this._config.type ) ) {\r\n                $(_elem).on(\r\n                    Event.MOUSEENTER_POINTER,\r\n                    Selector.VIEWER_EVENT_TYPE_POINTER,\r\n                    ( event ) => this._hoverPointer( event )\r\n                )\r\n                $(_elem).on(\r\n                    Event.MOUSELEAVE_POINTER,\r\n                    Selector.VIEWER_EVENT_TYPE_POINTER,\r\n                    ( event ) => this._hoverPointer( event )\r\n                )\r\n            }\r\n            if ( this._config.zoom ) {\r\n                $(_elem).on(\r\n                    Event.ZOOMIN_SCALE,\r\n                    Selector.TIMELINE_RULER_ITEM,\r\n                    ( event ) => this.zoomScale( event )\r\n                )\r\n                \r\n            }\r\n            \r\n            this._isCompleted = true\r\n            \r\n            this.alignment()\r\n            \r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Calculate each properties of the timeline instance\r\n     * @private\r\n     */\r\n    _calcVars() {\r\n        let _opts  = this._config,\r\n            _props = {}\r\n        \r\n        _props.begin      = this.supplement( null, this._getPluggableDatetime( _opts.startDatetime, 'first' ) )\r\n        _props.end        = this.supplement( null, this._getPluggableDatetime( _opts.endDatetime, 'last' ) )\r\n        _props.scaleSize  = this.supplement( null, _opts.minGridSize, this.validateNumeric )\r\n        _props.rows       = this._getPluggableRows()\r\n        _props.rowSize    = this.supplement( null, _opts.rowHeight, this.validateNumeric )\r\n        _props.width      = this.supplement( null, _opts.width, this.validateNumeric )\r\n        _props.height     = this.supplement( null, _opts.height, this.validateNumeric )\r\n        \r\n        this._instanceProps = _props // pre-cache\r\n        \r\n        if ( /^(year|month)s?$/i.test( _opts.scale ) ) {\r\n            // For scales where the value of quantity per unit is variable length (:> 単位あたりの量の値が可変長であるスケールの場合\r\n            let _temp            = this._verifyScale( _opts.scale ),\r\n                _values          = Object.values( _temp ),\r\n                _averageDays     = this.numRound( _values.reduce( ( a, v ) => a + v, 0 ) / _values.length, 4 ), // Average days within the range\r\n                _baseDaysOfScale = /^years?$/i.test( _opts.scale ) ? 365 : 30,\r\n                _totalWidth      = 0\r\n            \r\n//console.log( '!', _opts.scale, _temp, _vals )\r\n            _values.forEach( ( days ) => {\r\n                _totalWidth += this.numRound( ( days * _props.scaleSize ) / _baseDaysOfScale, 2 )\r\n            })\r\n            \r\n            _props.scale         = _averageDays * ( 24 * 60 * 60 * 1000 )\r\n            _props.grids         = _values.length\r\n            _props.variableScale = _temp\r\n            _props.fullwidth     = _totalWidth\r\n        } else {\r\n            // In case of fixed length scale (:> 固定長スケールの場合\r\n            _props.scale         = this._verifyScale( _opts.scale )\r\n            _props.grids         = Math.ceil( ( _props.end - _props.begin ) / _props.scale )\r\n            _props.variableScale = null\r\n            _props.fullwidth     = _props.grids * _props.scaleSize\r\n        }\r\n        _props.fullheight = _props.rows * _props.rowSize\r\n        // Define visible size according to full size of timeline (:> タイムラインのフルサイズに準じた可視サイズを定義\r\n        _props.visibleWidth  = _props.width > 0  ? `${( _props.width <= _props.fullwidth ? _props.width : _props.fullwidth )}px` : '100%'\r\n        _props.visibleHeight = _props.height > 0 ? `${( _props.height <= _props.fullheight ? _props.height : _props.fullheight )}px` : 'auto'\r\n        \r\n        for ( let _prop in _props ) {\r\n            if ( _prop === 'width' || _prop === 'height' || _prop === 'variableScale' ) {\r\n                continue\r\n            }\r\n            if ( this.is_empty( _props[_prop] ) ) {\r\n                throw new TypeError( `Property \"${_prop}\" cannot set because undefined or invalid variable.` )\r\n            }\r\n        }\r\n        \r\n        if ( _props.fullwidth < 2 || _props.fullheight < 2 ) {\r\n            throw new TypeError( `The range of the timeline to be rendered is incorrect.` )\r\n        }\r\n        \r\n        this._instanceProps = _props\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the pluggable datetime as milliseconds from specified keyword\r\n     * @private\r\n     * @param {string} key - Any one of \"current\", \"auto\", or datetime string\r\n     * @param {string} [round_type] - \r\n     * @return {number} This value unit is milliseconds\r\n     */\r\n    _getPluggableDatetime( key, round_type = '' ) {\r\n        let _opts        = this._config,\r\n            _date        = null,\r\n            getFirstDate = ( dateObj, scale ) => {\r\n                let _tmpDate\r\n                \r\n                switch ( true ) {\r\n                    case /^millenniums?|millennia$/i.test( scale ):\r\n                    case /^century$/i.test( scale ):\r\n                    case /^dec(ade|ennium)$/i.test( scale ):\r\n                    case /^lustrum$/i.test( scale ):\r\n                    case /^years?$/i.test( scale ):\r\n                        _tmpDate = new Date( dateObj.getFullYear(), 0, 1 )\r\n                        break\r\n                    case /^months?$/i.test( scale ):\r\n                        _tmpDate = new Date( dateObj.getFullYear(), dateObj.getMonth(), 1 )\r\n                        break\r\n                    case /^(week|day)s?$/i.test( scale ):\r\n                        _tmpDate = new Date( dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate() )\r\n                        break\r\n                    case /^(|half|quarter)-?hours?$/i.test( scale ):\r\n                        _tmpDate = new Date( dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours() )\r\n                        break\r\n                    case /^minutes?$/i.test( scale ):\r\n                        _tmpDate = new Date( dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes() )\r\n                        break\r\n                    case /^seconds?$/i.test( scale ):\r\n                        _tmpDate = new Date( dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes(), dateObj.getSeconds() )\r\n                        break\r\n                }\r\n                return _tmpDate\r\n            },\r\n            getLastDate  = ( dateObj, scale ) => {\r\n                let _tmpDate\r\n                \r\n                switch ( true ) {\r\n                    case /^millenniums?|millennia$/i.test( scale ):\r\n                    case /^century$/i.test( scale ):\r\n                    case /^dec(ade|ennium)$/i.test( scale ):\r\n                    case /^lustrum$/i.test( scale ):\r\n                    case /^years?$/i.test( scale ):\r\n                        _tmpDate = new Date( dateObj.getFullYear() + 1, 0, 1 )\r\n                        break\r\n                    case /^months?$/i.test( scale ):\r\n                        _tmpDate = new Date( dateObj.getFullYear(), dateObj.getMonth() + 1, 1 )\r\n                        break\r\n                    case /^(week|day)s?$/i.test( scale ):\r\n                        _tmpDate = new Date( dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate() + 1 )\r\n                        break\r\n                    case /^(|half|quarter)-?hours?$/i.test( scale ):\r\n                        _tmpDate = new Date( dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours() + 1 )\r\n                        break\r\n                    case /^minutes?$/i.test( scale ):\r\n                        _tmpDate = new Date( dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes() + 1 )\r\n                        break\r\n                    case /^seconds?$/i.test( scale ):\r\n                        _tmpDate = new Date( dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes(), dateObj.getSeconds() + 1 )\r\n                        break\r\n                }\r\n                return new Date( _tmpDate.getTime() - 1 )\r\n            },\r\n            is_remapping = /^\\d{1,2}(|(-|\\/).+)$/.test( key.toString() )\r\n//console.log( '!_getPluggableDatetime:', key, round_type, is_remapping )\r\n        \r\n        switch ( true ) {\r\n            case /^current(|ly)$/i.test( key ):\r\n                _date = new Date()\r\n//console.log( '!_getPluggableDatetime::currently:', _opts.scale, this.getHigherScale( _opts.scale ), key, _date.getTime() )\r\n                break\r\n            case /^auto$/i.test( key ): {\r\n                let _ms          = null,\r\n                    _higherScale = this.getHigherScale( _opts.scale )\r\n                \r\n                if ( /^current(|ly)$/i.test( _opts.startDatetime ) ) {\r\n                    _date = new Date()\r\n                    //if ( /^(year|month)s?$/i.test( _opts.scale ) ) {\r\n                        _date = getFirstDate( _date, _opts.scale )\r\n                    //}\r\n                } else {\r\n                    _date = this.getCorrectDatetime( _opts.startDatetime )\r\n                }\r\n                \r\n                if ( _opts.range || _opts.range > 0 ) {\r\n                    if ( /^years?$/i.test( _higherScale ) ) {\r\n                        _ms = 365.25 * 24 * 60 * 60 * 1000\r\n                    } else\r\n                    if ( /^months?$/i.test( _higherScale ) ) {\r\n                        _ms = 30.44 * 24 * 60 * 60 * 1000\r\n                    } else {\r\n                        _ms = this._verifyScale( _higherScale )\r\n                    }\r\n                    _date.setTime( _date.getTime() + ( _ms * _opts.range ) )\r\n                } else {\r\n                    if ( /^years?$/i.test( _opts.scale ) ) {\r\n                        _ms = 365.25 * 24 * 60 * 60 * 1000\r\n                    } else\r\n                    if ( /^months?$/i.test( _opts.scale ) ) {\r\n                        _ms = 30.44 * 24 * 60 * 60 * 1000\r\n                    } else {\r\n                        _ms = this._verifyScale( _opts.scale )\r\n                    }\r\n                    _date.setTime( _date.getTime() + ( _ms * LimitScaleGrids[this._filterScaleKeyName( _opts.scale )] ) )\r\n                }\r\n// console.log( '!_getPluggableDatetime::auto:', _opts.scale, this.getHigherScale( _opts.scale ), key, _date.getTime() )\r\n                break\r\n            }\r\n            default:\r\n                _date = this.getCorrectDatetime( key )\r\n                break\r\n        }\r\n        \r\n        if ( ! is_remapping ) {\r\n            is_remapping = _date.getFullYear() < 100\r\n        }\r\n        \r\n        if ( ! this.is_empty( round_type ) ) {\r\n            if ( 'first' === round_type ) {\r\n//console.log( '!_getPluggableDatetime::first:before:', key, _date, is_remapping )\r\n                _date = getFirstDate( _date, _opts.scale )\r\n//console.log( '!_getPluggableDatetime::first:after:', key, _date, is_remapping )\r\n            } else\r\n            if ( 'last' === round_type ) {\r\n//console.log( '!_getPluggableDatetime::last:before:', key, _date, is_remapping )\r\n                _date = getLastDate( _date, _opts.scale )\r\n//console.log( '!_getPluggableDatetime::last:after:', key, _date, is_remapping )\r\n            }\r\n        }\r\n        \r\n        if ( is_remapping ) {\r\n            _date.setFullYear( String( _date.getFullYear() ).substr(-2) )\r\n        }\r\n        \r\n//console.log( '!_getPluggableDatetime::return:', _date )\r\n        return _date.getTime()\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the pluggable parameter as an object\r\n     * @private\r\n     * @param {string} str_like_params - Strings that can be parsed as javascript objects\r\n     * @return {Object}\r\n     */\r\n    _getPluggableParams( str_like_params ) {\r\n        let params = {}\r\n        \r\n        if ( typeof str_like_params === 'string' && str_like_params ) {\r\n            try {\r\n                params = JSON.parse( JSON.stringify( ( new Function( `return ${str_like_params}` ) )() ) )\r\n                if ( params.hasOwnProperty( 'extend' ) ) {\r\n                    params.extend = JSON.parse( JSON.stringify( ( new Function( `return ${params.extend}` ) )() ) )\r\n                }\r\n            } catch( e ) {\r\n                console.warn( 'Can not parse to object therefor invalid param.' )\r\n            }\r\n        }\r\n        return params\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the pluggable rows of the timeline\r\n     * @private\r\n     * @return {number}\r\n     */\r\n    _getPluggableRows() {\r\n        let _opts      = this._config,\r\n            fixed_rows = this.supplement( 'auto', _opts.rows, this.validateNumeric )\r\n        \r\n        if ( fixed_rows === 'auto' ) {\r\n            fixed_rows = _opts.sidebar.list.length\r\n        }\r\n        return fixed_rows > 0 ? fixed_rows : 1\r\n    }\r\n    \r\n    /**\r\n     * Verify the allowed scale, then retrieve that scale's millisecond if allowed\r\n     * @private\r\n     * @param {string} scale - \r\n     * @return {number|boolean} Return false if specified an invalid scale\r\n     */\r\n    _verifyScale( scale ) {\r\n        let _opts  = this._config,\r\n            _props = this._instanceProps,\r\n            _ms    = -1\r\n        \r\n        if ( typeof scale === 'undefined' || typeof scale !== 'string' ) {\r\n            return false\r\n        }\r\n        switch ( true ) {\r\n            case /^millisec(|ond)s?$/i.test( scale ):\r\n                // Millisecond (:> ミリ秒\r\n                _ms = 1\r\n                break\r\n            case /^seconds?$/i.test( scale ):\r\n                // Second (:> 秒\r\n                _ms = 1000\r\n                break\r\n            case /^minutes?$/i.test( scale ):\r\n                // Minute (:> 分\r\n                _ms = 60 * 1000\r\n                break\r\n            case /^quarter-?(|hour)$/i.test( scale ):\r\n                // Quarter of an hour (:> 15分\r\n                _ms = 15 * 60 * 1000\r\n                break\r\n            case /^half-?(|hour)$/i.test( scale ):\r\n                // Half an hour (:> 30分\r\n                _ms = 30 * 60 * 1000\r\n                break\r\n            case /^hours?$/i.test( scale ):\r\n                // Hour (:> 時（時間）\r\n                _ms = 60 * 60 * 1000\r\n                break\r\n            case /^days?$/i.test( scale ):\r\n                // Day (:> 日\r\n                _ms = 24 * 60 * 60 * 1000\r\n                break\r\n            case /^weeks?$/i.test( scale ):\r\n                // Week (:> 週\r\n                _ms = 7 * 24 * 60 * 60 * 1000\r\n                break\r\n            case /^months?$/i.test( scale ):\r\n                // Month (is the variable length scale) (:> 月（可変長スケール）\r\n//console.log( '!_verifyScale::month:', this._instanceProps, _opts.scale )\r\n                if ( /^(year|month)s?$/i.test( _opts.scale ) ) {\r\n                    return this._diffDate( _props.begin, _props.end, scale )\r\n                } else {\r\n                    _ms = 30.44 * 24 * 60 * 60 * 1000\r\n                    break\r\n                }\r\n            case /^years?$/i.test( scale ):\r\n                // Year (is the variable length scale) (:> 年（可変長スケール）\r\n                if ( /^(year|month)s?$/i.test( _opts.scale ) ) {\r\n                    return this._diffDate( _props.begin, _props.end, scale )\r\n                } else {\r\n                    _ms = 365.25 * 24 * 60 * 60 * 1000\r\n                    break\r\n                }\r\n            case /^lustrum$/i.test( scale ):\r\n                // Lustrum (is the variable length scale, but currently does not support) (:> 五年紀 (可変長スケールだが現在サポートしてない)\r\n                // 5y = 1826 or 1827; 1826 * 24 * 60 * 60 = 15766400, 1827 * 24 * 60 * 60 = 157852800 | avg.= 157788000\r\n                //_ms = ( ( 3.1536 * Math.pow( 10, 8 ) ) / 2 ) * 1000 // <--- Useless by info of wikipedia\r\n                _ms = 157788000 * 1000\r\n                break\r\n            case /^dec(ade|ennium)$/i.test( scale ):\r\n                // Decade (is the variable length scale, but currently does not support) (:> 十年紀 (可変長スケールだが現在サポートしてない)\r\n                // 10y = 3652 or 3653; 3652 * 24 * 60 * 60 = 315532800, 3653 * 24 * 60 * 60 = 157852800 | avg. = 315576000\r\n                // _ms = ( 3.1536 * Math.pow( 10, 8 ) ) * 1000 // <--- Useless by info of wikipedia\r\n                _ms = 315576000 * 1000\r\n                break\r\n            case /^century$/i.test( scale ):\r\n                // Century (:> 世紀（百年紀）\r\n                // 100y = 36525; 36525 * 24 * 60 * 60 = 3155760000\r\n                _ms = 3155760000 * 1000\r\n                break\r\n            case /^millenniums?|millennia$/i.test( scale ):\r\n                // Millennium (:> 千年紀\r\n                // 100y = 365250\r\n                //_ms = ( 3.1536 * Math.pow( 10, 10 ) ) * 1000\r\n                _ms = 3155760000 * 10 * 1000\r\n                break\r\n            default:\r\n                console.warn( 'Specified an invalid scale.' )\r\n                _ms = -1\r\n        }\r\n        return _ms > 0 ? _ms : false\r\n    }\r\n    \r\n    /**\r\n     * Verify the display period of the timeline does not exceed the maximum renderable range\r\n     * @private\r\n     * @return {boolean}\r\n     */\r\n    _verifyMaxRenderableRange() {\r\n// console.log( this._instanceProps.grids, '/', LimitScaleGrids[this._filterScaleKeyName( this._config.scale )] )\r\n        return this._instanceProps.grids <= LimitScaleGrids[this._filterScaleKeyName( this._config.scale )]\r\n    }\r\n    \r\n    /**\r\n     * Render the view of timeline container\r\n     * @private\r\n     */\r\n    _renderView() {\r\n        this._debug( '_renderView' )\r\n        \r\n        let _elem          = this._element,\r\n            _opts          = this._config,\r\n            _props         = this._instanceProps,\r\n            _tl_container  = $('<div></div>', { class: ClassName.TIMELINE_CONTAINER, style: `width: ${_props.visibleWidth}; height: ${_props.visibleHeight};` }),\r\n            _tl_main       = $('<div></div>', { class: ClassName.TIMELINE_MAIN })\r\n        \r\n//console.log( _elem, _opts, _props )\r\n        if ( $(_elem).length == 0 ) {\r\n            throw new TypeError( 'Does not exist the element to render a timeline container.' )\r\n        }\r\n        \r\n        if ( _opts.debug ) {\r\n            console.info( `Timeline:{ fullWidth: ${_props.fullwidth}px,`, `fullHeight: ${_props.fullheight}px,`, `viewWidth: ${_props.visibleWidth}`, `viewHeight: ${_props.visibleHeight} }` )\r\n        }\r\n        \r\n        $(_elem).css( 'position', 'relative' ) // initialize; not .empty()\r\n        if ( _opts.hideScrollbar ) {\r\n            _tl_container.addClass( ClassName.HIDE_SCROLLBAR )\r\n        }\r\n        \r\n        // Create the timeline headline (:> タイムラインの見出しを生成\r\n        $(_elem).prepend( this._createHeadline() )\r\n        \r\n        // Create the timeline event container (:> タイムラインのイベントコンテナを生成\r\n        _tl_main.append( this._createEventContainer() )\r\n        \r\n        // Create the timeline ruler (:> タイムラインの目盛を生成\r\n        if ( ! this.is_empty( _opts.ruler.top ) ) {\r\n            _tl_main.prepend( this._createRuler( 'top' ) )\r\n        }\r\n        if ( ! this.is_empty( _opts.ruler.bottom ) ) {\r\n            _tl_main.append( this._createRuler( 'bottom' ) )\r\n        }\r\n        \r\n        // Create the timeline side index (:> タイムラインのサイドインデックスを生成\r\n        let margin = {\r\n                top    : parseInt( _tl_main.find( Selector.RULER_TOP ).height(), 10 ) - 1,\r\n                bottom : parseInt( _tl_main.find( Selector.RULER_BOTTOM ).height(), 10 ) - 1\r\n            }\r\n        \r\n        if ( _opts.sidebar.list.length > 0 ) {\r\n            _tl_container.prepend( this._createSideIndex( margin ) )\r\n        }\r\n        \r\n        // Append the timeline container in the timeline element (:> タイムライン要素にタイムラインコンテナを追加\r\n        _tl_container.append( _tl_main )\r\n        $(_elem).append( _tl_container )\r\n        \r\n        // Create the timeline footer (:> タイムラインのフッタを生成\r\n        $(_elem).append( this._createFooter() )\r\n        \r\n        this._isShown = true\r\n    }\r\n    \r\n    /**\r\n     * Create the headline of the timeline\r\n     * @private\r\n     * @return {Object} Generated DOM element\r\n     */\r\n    _createHeadline() {\r\n        let _opts    = this._config,\r\n            _props   = this._instanceProps,\r\n            _display = this.supplement( Default.headline.display, _opts.headline.display, this.validateBoolean ),\r\n            _title   = this.supplement( null, _opts.headline.title ),\r\n            _range   = this.supplement( Default.headline.range, _opts.headline.range, this.validateBoolean ),\r\n            _locale  = this.supplement( Default.headline.locale, _opts.headline.locale ),\r\n            _format  = this.supplement( Default.headline.format, _opts.headline.format ),\r\n            _begin   = this.supplement( null, _props.begin ),\r\n            _end     = this.supplement( null, _props.end ),\r\n            _tl_headline = $('<div></div>', { class: ClassName.TIMELINE_HEADLINE }),\r\n            _wrapper     = $('<div></div>', { class: ClassName.TIMELINE_HEADLINE_WRAPPER })\r\n        \r\n// console.log( '!_createHeadline:', _opts )\r\n        if ( _title ) {\r\n            _wrapper.append( `<h3 class=\"${ClassName.HEADLINE_TITLE}\">${_opts.headline.title}</h3>` )\r\n        }\r\n        if ( _range ) {\r\n            if ( _begin && _end ) {\r\n                let _meta = `${new Date( _begin ).toLocaleString( _locale, _format )}<span class=\"${ClassName.RANGE_SPAN}\"></span>${new Date( _end ).toLocaleString( _locale, _format )}`\r\n                //let _meta = this.getCorrectDatetime( _begin ).toLocaleString( _locale, _format ) +'<span class=\"jqtl-range-span\"></span>'+ this.getCorrectDatetime( _end ).toLocaleString( _locale, _format )\r\n                \r\n                _wrapper.append( `<div class=\"${ClassName.RANGE_META}\">${_meta}</div>` )\r\n            }\r\n        }\r\n        if ( ! _display ) {\r\n            _tl_headline.addClass( ClassName.HIDE )\r\n        }\r\n        return _tl_headline.append( _wrapper )\r\n    }\r\n    \r\n    /**\r\n     * Create the event container of the timeline\r\n     * @private\r\n     * @return {Object} Generated DOM element\r\n     */\r\n    _createEventContainer() {\r\n        let _opts         = this._config,\r\n            _props        = this._instanceProps,\r\n            _actualHeight = _props.fullheight + Math.ceil( _props.rows / 2 ),\r\n            _container    = $('<div></div>', { class: ClassName.TIMELINE_EVENT_CONTAINER, style: `height:${_actualHeight}px;` }),\r\n            _events_bg    = $(`<canvas width=\"${( _props.fullwidth - 1 )}\" height=\"${_actualHeight}\" class=\"${ClassName.TIMELINE_BACKGROUND_GRID}\"></canvas>`),\r\n            _events_lines = $(`<canvas width=\"${( _props.fullwidth - 1 )}\" height=\"${_actualHeight}\" class=\"${ClassName.TIMELINE_RELATION_LINES}\"></canvas>`),\r\n            _events_body  = $('<div></div>', { class: ClassName.TIMELINE_EVENTS }),\r\n            _cy           = 0,\r\n            ctx_grid      = _events_bg[0].getContext('2d'),\r\n            drawRowRect   = ( pos_y, color ) => {\r\n                color = this.supplement( '#FFFFFF', color )\r\n                // console.log( 0, pos_y, _fullwidth, _size_row, color )\r\n                ctx_grid.fillStyle = color\r\n                ctx_grid.fillRect( 0, pos_y + 0.5, _props.fullwidth, _props.rowSize + 1.5 )\r\n                ctx_grid.stroke()\r\n            },\r\n            drawHorizontalLine = ( pos_y, is_dotted ) => {\r\n                is_dotted = this.supplement( false, is_dotted )\r\n                // console.log( pos_y, is_dotted )\r\n                ctx_grid.strokeStyle = 'rgba( 51, 51, 51, 0.1 )'\r\n                ctx_grid.lineWidth = 1\r\n                ctx_grid.filter = 'url(#crisp)'\r\n                ctx_grid.beginPath()\r\n                if ( is_dotted ) {\r\n                    ctx_grid.setLineDash([ 1, 2 ])\r\n                } else {\r\n                    ctx_grid.setLineDash([])\r\n                }\r\n                ctx_grid.moveTo( 0, pos_y + 0.5 )\r\n                ctx_grid.lineTo( _props.fullwidth, pos_y + 0.5 )\r\n                ctx_grid.closePath()\r\n                ctx_grid.stroke()\r\n            },\r\n            drawVerticalLine = ( pos_x, is_dotted ) => {\r\n                is_dotted = this.supplement( false, is_dotted )\r\n                // console.log( pos_x, is_dotted )\r\n                ctx_grid.strokeStyle = 'rgba( 51, 51, 51, 0.025 )'\r\n                ctx_grid.lineWidth = 1\r\n                ctx_grid.filter = 'url(#crisp)'\r\n                ctx_grid.beginPath()\r\n                if ( is_dotted ) {\r\n                    ctx_grid.setLineDash([ 1, 2 ])\r\n                } else {\r\n                    ctx_grid.setLineDash([])\r\n                }\r\n                ctx_grid.moveTo( pos_x - 0.5, 0 )\r\n                ctx_grid.lineTo( pos_x - 0.5, _props.fullheight )\r\n                ctx_grid.closePath()\r\n                ctx_grid.stroke()\r\n            }\r\n        \r\n        _cy = 0\r\n        for ( let i = 0; i < _props.rows; i++ ) {\r\n            _cy += i % 2 == 0 ? 1 : 0\r\n            let _pos_y = ( i * _props.rowSize ) + _cy\r\n            drawRowRect( _pos_y, i % 2 == 0 ? '#FEFEFE' : '#F8F8F8' )\r\n        }\r\n        _cy = 0\r\n        for ( let i = 1; i < _props.rows; i++ ) {\r\n            _cy += i % 2 == 0 ? 1 : 0\r\n            let _pos_y = ( i * _props.rowSize ) + _cy\r\n            drawHorizontalLine( _pos_y, true )\r\n        }\r\n        if ( /^(year|month)s?$/i.test( _opts.scale ) ) {\r\n            // For scales where the value of quantity per unit is variable length (:> 単位あたりの量の値が可変長であるスケールの場合\r\n            let _bc = /^years?$/i.test( _opts.scale ) ? 365 : 30,\r\n                _sy = 0\r\n            \r\n            for ( let _key of Object.keys( _props.variableScale ) ) {\r\n                _sy += this.numRound( ( _props.variableScale[_key] * _props.scaleSize ) / _bc, 2 )\r\n                drawVerticalLine( _sy, false )\r\n            }\r\n        } else {\r\n            // In case of fixed length scale (:> 固定長スケールの場合\r\n            for ( let i = 1; i < _props.grids; i++ ) {\r\n                drawVerticalLine( ( i * _props.scaleSize ), false )\r\n            }\r\n        }\r\n        \r\n        return _container.append( _events_bg ).append( _events_lines ).append( _events_body )\r\n    }\r\n    \r\n    /**\r\n     * Create the ruler of the timeline\r\n     * @private\r\n     * @param {string} position - Either \"top\" or \"bottom\" as the position of the ruler\r\n     * @return {Object} Generated DOM element\r\n     */\r\n    _createRuler( position ) {\r\n        let _opts       = this._config,\r\n            _props      = this._instanceProps,\r\n            ruler_line  = this.supplement( [ _opts.scale ], _opts.ruler[position].lines, ( def, val ) => Array.isArray( val ) && val.length > 0 ? val : def ),\r\n            line_height = this.supplement( Default.ruler.top.height, _opts.ruler[position].height ),\r\n            font_size   = this.supplement( Default.ruler.top.fontSize, _opts.ruler[position].fontSize ),\r\n            text_color  = this.supplement( Default.ruler.top.color, _opts.ruler[position].color ),\r\n            background  = this.supplement( Default.ruler.top.background, _opts.ruler[position].background ),\r\n            locale      = this.supplement( Default.ruler.top.locale, _opts.ruler[position].locale ),\r\n            format      = this.supplement( Default.ruler.top.format, _opts.ruler[position].format ),\r\n            ruler_opts  = { lines: ruler_line, height: line_height, fontSize: font_size, color: text_color, background, locale, format },\r\n            _fullwidth  = _props.fullwidth - 1,\r\n            _fullheight = ruler_line.length * line_height,\r\n            _ruler      = $('<div></div>', { class: `${PREFIX}ruler-${position}`, style: `height:${_fullheight}px;` }),\r\n            _ruler_bg   = $(`<canvas class=\"${PREFIX}ruler-bg-${position}\" width=\"${_fullwidth}\" height=\"${_fullheight}\"></canvas>`),\r\n            _ruler_body = $('<div></div>', { class: `${PREFIX}ruler-content-${position}` }),\r\n            _finalLines = 0,\r\n            ctx_ruler   = _ruler_bg[0].getContext('2d')\r\n            \r\n//console.log( grids, size_per_grid, scale, begin, min_scale, ruler, position, ruler_line, line_height, ctx_ruler.canvas.width, ctx_ruler.canvas.height )\r\n        // Draw background of ruler\r\n        ctx_ruler.fillStyle = background\r\n        ctx_ruler.fillRect( 0, 0, ctx_ruler.canvas.width, ctx_ruler.canvas.height )\r\n        \r\n        // Draw stroke of ruler\r\n        ctx_ruler.strokeStyle = 'rgba( 51, 51, 51, 0.1 )'\r\n        ctx_ruler.lineWidth = 1\r\n        ctx_ruler.filter = 'url(#crisp)'\r\n        ruler_line.some( ( line_scale, idx ) => {\r\n            if ( /^(quarter|half)-?(|hour)$/i.test( line_scale ) ) {\r\n                return true // break\r\n            }\r\n            \r\n            ctx_ruler.beginPath()\r\n            \r\n            // Draw rows\r\n            //let _line_x = position === 'top' ? 0 : ctx_ruler.canvas.width,\r\n            let _line_y = position === 'top' ? line_height * ( idx + 1 ) - 0.5 : line_height * idx + 0.5\r\n            \r\n            ctx_ruler.moveTo( 0, _line_y )\r\n            ctx_ruler.lineTo( ctx_ruler.canvas.width, _line_y )\r\n            \r\n            // Draw cols\r\n            let _line_grids = null,\r\n                _grid_x     = 0,\r\n                _correction = -1.5\r\n            \r\n            if ( /^(year|month)s?$/i.test( _opts.scale ) ) {\r\n                // For scales where the value of quantity per unit is variable length (:> 単位あたりの量の値が可変長であるスケールの場合\r\n                _line_grids = this._filterVariableScale( line_scale )\r\n//console.log( '!_createRuler:', line_scale, _line_grids )\r\n                \r\n                for ( let _key of Object.keys( _line_grids ) ) {\r\n                    _grid_x += this.numRound( _line_grids[_key], 2 )\r\n                    \r\n                    ctx_ruler.moveTo( _grid_x + _correction, position === 'top' ? _line_y - line_height : _line_y )\r\n                    ctx_ruler.lineTo( _grid_x + _correction, position === 'top' ? _line_y : _line_y + line_height )\r\n                }\r\n            } else {\r\n                // In case of fixed length scale (:> 固定長スケールの場合\r\n                _line_grids = this._getGridsPerScale( line_scale )\r\n                \r\n                for ( let _val of _line_grids ) {\r\n                    if ( this.is_empty( _val ) || _val >= _props.grids ) {\r\n                        break\r\n                    }\r\n                    let _grid_width = _val * _props.scaleSize\r\n                    \r\n                    _grid_x += _grid_width\r\n                    if ( Math.ceil( _grid_x ) - _correction >= ctx_ruler.canvas.width ) {\r\n                        break\r\n                    }\r\n                    ctx_ruler.moveTo( _grid_x + _correction, position === 'top' ? _line_y - line_height : _line_y )\r\n                    ctx_ruler.lineTo( _grid_x + _correction, position === 'top' ? _line_y : _line_y + line_height )\r\n                }\r\n            }\r\n            ctx_ruler.closePath()\r\n            ctx_ruler.stroke()\r\n            _ruler_body.append( this._createRulerContent( _line_grids, line_scale, ruler_opts ) )\r\n            _finalLines++\r\n        })\r\n        \r\n        if ( ruler_line.length != _finalLines ) {\r\n            _ruler.css( 'height', `${_finalLines * line_height}px` )\r\n        }\r\n        \r\n        return _ruler.append( _ruler_bg ).append( _ruler_body )\r\n    }\r\n    \r\n    /**\r\n     * Filter to aggregate the grid width of the variable length scale\r\n     * @private\r\n     * @param {string} target_scale - \r\n     * @return {Object} \r\n     */\r\n    _filterVariableScale( target_scale ) {\r\n        let _opts  = this._config,\r\n            _props = this._instanceProps,\r\n            _bc    = /^years?$/i.test( _opts.scale ) ? 365 : 30,\r\n            scales = _props.variableScale,\r\n            retObj = {}\r\n        \r\n        for ( let _dt of Object.keys( scales ) ) {\r\n            let _days     = scales[_dt],\r\n                grid_size = this.numRound( ( _days * _props.scaleSize ) / _bc, 2 ),\r\n                _newKey   = null,\r\n                _arr, _temp\r\n//console.log( '!_filterVariableScale:', _dt, this.getCorrectDatetime( _dt ).getFullYear(), _days )\r\n            \r\n            switch ( true ) {\r\n                case /^millenniums?|millennia$/i.test( target_scale ):\r\n                    _newKey = Math.ceil( this.getCorrectDatetime( _dt ).getFullYear() / 1000 )\r\n                    \r\n                    if ( retObj.hasOwnProperty( _newKey ) ) {\r\n                        retObj[_newKey] += grid_size\r\n                    } else {\r\n                        retObj[_newKey] = grid_size\r\n                    }\r\n                    break\r\n                case /^century$/i.test( target_scale ):\r\n                    _newKey = Math.ceil( this.getCorrectDatetime( _dt ).getFullYear() / 100 )\r\n                    \r\n                    if ( retObj.hasOwnProperty( _newKey ) ) {\r\n                        retObj[_newKey] += grid_size\r\n                    } else {\r\n                        retObj[_newKey] = grid_size\r\n                    }\r\n                    break\r\n                case /^dec(ade|ennium)$/i.test( target_scale ):\r\n                    _newKey = Math.ceil( this.getCorrectDatetime( _dt ).getFullYear() / 10 )\r\n                    \r\n                    if ( retObj.hasOwnProperty( _newKey ) ) {\r\n                        retObj[_newKey] += grid_size\r\n                    } else {\r\n                        retObj[_newKey] = grid_size\r\n                    }\r\n                    break\r\n                case /^lustrum$/i.test( target_scale ):\r\n                    _newKey = Math.ceil( this.getCorrectDatetime( _dt ).getFullYear() / 5 )\r\n                    \r\n                    if ( retObj.hasOwnProperty( _newKey ) ) {\r\n                        retObj[_newKey] += grid_size\r\n                    } else {\r\n                        retObj[_newKey] = grid_size\r\n                    }\r\n                    break\r\n                case /^years?$/i.test( target_scale ):\r\n                    _newKey = `${this.getCorrectDatetime( _dt ).getFullYear()}`\r\n                    \r\n                    if ( retObj.hasOwnProperty( _newKey ) ) {\r\n                        retObj[_newKey] += grid_size\r\n                    } else {\r\n                        retObj[_newKey] = grid_size\r\n                    }\r\n                    break\r\n                case /^months?$/i.test( target_scale ):\r\n                    retObj[`${this.getCorrectDatetime( _dt ).getFullYear()}/${this.getCorrectDatetime( _dt ).getMonth() + 1}`] = grid_size\r\n                    break\r\n                case /^weeks?$/i.test( target_scale ):\r\n                    _arr  = _dt.split(',')\r\n                    _temp = this.getWeek( _arr[0] )\r\n//console.log( '!_filterVariableScale::week:', _dt, _arr[0], _temp )\r\n                    retObj[`${this.getCorrectDatetime( _arr[0] ).getFullYear()},${_temp}`] = grid_size\r\n                    break\r\n                case /^weekdays?$/i.test( target_scale ):\r\n                    _arr  = _dt.split(',')\r\n                    _temp = this.getCorrectDatetime( _arr[0] ).getDay()\r\n                    retObj[`${this.getCorrectDatetime( _arr[0] ).getFullYear()}/${this.getCorrectDatetime( _arr[0] ).getMonth() + 1}/1,${_temp}`] = grid_size\r\n                    break\r\n                case /^days?$/i.test( target_scale ):\r\n                    retObj[`${this.getCorrectDatetime( _dt ).getFullYear()}/${this.getCorrectDatetime( _dt ).getMonth() + 1}/1`] = grid_size\r\n                    break\r\n                case /^hours?$/i.test( target_scale ):\r\n                    retObj[`${this.getCorrectDatetime( _dt ).getFullYear()}/${this.getCorrectDatetime( _dt ).getMonth() + 1}/1 0`] = grid_size\r\n                    break\r\n                case /^minutes?$/i.test( target_scale ):\r\n                    retObj[`${this.getCorrectDatetime( _dt ).getFullYear()}/${this.getCorrectDatetime( _dt ).getMonth() + 1}/1 0:00`] = grid_size\r\n                    break\r\n                case /^seconds?$/i.test( target_scale ):\r\n                    retObj[`${this.getCorrectDatetime( _dt ).getFullYear()}/${this.getCorrectDatetime( _dt ).getMonth() + 1}/1 0:00:00`] = grid_size\r\n                    break\r\n                default:\r\n                    retObj[`${this.getCorrectDatetime( _dt ).getFullYear()}/${this.getCorrectDatetime( _dt ).getMonth() + 1}`] = grid_size\r\n                    break\r\n            }\r\n        }\r\n        \r\n        return retObj\r\n    }\r\n    \r\n    /**\r\n     * Get the grid number per scale (for fixed length scale)\r\n     * @private\r\n     * @param {string} target_scale - \r\n     * @return {Object} \r\n     */\r\n    _getGridsPerScale( target_scale ) {\r\n        //let _opts        = this._config,\r\n        let _props       = this._instanceProps,\r\n            _scopes      = [],\r\n            _scale_grids = {},\r\n            _sep         = '/'\r\n        \r\n        for ( let i = 0; i < _props.grids; i++ ) {\r\n            let _tmp = new Date( _props.begin + ( i * _props.scale ) ),\r\n            //let _tmp = this.getCorrectDatetime( _props.begin + ( i * _props.scale ) ),\r\n                _y   = _tmp.getFullYear(),\r\n                _mil = Math.ceil( _y / 1000 ),\r\n                _cen = Math.ceil( _y / 100 ),\r\n                _dec = Math.ceil( _y / 10 ),\r\n                _lus = Math.ceil( _y / 5 ),\r\n                _m   = _tmp.getMonth() + 1,\r\n                _wd  = _tmp.getDay(), // 0 = Sun, ... 6 = Sat\r\n                _d   = _tmp.getDate(),\r\n                _w   = this.getWeek( `${_y}/${_m}/${_d}` ),\r\n                _h   = _tmp.getHours(),\r\n                _min = _tmp.getMinutes(),\r\n                _s   = _tmp.getSeconds()\r\n// console.log( '!!:', _tmp, `y: ${_y}`, `w: ${_w}`, /* `mil: ${_mil}`, `cen: ${_cen}`, `dec: ${_dec}`, `lus: ${_lus}` */ )\r\n            \r\n            _scopes.push({\r\n                millennium : _mil,\r\n                century    : _cen,\r\n                decade     : _dec,\r\n                lustrum    : _lus,\r\n                year       : _y,\r\n                month      : `${_y}${_sep}${_m}${_sep}1`,\r\n                week       : `${_y},${_w}`,\r\n                weekday    : `${_y}${_sep}${_m}${_sep}${_d},${_wd}`,\r\n                day        : `${_y}${_sep}${_m}${_sep}${_d}`,\r\n                hour       : `${_y}${_sep}${_m}${_sep}${_d} ${_h}`,\r\n                minute     : `${_y}${_sep}${_m}${_sep}${_d} ${_h}:${_min}`,\r\n                second     : `${_y}${_sep}${_m}${_sep}${_d} ${_h}:${_min}:${_s}`,\r\n                datetime   : _tmp.toString()\r\n            })\r\n        }\r\n        _scopes.forEach( ( _scope ) => {\r\n//console.log( _scope[target_scale], idx );\r\n            if ( ! _scale_grids[_scope[target_scale]] ) {\r\n                _scale_grids[_scope[target_scale]] = 1\r\n            } else {\r\n                _scale_grids[_scope[target_scale]]++\r\n            }\r\n        })\r\n//console.log( '!_getGridsPerScale:', target_scale, _scale_grids )\r\n        \r\n        return this.toIterableObject( _scale_grids )\r\n    }\r\n    \r\n    /**\r\n     * Create the content of ruler of the timeline\r\n     * @private\r\n     * @param {Object} _line_grids - \r\n     * @param {string} line_scale - \r\n     * @param {RulerOptions} ruler - \r\n     * @return {Object} Generated DOM element\r\n     */\r\n    _createRulerContent( _line_grids, line_scale, ruler ) {\r\n        let _opts        = this._config,\r\n            _props       = this._instanceProps,\r\n            line_height  = this.supplement( Default.ruler.top.height, ruler.height ),\r\n            font_size    = this.supplement( Default.ruler.top.fontSize, ruler.fontSize ),\r\n            text_color   = this.supplement( Default.ruler.top.color, ruler.color ),\r\n            locale       = this.supplement( Default.ruler.top.locale, ruler.locale, this.validateString ),\r\n            format       = this.supplement( Default.ruler.top.format, ruler.format, this.validateObject ),\r\n            _ruler_lines = $('<div></div>', { class: ClassName.TIMELINE_RULER_LINES, style: `width:100%;height:${line_height}px;` })\r\n        \r\n        for ( let _key of Object.keys( _line_grids ) ) {\r\n            let _item_width      = /^(year|month)s?$/i.test( _opts.scale ) ? _line_grids[_key] : _line_grids[_key] * _props.scaleSize,\r\n                _line            = $('<div></div>', { class: ClassName.TIMELINE_RULER_ITEM, style: `width:${_item_width}px;height:${line_height}px;line-height:${line_height}px;font-size:${font_size}px;color:${text_color};` }),\r\n                _ruler_string    = this.getLocaleString( _key, line_scale, locale, format ),\r\n                _data_ruler_item = ''\r\n//console.log( '!_createRulerContent:', _key, _line_grids[_key], line_scale, locale, format, _item_width, _ruler_string )\r\n            \r\n            _data_ruler_item = `${line_scale}-${( _data_ruler_item === '' ? String( _key ) : _data_ruler_item )}`\r\n            _line.attr( 'data-ruler-item', _data_ruler_item ).html( _ruler_string )\r\n            \r\n            if ( _item_width > this.strWidth( _ruler_string ) ) {\r\n                // Adjust position of ruler item string\r\n//console.log( _item_width, _ruler_string, _ruler_string.length, this.strWidth( _ruler_string ), $(this._element).width() )\r\n                if ( _item_width > $(this._element).width() ) {\r\n                    _line.addClass( ClassName.RULER_ITEM_ALIGN_LEFT )\r\n                }\r\n            }\r\n            \r\n            _ruler_lines.append( _line ).attr( 'data-ruler-scope', line_scale )\r\n        }\r\n        \r\n        return _ruler_lines\r\n    }\r\n    \r\n    /**\r\n     * Create the side indexes of the timeline\r\n     * @private\r\n     * @param {Object} margin - \r\n     * @param {number} margin.top - \r\n     * @param {number} margin.bottom - \r\n     * @return {Object} Generated DOM element\r\n     */\r\n    _createSideIndex( margin ) {\r\n        let _opts    = this._config,\r\n            _props   = this._instanceProps,\r\n            _sticky  = this.supplement( Default.sidebar.sticky, _opts.sidebar.sticky ),\r\n            _overlay = this.supplement( Default.sidebar.overlay, _opts.sidebar.overlay ),\r\n            _sbList  = this.supplement( Default.sidebar.list, _opts.sidebar.list ),\r\n            _wrapper = $('<div></div>', { class: ClassName.TIMELINE_SIDEBAR }),\r\n            _margin  = $('<div></div>', { class: ClassName.TIMELINE_SIDEBAR_MARGIN }),\r\n            _list    = $('<div></div>', { class: ClassName.TIMELINE_SIDEBAR_ITEM }),\r\n            _c       = 0.5\r\n        \r\n        if ( _sticky ) {\r\n            _wrapper.addClass( ClassName.STICKY_LEFT )\r\n        }\r\n        \r\n        if ( _overlay ) {\r\n            _list.addClass( ClassName.OVERLAY )\r\n        }\r\n        \r\n        //_wrapper.css( 'margin-top', margin.top + 'px' ).css( 'margin-bottom', margin.bottom + 'px' )\r\n        if ( margin.top > 0 ) {\r\n            _wrapper.prepend( _margin.clone().css( 'height', `${( margin.top + 1 )}px` ) )\r\n        }\r\n        \r\n        for ( let i = 0; i < _props.rows; i++ ) {\r\n            let _item = _list.clone().html( _sbList[i] )\r\n            \r\n            _wrapper.append( _item )\r\n        }\r\n        _wrapper.find( Selector.TIMELINE_SIDEBAR_ITEM ).css( 'height', `${( _props.rowSize + _c )}px` ).css( 'line-height', `${( _props.rowSize + _c )}px` )\r\n        \r\n        if ( margin.bottom > 0 ) {\r\n            _wrapper.append( _margin.clone().css( 'height', `${( margin.bottom + 1 )}px` ) )\r\n        }\r\n        \r\n        return _wrapper\r\n    }\r\n    \r\n    /**\r\n     * Create the footer of the timeline\r\n     * @private\r\n     * @return {Object} Generated DOM element\r\n     */\r\n    _createFooter() {\r\n        let _opts    = this._config,\r\n            _props   = this._instanceProps,\r\n            _display = this.supplement( Default.footer.display, _opts.footer.display ),\r\n            _content = this.supplement( null, _opts.footer.content ),\r\n            _range   = this.supplement( Default.footer.range, _opts.footer.range ),\r\n            _scale   = this.supplement( Default.footer.scale, _opts.footer.scale ),\r\n            _locale  = this.supplement( Default.footer.locale, _opts.footer.locale ),\r\n            _format  = this.supplement( Default.footer.format, _opts.footer.format ),\r\n            _begin   = this.supplement( null, _props.begin ),\r\n            _end     = this.supplement( null, _props.end ),\r\n            _tl_footer = $('<div></div>', { class: ClassName.TIMELINE_FOOTER })\r\n        \r\n        if ( _range ) {\r\n            if ( _begin && _end ) {\r\n                let _meta = `${new Date( _begin ).toLocaleString( _locale, _format )}<span class=\"${ClassName.RANGE_SPAN}\"></span>${new Date( _end ).toLocaleString( _locale, _format )}`\r\n                //let _meta = this.getCorrectDatetime( _begin ).toLocaleString( _locale, _format ) +'<span class=\"jqtl-range-span\"></span>'+ this.getCorrectDatetime( _end ).toLocaleString( _locale, _format )\r\n                \r\n                _tl_footer.append( `<div class=\"${ClassName.RANGE_META} ${ClassName.ALIGN_SELF_RIGHT}\">${_meta}</div>` )\r\n            }\r\n        }\r\n        if ( _content ) {\r\n            _tl_footer.append( `<div class=\"${ClassName.TIMELINE_FOOTER_CONTENT}\">${_content}</div>` )\r\n        }\r\n        if ( ! _display ) {\r\n            _tl_footer.addClass( ClassName.HIDE )\r\n        }\r\n        \r\n        return _tl_footer\r\n    }\r\n    \r\n    /**\r\n     * Acquire the difference between two dates with the specified scale value\r\n     * @private\r\n     * @param {number} date1 - Number that can be parsed as datetime\r\n     * @param {number} date2 - Number that can be parsed as datetime\r\n     * @param {string} [scale=\"millisecond\"] - \r\n     * @param {boolean} [absval=false] - \r\n     * @return {number|boolean}\r\n     */\r\n    _diffDate( date1, date2, scale = 'millisecond', absval = false ) {\r\n        //let _opts  = this._config,\r\n        let _dt1   = this.supplement( null, date1 ),\r\n            _dt2   = this.supplement( null, date2 ),\r\n            diffMS = 0,\r\n            retval = false,\r\n            lastDayOfMonth = ( dateObj ) => {\r\n                let _tmp = new Date( dateObj.getFullYear(), dateObj.getMonth() + 1, 1 )\r\n                _tmp.setTime( _tmp.getTime() - 1 )\r\n                return _tmp.getDate()\r\n            },\r\n            isLeapYear = ( dateObj ) => {\r\n                let _tmp = new Date( dateObj.getFullYear(), 0, 1 ),\r\n                    sum  = 0\r\n                \r\n                for ( let i = 0; i < 12; i++ ) {\r\n                    _tmp.setMonth(i)\r\n                    sum += lastDayOfMonth( _tmp )\r\n                }\r\n                return sum == 365 ? false : true\r\n            }\r\n        \r\n        if ( ! _dt1 || ! _dt2 ) {\r\n            console.warn( 'Cannot parse date because invalid format or undefined.' )\r\n            return false\r\n        }\r\n        \r\n        diffMS = _dt2 - _dt1\r\n        \r\n        if ( absval ) {\r\n            diffMS = Math.abs( diffMS )\r\n        }\r\n        \r\n        let _bd = new Date( _dt1 ),\r\n            _ed = new Date( _dt2 ),\r\n            _dy = _ed.getFullYear() - _bd.getFullYear(),\r\n            _m  = {}\r\n        \r\n        switch ( true ) {\r\n            case /^years?$/i.test( scale ):\r\n                if ( _dy > 0 ) {\r\n                    for ( let i = 0; i <= _dy; i++ ) {\r\n                        let _cd = new Date( _bd.getFullYear() + i, 0, 1 )\r\n                        _m[`${_bd.getFullYear() + i}`] = isLeapYear( _cd ) ? 366 : 365\r\n                    }\r\n                } else {\r\n                    _m[`${_bd.getFullYear()}`] = isLeapYear( _bd ) ? 366 : 365\r\n                }\r\n                retval = _m\r\n                break\r\n            case /^months?$/i.test( scale ):\r\n                if ( _dy > 0 ) {\r\n                    for ( let i = _bd.getMonth(); i < 12; i++ ) {\r\n                        let _cd = new Date( _bd.getFullYear(), i, 1 )\r\n                        _m[`${_bd.getFullYear()}/${i + 1}`] = lastDayOfMonth( _cd )\r\n                    }\r\n                    if ( _dy > 1 ) {\r\n                        for ( let y = 1; y < _dy; y++ ) {\r\n                            for ( let i = 0; i < 12; i++ ) {\r\n                                let _cd = new Date( _bd.getFullYear() + y, i, 1 )\r\n                                _m[`${_bd.getFullYear() + y}/${i + 1}`] = lastDayOfMonth( _cd )\r\n                            }\r\n                        }\r\n                    }\r\n                    for ( let i = 0; i <= _ed.getMonth(); i++ ) {\r\n                        let _cd = new Date( _ed.getFullYear(), i, 1 )\r\n                        _m[`${_ed.getFullYear()}/${i + 1}`] = lastDayOfMonth( _cd )\r\n                    }\r\n                } else {\r\n                    for ( let i = _bd.getMonth(); i <= _ed.getMonth(); i++ ) {\r\n                        let _cd = new Date( _bd.getFullYear(), i, 1 )\r\n                        _m[`${_bd.getFullYear()}/${i + 1}`] = lastDayOfMonth( _cd )\r\n                    }\r\n                }\r\n                retval = _m\r\n                break\r\n            case /^weeks?$/i.test( scale ):\r\n                retval = Math.ceil( diffMS / ( 7 * 24 * 60 * 60 * 1000 ) )\r\n                break\r\n            case /^(|week)days?$/i.test( scale ):\r\n                retval = Math.ceil( diffMS / ( 24 * 60 * 60 * 1000 ) )\r\n                break\r\n            case /^hours?$/i.test( scale ):\r\n                retval = Math.ceil( diffMS / ( 60 * 60 * 1000 ) )\r\n                break\r\n            case /^minutes?$/i.test( scale ):\r\n                retval = Math.ceil( diffMS / ( 60 * 1000 ) )\r\n                break\r\n            case /^seconds?$/i.test( scale ):\r\n                retval = Math.ceil( diffMS / 1000 )\r\n                break\r\n            default:\r\n                retval = diffMS\r\n                break\r\n        }\r\n//console.log( '!_diffDate:', retval )\r\n        \r\n        return retval\r\n    }\r\n    \r\n    /**\r\n     * Load all enabled events markupped on target element to the timeline object\r\n     * @private\r\n     */\r\n    _loadEvent() {\r\n        this._debug( '_loadEvent' )\r\n        \r\n        let _that         = this,\r\n            _elem         = this._element,\r\n            _event_list   = $(_elem).find( Selector.DEFAULT_EVENTS ),\r\n            _cnt          = 0,\r\n            events        = [],\r\n            lastEventId   = 0\r\n        \r\n        _event_list.children().each(function() {\r\n            let _attr = $(this).attr( 'data-timeline-node' )\r\n            \r\n            if ( typeof _attr !== 'undefined' && _attr !== false ) {\r\n                _cnt++\r\n            }\r\n        })\r\n        \r\n        if ( _event_list.length == 0 || _cnt == 0 ) {\r\n            this._debug( 'Enable event does not exist.' )\r\n        }\r\n        \r\n        // Register Event Data\r\n        _event_list.children().each(function() {\r\n            let _evt_params = _that._getPluggableParams( $(this).attr( 'data-timeline-node' ) ),\r\n                _one_event  = {}\r\n            \r\n            if ( ! _that.is_empty( _evt_params ) ) {\r\n                _one_event = _that._registerEventData( this, _evt_params )\r\n                events.push( _one_event )\r\n                lastEventId = Math.max( lastEventId, parseInt( _one_event.eventId, 10 ) )\r\n            }\r\n        });\r\n        // Set event id with auto increment (:> イベントIDを自動採番\r\n        let cacheIds = [] // for checking duplication of id (:> IDの重複チェック用\r\n        events.forEach( ( _evt, _i, _this ) => {\r\n            let _chkId = parseInt( _this[_i].eventId, 10 )\r\n            \r\n            if ( _chkId == 0 || cacheIds.includes( _chkId ) ) {\r\n                lastEventId++\r\n                _this[_i].eventId = lastEventId\r\n            } else {\r\n                _this[_i].eventId = _chkId\r\n            }\r\n            cacheIds.push( _this[_i].eventId )\r\n        });\r\n        \r\n        this._isCached = this._saveToCache( events )\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Register one event data as object\r\n     * @private\r\n     * @param {Object} event_element - \r\n     * @param {Object} params - \r\n     * @return {Object} Registered new event data\r\n     */\r\n    _registerEventData( event_element, params ) {\r\n        let _opts     = this._config,\r\n            _props    = this._instanceProps,\r\n            new_event = {\r\n                ...EventParams,\r\n                ...{\r\n                    uid   : this.generateUniqueID(),\r\n                    label : $(event_element).html()\r\n                }\r\n            },\r\n            _relation = {},\r\n            _x, _w, _c //, _pointSize\r\n//console.log( '!_registerEventData:', _opts, params )\r\n        \r\n        if ( params.hasOwnProperty( 'start' ) && ! this.is_empty( params.start ) ) {\r\n            _x = this._getCoordinateX( params.start )\r\n            new_event.x = this.numRound( _x, 2 )\r\n            if ( params.hasOwnProperty( 'end' ) && ! this.is_empty( params.end ) ) {\r\n                _x = this._getCoordinateX( params.end )\r\n                _w = _x - new_event.x\r\n                new_event.width = this.numRound( _w, 2 )\r\n                \r\n                if ( _opts.eventMeta.display ) {\r\n                    if ( this.is_empty( _opts.eventMeta.content ) && ! params.hasOwnProperty( 'rangeMeta' ) ) {\r\n//console.log( '!_registerEventData:', _opts.eventMeta.locale, _opts.eventMeta.format, _opts.scale, params )\r\n                        \r\n                        new_event.rangeMeta += this.getLocaleString( params.start, _opts.eventMeta.scale, _opts.eventMeta.locale, _opts.eventMeta.format )\r\n                        new_event.rangeMeta += ` - ${this.getLocaleString( params.end, _opts.eventMeta.scale, _opts.eventMeta.locale, _opts.eventMeta.format )}`\r\n                    } else {\r\n                        new_event.rangeMeta = _opts.eventMeta.content\r\n                    }\r\n                }\r\n            } else {\r\n                new_event.width = 0\r\n            }\r\n//console.log( 'getX:', _x, 'getW:', _w, event_element )\r\n            if ( params.hasOwnProperty( 'row' ) ) {\r\n                _c = Math.floor( params.row / 2 )\r\n                new_event.y = ( params.row - 1 ) * _opts.rowHeight + new_event.margin + _c\r\n            }\r\n            \r\n            Object.keys( new_event ).forEach( ( _prop ) => {\r\n                switch( true ) {\r\n                    case /^eventId$/i.test( _prop ):\r\n                        if ( params.hasOwnProperty( 'id' ) && this.is_empty( new_event.eventId ) ) {\r\n                            new_event.eventId = parseInt( params.id, 10 )\r\n                        } else {\r\n                            new_event.eventId = parseInt( params[_prop], 10 ) || 0\r\n                        }\r\n                        break\r\n                    case /^(label|content)$/i.test( _prop ):\r\n                        if ( params.hasOwnProperty( _prop ) && ! this.is_empty( params[_prop] ) ) {\r\n                            new_event[_prop] = params[_prop]\r\n                        }\r\n                        // Override the children element to label or content setting\r\n                        if ( $(event_element).children(`.event-${_prop}`).length > 0 ) {\r\n                            new_event[_prop] = $(event_element).children(`.event-${_prop}`).html()\r\n                        }\r\n//console.log( '!_registerEventData:', _prop, params[_prop], new_event[_prop] )\r\n                        break\r\n                    case /^relation$/i.test( _prop ):\r\n                        // For drawing the relation line\r\n                        if ( /^point(|er)$/i.test( _opts.type ) ) {\r\n                            //let _pointSize  = this._getPointerSize( new_event.size, new_event.margin )\r\n                            _relation.x = this.numRound( new_event.x, 2 )\r\n                            _relation.y = this.numRound( ( _props.rowSize * ( ( params.row || 1 ) - 1 ) ) + ( _props.rowSize / 2 ), 2 )\r\n                            \r\n//console.log( '!_registerEventData:', params, new_event.x, new_event.y, _pointSize, _relation )\r\n                            new_event[_prop] = {\r\n                                ...params[_prop],\r\n                                ..._relation\r\n                            }\r\n                        }\r\n                        break\r\n                    default:\r\n                        if ( params.hasOwnProperty( _prop ) && ! this.is_empty( params[_prop] ) ) {\r\n                            new_event[_prop] = params[_prop]\r\n                        }\r\n                        break\r\n                }\r\n            });\r\n        }\r\n//console.log( '!_registerEventData:', new_event )\r\n        return new_event\r\n    }\r\n    \r\n    /**\r\n     * Get the coordinate X on the timeline of any date\r\n     * @private\r\n     * @param {string} date - \r\n     * @return {number} The pixel value as the coordinate X on timeline\r\n     */\r\n    _getCoordinateX( date ) {\r\n        //let _opts  = this._config,\r\n        let _props = this._instanceProps,\r\n            _date  = this.supplement( null, this._getPluggableDatetime( date ) ),\r\n            coordinate_x = 0\r\n        \r\n        if ( _date ) {\r\n            if ( _date - _props.begin >= 0 && _props.end - _date >= 0 ) {\r\n                // When the given date is within the range of timeline begin and end (:> 指定された日付がタイムラインの開始と終了の範囲内にある場合\r\n                coordinate_x = ( Math.abs( _date - _props.begin ) / _props.scale ) * _props.scaleSize\r\n            } else {\r\n                // When the given date is out of timeline range (:> 指定された日付がタイムラインの範囲外にある場合\r\n                coordinate_x = ( ( _date - _props.begin ) / _props.scale ) * _props.scaleSize\r\n            }\r\n        } else {\r\n            console.warn( 'Cannot parse date because invalid format or undefined.' )\r\n        }\r\n        \r\n        return coordinate_x\r\n    }\r\n    \r\n    /**\r\n     * Cache the event data to the web storage\r\n     * @private\r\n     * @param {Object} data - \r\n     */\r\n    _saveToCache( data ) {\r\n        let strageEngine = /^local(|Storage)$/i.test( this._config.storage ) ? 'localStorage' : 'sessionStorage',\r\n            is_available = ( strageEngine in window ) && ( ( strageEngine === 'localStorage' ? window.localStorage : window.sessionStorage ) !== null )\r\n        \r\n        if ( is_available ) {\r\n            if ( strageEngine === 'localStorage' ) {\r\n                localStorage.setItem( this._selector, JSON.stringify( data ) )\r\n            } else {\r\n                sessionStorage.setItem( this._selector, JSON.stringify( data ) )\r\n            }\r\n            return true\r\n        } else {\r\n            throw new TypeError( `The storage named \"${strageEngine}\" can not be available.` )\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Load the cached event data from the web storage\r\n     * @private\r\n     * @return {Object}\r\n     */\r\n    _loadToCache() {\r\n        let strageEngine = /^local(|Storage)$/i.test( this._config.storage ) ? 'localStorage' : 'sessionStorage',\r\n            is_available = ( strageEngine in window ) && ( ( strageEngine === 'localStorage' ? window.localStorage : window.sessionStorage ) !== null ),\r\n            data         = null\r\n        \r\n        if ( is_available ) {\r\n            if ( strageEngine === 'localStorage' ) {\r\n                data = JSON.parse( localStorage.getItem( this._selector ) )\r\n            } else {\r\n                data = JSON.parse( sessionStorage.getItem( this._selector ) )\r\n            }\r\n        } else {\r\n            throw new TypeError( `The storage named \"${strageEngine}\" can not be available.` )\r\n        }\r\n        return data\r\n    }\r\n    \r\n    /**\r\n     * Remove the cache data on the web storage\r\n     * @private\r\n     */\r\n    _removeCache() {\r\n        let strageEngine = /^local(|Storage)$/i.test( this._config.storage ) ? 'localStorage' : 'sessionStorage',\r\n            is_available = ( strageEngine in window ) && ( ( strageEngine === 'localStorage' ? window.localStorage : window.sessionStorage ) !== null )\r\n        \r\n        if ( is_available ) {\r\n            if ( strageEngine === 'localStorage' ) {\r\n                localStorage.removeItem( this._selector )\r\n            } else {\r\n                sessionStorage.removeItem( this._selector )\r\n            }\r\n        } else {\r\n            throw new TypeError( `The storage named \"${strageEngine}\" can not be available.` )\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Controller method to place event data on timeline\r\n     * @private: \r\n     */\r\n    _placeEvent() {\r\n        this._debug( '_placeEvent' )\r\n        \r\n        if ( ! this._isCached ) {\r\n            return\r\n        }\r\n        \r\n        let _elem           = this._element,\r\n            _opts           = this._config,\r\n            _evt_container  = $(_elem).find( Selector.TIMELINE_EVENTS ),\r\n            _relation_lines = $(_elem).find( Selector.TIMELINE_RELATION_LINES ),\r\n            events          = this._loadToCache(),\r\n            _sleep          = _opts.debug ? DEBUG_SLEEP : 1\r\n        \r\n        if ( events.length > 0 ) {\r\n            _evt_container.empty()\r\n            events.forEach( ( _evt ) => {\r\n                let _evt_elem = this._createEventNode( _evt )\r\n                \r\n                if ( _evt_elem ) {\r\n                    _evt_container.append( _evt_elem )\r\n                }\r\n            })\r\n        }\r\n        \r\n        if ( /^point(|er)$/i.test( _opts.type ) ) {\r\n            this._drawRelationLine( events )\r\n        }\r\n        \r\n// console.log( '!_placeEvent:', _opts )\r\n        this.sleep( _sleep ).then(() => {\r\n            this.hideLoader()\r\n            _evt_container.fadeIn( 'fast', () => {\r\n                _relation_lines.fadeIn( 'fast' )\r\n            })\r\n        })\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Create an event element on the timeline\r\n     * @private\r\n     * @param {Object} params - \r\n     * @return {Object} Generated DOM element\r\n     */\r\n    _createEventNode( params ) {\r\n        let _opts     = this._config,\r\n            _props    = this._instanceProps,\r\n            _evt_elem = $('<div></div>', {\r\n                class : ClassName.TIMELINE_EVENT_NODE,\r\n                id    : `evt-${params.eventId}`,\r\n                css   : {\r\n                    left   : `${params.x}px`,\r\n                    top    : `${params.y}px`,\r\n                    width  : `${params.width}px`,\r\n                    height : `${params.height}px`,\r\n                    color  : this.hexToRgbA( params.color ),\r\n                    backgroundColor : this.hexToRgbA( params.bgColor ),\r\n                },\r\n                html  : `<div class=\"${ClassName.TIMELINE_EVENT_LABEL}\">${params.label}</div>`\r\n            })\r\n//console.log( '!_createEventNode:', params )\r\n        \r\n        // Whether this event is within the display range of the timeline (:> タイムライン表示範囲内のイベントかどうか\r\n        // For events excluded, set the width to -1 (:> 除外イベントは幅を -1 に設定する\r\n        if ( params.x >= 0 ) {\r\n            // The event start datetime is over the start datetime of the timeline (:> イベント始点がタイムラインの始点以上\r\n            if ( params.x <= _props.fullwidth ) {\r\n                // The event start datetime is less than or equal to the timeline end datetime (:> イベントの始点がタイムラインの終点以下\r\n                if ( params.x + params.width <= _props.fullwidth ) {\r\n                    // The event end datetime is less than before the timeline end datetime (regular event) (:> イベント終点がタイムラインの終点以下（通常イベント）\r\n                    // OK\r\n                } else {\r\n                    // The event end datetime is after the timeline end datetime (event exceeded end datetime) (:> イベント終点がタイムラインの終点より後（終点超過イベント）\r\n                    params.width = _props.fullwidth - params.x\r\n                }\r\n            } else {\r\n                // The event start datetime is after the timeline end datetime (exclude event) (:> イベント始点がタイムラインの終点より後（除外イベント）\r\n                params.width = -1\r\n            }\r\n        } else {\r\n            // The event start datetime is before the timeline start datetime (:> イベント始点がタイムラインの始点より前\r\n            if ( /^point(|er)$/i.test( _opts.type ) ) {\r\n                // In the case of \"point\" type, that is an exclude event (:> ポインター型の場合は除外イベント\r\n                params.width = -1\r\n            } else {\r\n                // The case of \"bar\" type\r\n                if ( params.x + params.width <= 0 ) {\r\n                    // The event end datetime is less than before the timeline start datetime (exclude event) (:> イベント終点がタイムラインの始点より前（除外イベント）\r\n                    params.width = -1\r\n                } else {\r\n                    // The event end datetime is after the timeline start datetime (:> イベント終点がタイムラインの始点より後\r\n                    if ( params.x + params.width <= _props.fullwidth ) {\r\n                        // The event end datetime is less than or equal the timeline end datetime (event exceeded start datetime) (:> イベント終点がタイムラインの終点以下（始点超過イベント）\r\n                        params.width = Math.abs( params.x + params.width )\r\n                        params.x = 0\r\n                    } else {\r\n                        // The event end datetime is after the timeline end datetime (event exceeded both start and end datetime) (:> イベント終点がタイムラインの終点より後（始点・終点ともに超過イベント）\r\n                        params.width = _props.fullwidth\r\n                        params.x = 0\r\n                    }\r\n                }\r\n            }\r\n        }\r\n//console.log( 'x:', params.x, 'w:', params.width, 'x-end:', Math.abs( params.x ) + params.width, 'fw:', _props.fullwidth, 'ps:', params.size )\r\n        \r\n        if ( /^point(|er)$/i.test( _opts.type ) ) {\r\n            if ( params.width < 0 ) {\r\n                return null\r\n            }\r\n            let _pointSize = this._getPointerSize( params.size, params.margin ),\r\n                _shiftX    = this.numRound( params.x - ( _pointSize / 2 ), 2 ),\r\n                _shiftY    = this.numRound( params.y + ( ( params.height - _pointSize ) / 2 ), 2 )\r\n            \r\n//console.log( '!_createEventNode:', params, _pointSize, _shiftX, _shiftY )\r\n            _evt_elem.addClass( ClassName.VIEWER_EVENT_TYPE_POINTER ).css( 'border-color', params.bdColor )\r\n            .css( 'left', `${_shiftX}px` ).css( 'top', `${_shiftY}px` ).css( 'width', `${_pointSize}px` ).css( 'height', `${_pointSize}px` )\r\n            .attr( 'data-base-size', _pointSize ).attr( 'data-base-left', _shiftX ).attr( 'data-base-top', _shiftY )\r\n        } else {\r\n            if ( params.width < 1 ) {\r\n                return null\r\n            }\r\n            _evt_elem.css( 'left', `${params.x}px` ).css( 'width', `${params.width}px` )\r\n        }\r\n        \r\n        _evt_elem.attr( 'data-uid', params.uid )\r\n        \r\n        if ( ! this.is_empty( params.image ) ) {\r\n            if ( /^point(|er)$/i.test( _opts.type ) ) {\r\n                _evt_elem.css( 'background-image', `url(${params.image})` )\r\n            } else {\r\n                let _imgSize = params.height - ( params.margin * 2 )\r\n                _evt_elem.prepend( `<img src=\"${params.image}\" class=\"${ClassName.TIMELINE_EVENT_THUMBNAIL}\" width=\"${_imgSize}\" height=\"${_imgSize}\" />` )\r\n            }\r\n        }\r\n        \r\n        if ( /^bar$/i.test( _opts.type ) && _opts.eventMeta.display ) {\r\n//console.log( '!_createEventNode:', params )\r\n            params.extend.meta = params.rangeMeta\r\n        }\r\n        \r\n        if ( ! this.is_empty( params.extend ) ) {\r\n            for ( let _prop of Object.keys( params.extend ) ) {\r\n                _evt_elem.attr( `data-${_prop}`, params.extend[_prop] )\r\n                if ( _prop === 'toggle' && [ 'popover', 'tooltip' ].includes( params.extend[_prop] ) ) {\r\n                    // for bootstrap's popover or tooltip\r\n                    _evt_elem.attr( 'title', params.label )\r\n                    if ( ! params.extend.hasOwnProperty( 'content' ) ) {\r\n                        _evt_elem.attr( 'data-content', params.content )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        if ( ! this.is_empty( params.callback ) ) {\r\n            _evt_elem.attr( 'data-callback', params.callback )\r\n        }\r\n        \r\n        return _evt_elem\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the diameter size (pixel) of pointer\r\n     * @private\r\n     * @param {number|string} key - \r\n     * @param {number} margin\r\n     * @return {number} \r\n     */\r\n    _getPointerSize( key, margin ) {\r\n        //let _opts  = this._config,\r\n        let _props = this._instanceProps,\r\n            _max   = Math.min( _props.scaleSize, _props.rowSize ) - ( margin * 2 ),\r\n            _size  = null\r\n        \r\n        switch ( true ) {\r\n            case /^large$/i.test( key ):\r\n                _size = Math.max( this.numRound( _max * 0.8, 1 ), MIN_POINTER_SIZE )\r\n                break\r\n            case /^normal$/i.test( key ):\r\n                _size = Math.max( this.numRound( _max / 2, 1 ), MIN_POINTER_SIZE )\r\n                break\r\n            case /^small$/i.test( key ):\r\n                _size = Math.max( this.numRound( _max / 4, 1 ), MIN_POINTER_SIZE )\r\n                break\r\n            default:\r\n                _size = Math.max( parseInt( key, 10 ), MIN_POINTER_SIZE )\r\n        }\r\n        \r\n//console.log( '!_getPointerSize:', _props, key, _max, _size )\r\n        return _size\r\n    }\r\n    \r\n    /**\r\n     * Draw the relational lines\r\n     * @private\r\n     * @param {Object} events - \r\n     */\r\n    _drawRelationLine( events ) {\r\n        let _opts         = this._config,\r\n            _props        = this._instanceProps,\r\n            _canvas       = $(this._element).find( Selector.TIMELINE_RELATION_LINES ),\r\n            ctx_relations = _canvas[0].getContext('2d'),\r\n            drawLine      = ( _sx, _sy, _ex, _ey, evt, _ba ) => {\r\n                let _curveType = {},\r\n                    _radius    = this.numRound( Math.min( _props.scaleSize, _props.rowSize ) / 2, 2 ),\r\n                    _subRadius = this.numRound( this._getPointerSize( evt.size, _opts.marginHeight ) / 2, 2 )\r\n                \r\n                // Defaults\r\n                ctx_relations.strokeStyle = EventParams.bdColor\r\n                ctx_relations.lineWidth   = 2.5\r\n                ctx_relations.filter      = 'url(#crisp)'\r\n                \r\n                for ( let _key of Object.keys( evt.relation ) ) {\r\n                    switch ( true ) {\r\n                        case /^(|line)color$/i.test( _key ):\r\n                            ctx_relations.strokeStyle = evt.relation[_key]\r\n                            break\r\n                        case /^(|line)size$/i.test( _key ):\r\n                            ctx_relations.lineWidth = parseInt( evt.relation[_key], 10 ) || 2.5\r\n                            break\r\n                        case /^curve$/i.test( _key ):\r\n                        if ( /^(r|l)(t|b),?(r|l)?(t|b)?$/i.test( evt.relation[_key] ) ) {\r\n                                let _tmp = evt.relation[_key].split(',')\r\n                                if ( _tmp.length == 2 ) {\r\n                                    _curveType.before = _tmp[0]\r\n                                    _curveType.after  = _tmp[1]\r\n                                } else {\r\n                                    _curveType[_ba] = _tmp[0]\r\n                                }\r\n                            } else\r\n                            if ( ( typeof evt.relation[_key] === 'boolean' && evt.relation[_key] ) || ( typeof evt.relation[_key] === 'number' && Boolean( evt.relation[_key] ) ) ) {\r\n                                // Automatically set the necessary linearity type (:> 自動線形判定\r\n//console.log( _sx, _sy, _ex, _ey, _radius, _ba, _subRadius )\r\n                                if ( _ba === 'before' ) {\r\n                                    // before: targetEvent[ _ex, _ey ] <---- selfEvent[ _sx, _sy ]\r\n                                    if ( _sy > _ey ) {\r\n                                        // 連結点が自分より上にある\r\n                                        if ( _sx > _ex ) {\r\n                                            // 連結点が自分より左にある \"(_ex,_ey)└(_sx,_sy)\" as \"lb\"\r\n                                            _curveType[_ba] = 'lb'\r\n                                        } else\r\n                                        if ( _sx < _ex ) {\r\n                                            // 連結点が自分より右にある \"⊂￣\" as \"lb+lt\"\r\n                                            _curveType[_ba] = 'lb+lt'\r\n                                        } else {\r\n                                            // 連結点が自分の直上 \"│\" to top\r\n                                            _curveType[_ba] = null\r\n                                        }\r\n                                    } else\r\n                                    if ( _sy < _ey ) {\r\n                                        // 連結点が自分より下にある\r\n                                        if ( _sx > _ex ) {\r\n                                            // 連結点が自分より左にある \"(_ex,_ey)┌(_sx,_sy)\" as \"lt\"\r\n                                            _curveType[_ba] = 'lt'\r\n                                        } else\r\n                                        if ( _sx < _ex ) {\r\n                                            // 連結点が自分より右にある \"⊂_\" as \"rt+rb\"\r\n                                            _curveType[_ba] = 'lt+lb'\r\n                                        } else {\r\n                                            // 連結点が自分の直下 \"│\" to bottom\r\n                                            _curveType[_ba] = null\r\n                                        }\r\n                                    } else {\r\n                                        // 連結点が自分と同じ水平上にある（左右どちらか） _sy == _ey; \"─\" to left or right\r\n                                        _curveType[_ba] = null\r\n                                    }\r\n                                } else\r\n                                if ( _ba === 'after' ) {\r\n                                    // after: selfEvent[ _sx, _sy ] ----> targetEvent[ _ex, _ey ]\r\n                                    if ( _sy < _ey ) {\r\n                                        // Relational endpoint is located \"under\" self (:> 連結点が自分の下にある\r\n                                        if ( _sx < _ex ) {\r\n                                            // Then relational endpoint is located \"right\" self (:> 連結点が自分の右にある \"(_sx,_sy)┐(_ex,_ey)\" as \"rt\"\r\n                                            _curveType[_ba] = 'rt'\r\n                                        } else\r\n                                        if ( _sx > _ex ) {\r\n                                            // Then relational endpoint is located \"left\" self (:> 連結点が自分より左にある \"_⊃\" as \"rt+rb\"\r\n                                            _curveType[_ba] = 'rt+rb'\r\n                                        } else {\r\n                                            // Relational endpoint is located \"just under\" self (:> 連結点が自分の直下 \"│\" to bottom\r\n                                            _curveType[_ba] = null\r\n                                        }\r\n                                    } else\r\n                                    if ( _sy > _ey ) {\r\n                                        // Relational endpoint is located \"above\" self (:> 連結点が自分より上にある\r\n                                        if ( _sx < _ex ) {\r\n                                            // Then relational endpoint is located \"right\" self (:> 連結点が自分の右にある \"┘\" as \"rb\"\r\n                                            _curveType[_ba] = 'rb'\r\n                                        } else\r\n                                        if ( _sx > _ex ) {\r\n                                            // Then relational endpoint is located \"left\" self (:> 連結点が自分より左にある \"￣⊃\" as \"rb+rt\"\r\n                                            _curveType[_ba] = 'rb+rt'\r\n                                        } else {\r\n                                            // Relational endpoint is located \"just under\" self (:> 連結点が自分の直上 \"│\" to top\r\n                                            _curveType[_ba] = null\r\n                                        }\r\n                                    } else {\r\n                                        // 連結点が自分と同じ水平上にある（左右どちらか） _sy == _ey; \"─\" to left or right\r\n                                        _curveType[_ba] = null\r\n                                    }\r\n                                }\r\n                            }\r\n                            break\r\n                    }\r\n                }\r\n                if ( Math.abs( _ey - _sy ) > _props.rowSize ) {\r\n                    _ey += Math.floor( Math.abs( _ey - _sy ) / _props.rowSize )\r\n                }\r\n                ctx_relations.beginPath()\r\n                if ( ! this.is_empty( _curveType ) ) {\r\n// console.log( '!_drawLine:', _curveType, _sx, _sy, _ex, _ey, _radius )\r\n                    switch ( true ) {\r\n                        case /^lt$/i.test( _curveType[_ba] ): // \"(_ex,_ey)┌(_sx,_sy)\"\r\n                            ctx_relations.moveTo( _sx, _sy )\r\n                            if ( Math.abs( _sx - _ex ) > _radius ) {\r\n                                ctx_relations.lineTo( _ex - _radius, _sy ) // \"─\"\r\n                            }\r\n                            if ( Math.abs( _ey - _sy ) > _radius ) {\r\n                                ctx_relations.quadraticCurveTo( _ex, _sy, _ex, _sy + _radius ) // \"┌\"\r\n                                ctx_relations.lineTo( _ex, _ey ) // \"│\"\r\n                            } else {\r\n                                ctx_relations.quadraticCurveTo( _ex, _sy, _ex, _ey ) // \"┌\"\r\n                            }\r\n                            break\r\n                        case /^lb$/i.test( _curveType[_ba] ): // \"(_ex,_ey)└(_sx,_sy)\"\r\n                            ctx_relations.moveTo( _sx, _sy )\r\n                            if ( Math.abs( _sx - _ex ) > _radius ) {\r\n                                ctx_relations.lineTo( _ex + _radius, _sy ) // \"─\"\r\n                            }\r\n                            if ( Math.abs( _sy - _ey ) > _radius ) {\r\n                                ctx_relations.quadraticCurveTo( _ex, _sy, _ex, _sy - _radius ) // \"└\"\r\n                                ctx_relations.lineTo( _ex, _ey ) // \"│\"\r\n                            } else {\r\n                                ctx_relations.quadraticCurveTo( _ex, _sy, _ex, _ey ) // \"└\"\r\n                            }\r\n                            break\r\n                        case /^rt$/i.test( _curveType[_ba] ): // \"(_sx,_sy)┐(_ex,_ey)\"\r\n                            ctx_relations.moveTo( _sx, _sy )\r\n                            if ( Math.abs( _ex - _sx ) > _radius ) {\r\n                                ctx_relations.lineTo( _ex - _radius, _sy ) // \"─\"\r\n                            }\r\n                            if ( Math.abs( _ey - _sy ) > _radius ) {\r\n                                ctx_relations.quadraticCurveTo( _ex, _sy, _ex, _sy + _radius ) // \"┐\"\r\n                                ctx_relations.lineTo( _ex, _ey )\r\n                            } else {\r\n                                ctx_relations.quadraticCurveTo( _ex, _sy, _ex, _ey ) // \"┐\"\r\n                            }\r\n                            break\r\n                        case /^rb$/i.test( _curveType[_ba] ): // \"(_sx,_sy)┘(_ex,_ey)\"\r\n                            ctx_relations.moveTo( _sx, _sy )\r\n                            if ( Math.abs( _ex - _sx ) > _radius ) {\r\n                                ctx_relations.lineTo( _ex - _radius, _sy ) // \"─\"\r\n                            }\r\n                            if ( Math.abs( _sy - _ey ) > _radius ) {\r\n                                ctx_relations.quadraticCurveTo( _ex, _sy, _ex, _sy - _radius ) // \"┘\"\r\n                                ctx_relations.lineTo( _ex, _ey )\r\n                            } else {\r\n                                ctx_relations.quadraticCurveTo( _ex, _sy, _ex, _ey ) // \"┘\"\r\n                            }\r\n                            break\r\n                        case /^lt\\+lb$/i.test( _curveType[_ba] ): // \"⊂＿\"\r\n                        case /^lb\\+lt$/i.test( _curveType[_ba] ): // \"⊂￣\"\r\n                            ctx_relations.moveTo( _sx, _sy )\r\n                            //ctx_relations.lineTo( _sx - _subRadius, _sy ) // \"─\"\r\n                            ctx_relations.lineTo( _sx - _radius, _sy ) // \"─\"\r\n                            //ctx_relations.bezierCurveTo( _sx - _subRadius - _radius, _sy, _sx - _subRadius - _radius, _ey, _sx - _subRadius, _ey ) // \"⊂\"\r\n                            ctx_relations.bezierCurveTo( _sx - _radius * 2, _sy, _sx - _radius * 2, _ey, _sx - _radius, _ey ) // \"⊂\"\r\n                            ctx_relations.lineTo( _ex, _ey ) // \"─\"\r\n                            break\r\n                        case /^rt\\+rb$/i.test( _curveType[_ba] ): // \"＿⊃\"\r\n                        case /^rb\\+rt$/i.test( _curveType[_ba] ): // \"￣⊃\"\r\n                            ctx_relations.moveTo( _sx, _sy )\r\n                            //ctx_relations.lineTo( _sx + _subRadius, _sy ) // \"─\"\r\n                            ctx_relations.lineTo( _sx + _radius, _sy ) // \"─\"\r\n                            //ctx_relations.bezierCurveTo( _sx + _subRadius + _radius, _sy, _sx + _subRadius + _radius, _ey, _sx + _subRadius, _ey ) // \"⊃\"\r\n                            ctx_relations.bezierCurveTo( _sx + _radius * 2, _sy, _sx + _radius * 2, _ey, _sx + _radius, _ey ) // \"⊃\"\r\n                            ctx_relations.lineTo( _ex, _ey ) // \"─\"\r\n                            break\r\n                    }\r\n                } else {\r\n                    ctx_relations.moveTo( _sx, _sy )\r\n                    ctx_relations.lineTo( _ex, _ey )\r\n                }\r\n                //ctx_relations.closePath()\r\n                ctx_relations.stroke()\r\n            }\r\n        \r\n        ctx_relations.clearRect( 0, 0, _canvas[0].width, _canvas[0].height )\r\n//console.log( '!_drawRelationLine:', _props, events, _canvas )\r\n        events.forEach( ( evt ) => {\r\n            let _rel = evt.relation,\r\n                _sx, _sy, _ex, _ey, \r\n                _targetId, _targetEvent\r\n            \r\n            if ( _rel.hasOwnProperty( 'before' ) ) {\r\n                // before: targetEvent[ _ex, _ey ] <---- selfEvent[ _sx, _sy ]\r\n                // (:> before: 自分を起点（ _sx, _sy ）として左方向の連結点（ _ex, _ey ）へ向かう描画方式\r\n                _sx = _rel.x\r\n                _sy = _rel.y\r\n                _targetId = parseInt( _rel.before, 10 )\r\n                if ( _targetId < 0 ) {\r\n                    _ex = 0\r\n                    _ey = _sy\r\n                } else {\r\n                    _targetEvent = events.find( ( _evt ) => parseInt( _evt.eventId, 10 ) == _targetId )\r\n                    if ( ! this.is_empty( _targetEvent ) && _targetEvent.relation ) {\r\n                        _ex = _targetEvent.relation.x < 0 ? 0 : _targetEvent.relation.x\r\n                        _ey = _targetEvent.relation.y\r\n                    }\r\n                }\r\n                if ( _sx >= 0 && _sy >= 0 && _ex >= 0 && _ey >= 0 ) {\r\n                    drawLine( _sx, _sy, _ex, _ey, evt, 'before' )\r\n                }\r\n            }\r\n            if ( _rel.hasOwnProperty( 'after' ) ) {\r\n                // after: selfEvent[ _sx, _sy ] ----> targetEvent[ _ex, _ey ]\r\n                // (:> after: 自分を起点（ _sx, _sy ）として右方向の連結点（ _ex, _ey ）へ向かう描画方式\r\n                _sx = _rel.x\r\n                _sy = _rel.y\r\n                _targetId = parseInt( _rel.after, 10 )\r\n                if ( _targetId < 0 ) {\r\n                    _ex = _props.fullwidth\r\n                    _ey = _sy\r\n                } else {\r\n                    _targetEvent = events.find( ( _evt ) => parseInt( _evt.eventId, 10 ) == _targetId )\r\n                    if ( ! this.is_empty( _targetEvent ) && _targetEvent.relation ) {\r\n                        _ex = _targetEvent.relation.x > _props.fullwidth ? _props.fullwidth : _targetEvent.relation.x\r\n                        _ey = _targetEvent.relation.y\r\n                    }\r\n                }\r\n                if ( _sx >= 0 && _sy >= 0 && _ex >= 0 && _ey >= 0 ) {\r\n                    drawLine( _sx, _sy, _ex, _ey, evt, 'after' )\r\n                }\r\n            }\r\n            \r\n        })\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Retrieve the mapping data that placed current events\r\n     * @private\r\n     * @return {number[]}\r\n     */\r\n    _mapPlacedEvents() {\r\n        let _that      = this,\r\n            _tl_events = $(this._element).find( Selector.TIMELINE_EVENTS ).children(),\r\n            _cache     = this._loadToCache(),\r\n            _events    = []\r\n        \r\n        if ( ! this._isCached || this.is_empty( _cache ) ) {\r\n            return _events\r\n        }\r\n        \r\n        _tl_events.each(function() {\r\n            let _uid  = $(this).data( 'uid' ),\r\n                _data = null\r\n            \r\n            if ( _cache ) {\r\n                _data = _cache.find( ( _evt ) => _evt.uid === _uid ) || null\r\n            } else {\r\n                _data = $(this).data()\r\n            }\r\n            \r\n            if ( ! _that.is_empty( _data ) ) {\r\n                _events.push( _data )\r\n            }\r\n        })\r\n//console.log( '!_mapPlacedEvents:', _events )\r\n        \r\n        return _events\r\n    }\r\n    \r\n    /**\r\n     * Event when focus or blur\r\n     * @private\r\n     * @param {Object} event - \r\n     */\r\n    _activeEvent( event ) {\r\n// console.log( '!_activeEvent:', event )\r\n        let _elem = event.target\r\n        \r\n        if ( 'focusin' === event.type ) {\r\n            $( Selector.TIMELINE_EVENT_NODE ).removeClass( 'active' )\r\n            $(_elem).addClass( 'active' )\r\n        } else\r\n        if ( 'focusout' === event.type ) {\r\n            $(_elem).removeClass( 'active' )\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Event when hover on the pointer type event\r\n     * @private\r\n     * @param {Object} event - \r\n     */\r\n    _hoverPointer( event ) {\r\n        let _props = this._instanceProps,\r\n            _elem  = event.target,\r\n            _base  = {\r\n                left  : $(_elem).data( 'baseLeft' ),\r\n                top   : $(_elem).data( 'baseTop' ),\r\n                width : $(_elem).data( 'baseSize' )\r\n            },\r\n            _x     = _base.left,\r\n            _y     = _base.top,\r\n            _w     = _base.width,\r\n            _z     = 5\r\n        \r\n//console.log( '!_hoverPointer:', _props )\r\n        if ( 'mouseenter' === event.type ) {\r\n            _w = Math.max( this.numRound( _w * 1.2, 'ceil' ), Math.min( _props.rowSize, _props.scaleSize ) )\r\n            _x = this.numRound( _x - ( ( _w - _base.width ) / 2 ), 2 )\r\n            _y = this.numRound( _y - ( ( _w - _base.width ) / 2 ), 2 )\r\n            _z = 9\r\n            $(_elem).trigger( Event.FOCUSIN_EVENT )\r\n        } else {\r\n            $(_elem).trigger( Event.FOCUSOUT_EVENT )\r\n        }\r\n        $(_elem).css( 'left', `${_x}px` ).css( 'top', `${_y}px` ).css( 'width', `${_w}px` ).css( 'height', `${_w}px` ).css( 'z-index', _z )\r\n    }\r\n    \r\n    /**\r\n     * Echo the log of plugin for debugging\r\n     * @private\r\n     * @param {string} message - \r\n     * @param {string} [throwType=\"Notice\"] - \r\n     */\r\n    _debug( message, throwType = 'Notice' ) {\r\n        if ( ! this._config.debug ) {\r\n            return\r\n        }\r\n        message = this.supplement( null, message )\r\n        if ( message ) {\r\n            let _msg = typeof $(this._element).data( DATA_KEY )[message] !== 'undefined' ? `Called method \"${message}\".` : message,\r\n                _sty = /^Called method \"/.test(_msg) ? 'font-weight:600;color:blue;' : '',\r\n                _rst = ''\r\n            \r\n            if ( window.console && window.console.log ) {\r\n                if ( throwType === 'Notice' ) {\r\n                    window.console.log( '%c%s%c', _sty, _msg, _rst )\r\n                } else {\r\n                    throw new Error( `${_msg}` )\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Public\r\n    \r\n    /**\r\n     * This method is able to call only once after completed an initializing of the plugin\r\n     * @public\r\n     * @param {?Function()} callback - Custom callback fired after calling this method\r\n     * @param {?Object} userdata - Data as object of referable in that callback\r\n     */\r\n    initialized( ...args ) {\r\n        let _message = this._isInitialized ? 'Skipped because method \"initialized\" already has been called once' : 'initialized'\r\n        this._debug( _message )\r\n        \r\n        let _elem    = this._element,\r\n            _opts    = this._config,\r\n            _args    = args[0],\r\n            callback = _args.length > 0 && typeof _args[0] === 'function' ? _args[0] : null,\r\n            userdata = _args.length > 1 ? _args.slice(1) : null\r\n        \r\n// console.log( '!initialized:', callback, userdata )\r\n        if ( callback && ! this._isInitialized ) {\r\n            this._debug( 'Fired your callback function after initializing this plugin.' )\r\n            \r\n            callback( _elem, _opts, userdata )\r\n        }\r\n        \r\n        this._isInitialized = true\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Destroy the object to which the plugin is applied\r\n     * @public\r\n     */\r\n    destroy() {\r\n        this._debug( 'destroy' )\r\n        \r\n        $.removeData( this._element, DATA_KEY )\r\n        \r\n        $(window, document, this._element).off( EVENT_KEY )\r\n        \r\n        $(this._element).remove()\r\n        \r\n        this._removeCache()\r\n        \r\n        for ( let _prop of Object.keys( this ) ) {\r\n            this[_prop] = null\r\n            delete this[_prop]\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @deprecated This method has been deprecated since version 2.0.0\r\n     */\r\n    render() {\r\n        throw new ReferenceError( 'This method named \"render\" has been deprecated since version 2.0.0' )\r\n    }\r\n    \r\n    /**\r\n     * Show hidden timeline\r\n     * @public\r\n     */\r\n    show() {\r\n        this._debug( 'show' )\r\n        \r\n        let _elem = this._element\r\n        \r\n        if ( ! this._isShown ) {\r\n            $(_elem).removeClass( ClassName.HIDE )\r\n            \r\n            this._isShown = true\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Hide shown timeline\r\n     * @public\r\n     */\r\n    hide() {\r\n        this._debug( 'hide' )\r\n        \r\n        let _elem = this._element\r\n        \r\n        if ( this._isShown ) {\r\n            $(_elem).addClass( ClassName.HIDE )\r\n            \r\n            this._isShown = false\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * @public\r\n     */\r\n    dateback() {\r\n        this._debug( 'dateback' )\r\n        \r\n    }\r\n    \r\n    /**\r\n     *\r\n     * @public\r\n     */\r\n    dateforth() {\r\n        this._debug( 'dateforth' )\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Move the display position of the timeline container to the specified position\r\n     * @public\r\n     * @param {?string} position - The preset string of position on timeline you want to align. Allowed values are \"left\", \"begin\", \"center\", \"right\", \"end\", \"latest\", \"current\", \"currently\" or number of event id\r\n     * @param {?(number|string)} duration - The duration of alignment animation. Allowed values are \"fast\", \"normal\", \"slow\" or number of milliseconds\r\n     */\r\n    alignment( ...args ) {\r\n        this._debug( 'alignment' )\r\n        \r\n        let _opts         = this._config,\r\n            _props        = this._instanceProps,\r\n            _elem         = this._element,\r\n            _tl_container = $(_elem).find( Selector.TIMELINE_CONTAINER ),\r\n            _movX         = 0,\r\n            _args         = ! this.is_empty( args ) ? args[0] : [],\r\n            position      = _args.length > 0 && typeof _args[0] === 'string' ? _args[0] : _opts.rangeAlign,\r\n            duration      = _args.length > 1 && /^(\\d{1,}|fast|normal|slow)$/i.test( _args[1] ) ? _args[1] : 0\r\n        \r\n//console.log( args, _args, position, duration )\r\n        if ( _props.fullwidth <= _elem.scrollWidth ) {\r\n            return\r\n        }\r\n        \r\n        switch ( true ) {\r\n            case /^(left|begin)$/i.test( position ):\r\n                _movX = 0\r\n                break\r\n            case /^center$/i.test( position ):\r\n                _movX = ( _tl_container[0].scrollWidth - _elem.scrollWidth ) / 2 + 1\r\n                break\r\n            case /^(right|end)$/i.test( position ):\r\n                _movX = _tl_container[0].scrollWidth - _elem.scrollWidth + 1\r\n                break\r\n            case /^latest$/i.test( position ): {\r\n                let events    = this._mapPlacedEvents().sort( this.compareValues( 'x' ) ),\r\n                    lastEvent = events[events.length - 1]\r\n                \r\n                _movX = ! this.is_empty( lastEvent ) ? lastEvent.x : 0\r\n                \r\n// console.log( events, lastEvent, _movX, _elem.scrollWidth / 2 )\r\n                // Centering\r\n                if ( _elem.scrollWidth / 2 < _movX ) {\r\n                    _movX -= Math.ceil( _elem.scrollWidth / 2 )\r\n                } else {\r\n                    _movX = 0\r\n                }\r\n                \r\n                // Focus target event\r\n                if ( ! this.is_empty( lastEvent ) ) {\r\n                    $(`${Selector.TIMELINE_EVENT_NODE}[data-uid=\"${lastEvent.uid}\"]`).trigger( Event.FOCUSIN_EVENT )\r\n                }\r\n                break\r\n            }\r\n            case /^\\d{1,}$/.test( position ): {\r\n                let events      = this._mapPlacedEvents(),\r\n                    targetEvent = {}\r\n                \r\n                if ( events.length > 0 ) {\r\n                    targetEvent = events.find( ( evt ) => evt.eventId == parseInt( position, 10 ) )\r\n                }\r\n                _movX = ! this.is_empty( targetEvent ) ? targetEvent.x : 0\r\n                \r\n                // Centering\r\n                if ( Math.ceil( _elem.scrollWidth / 2 ) < _movX ) {\r\n                    _movX -= Math.ceil( _elem.scrollWidth / 2 )\r\n                } else {\r\n                    _movX = 0\r\n                }\r\n                \r\n                // Focus target event\r\n                if ( ! this.is_empty( targetEvent ) ) {\r\n                    $(`${Selector.TIMELINE_EVENT_NODE}[data-uid=\"${targetEvent.uid}\"]`).trigger( Event.FOCUSIN_EVENT )\r\n                }\r\n                break\r\n            }\r\n            case /^current(|ly)|now$/i.test( position ):\r\n            default: {\r\n                let _now  = new Date().toString(),\r\n                    _nowX = this.numRound( this._getCoordinateX( _now ), 2 )\r\n                \r\n                if ( _nowX >= 0 ) {\r\n                    if ( _tl_container[0].scrollWidth - _elem.scrollWidth + 1 < _nowX ) {\r\n                        _movX = _tl_container[0].scrollWidth - _elem.scrollWidth + 1\r\n                    } else {\r\n                        _movX = _nowX\r\n                    }\r\n                } else {\r\n                    _movX = 0\r\n                }\r\n                break\r\n            }\r\n        }\r\n//console.log( `!alignment::${position}:`, _props.fullwidth, _props.visibleWidth, _tl_container[0].scrollWidth, _tl_container[0].scrollLeft, _movX )\r\n        if ( duration === '0' ) {\r\n            _tl_container.scrollLeft( _movX )\r\n        } else {\r\n            _tl_container.animate({ scrollLeft: _movX }, duration )\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @deprecated This method has been deprecated since version 2.0.0\r\n     */\r\n    getOptions() {\r\n        throw new ReferenceError( 'This method named \"getOptions\" has been deprecated since version 2.0.0' )\r\n    }\r\n    \r\n    /**\r\n     * Add new events to the rendered timeline object\r\n     * @public\r\n     * @param {?Function()} callback - Custom callback fired after calling this method\r\n     * @param {?Object} userdata - Data as object of referable in that callback\r\n     */\r\n    addEvent( ...args ) {\r\n        this._debug( 'addEvent' )\r\n        \r\n        let _args        = args[0],\r\n            events       = this.supplement( null, _args[0], this.validateArray ),\r\n            callback     = _args.length > 1 && typeof _args[1] === 'function' ? _args[1] : null,\r\n            userdata     = _args.length > 2 ? _args.slice(2) : null,\r\n            _cacheEvents = this._loadToCache(),\r\n            lastEventId  = 0,\r\n            add_done     = false\r\n        \r\n        if ( this.is_empty( events ) || ! this._isCompleted ) {\r\n            return\r\n        }\r\n        \r\n        if ( ! this.is_empty( _cacheEvents ) ) {\r\n            _cacheEvents.sort( this.compareValues( 'eventId' ) )\r\n            lastEventId = parseInt( _cacheEvents[_cacheEvents.length - 1].eventId, 10 )\r\n        }\r\n//console.log( '!addEvent::before:', _cacheEvents, lastEventId, callback, userdata )\r\n        \r\n        events.forEach( ( evt ) => {\r\n            let _one_event = this._registerEventData( '<div></div>', evt )\r\n            \r\n            if ( ! this.is_empty( _one_event ) ) {\r\n                _one_event.eventId = Math.max( lastEventId + 1, parseInt( _one_event.eventId, 10 ) )\r\n                _cacheEvents.push( _one_event )\r\n                lastEventId = parseInt( _one_event.eventId, 10 )\r\n                add_done = true\r\n            }\r\n        })\r\n//console.log( '!addEvent::after:', _cacheEvents, lastEventId, callback, userdata )\r\n        if ( ! add_done ) {\r\n            return\r\n        }\r\n        \r\n        this._saveToCache( _cacheEvents )\r\n        \r\n        this._placeEvent()\r\n        \r\n        if ( callback ) {\r\n            this._debug( 'Fired your callback function after replacing events.' )\r\n            \r\n            callback( this._element, this._config, userdata )\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Remove events from the currently timeline object\r\n     * @public\r\n     * @param {?Function()} callback - Custom callback fired after calling this method\r\n     * @param {?Object} userdata - Data as object of referable in that callback\r\n     */\r\n    removeEvent( ...args ) {\r\n        this._debug( 'removeEvent' )\r\n        \r\n        let _args        = args[0],\r\n            targets      = this.supplement( null, _args[0], this.validateArray ),\r\n            callback     = _args.length > 1 && typeof _args[1] === 'function' ? _args[1] : null,\r\n            userdata     = _args.length > 2 ? _args.slice(2) : null,\r\n            _cacheEvents = this._loadToCache(),\r\n            condition    = {},\r\n            remove_done  = false\r\n        \r\n        if ( this.is_empty( targets ) || ! this._isCompleted || this.is_empty( _cacheEvents ) ) {\r\n            return\r\n        }\r\n        \r\n        targets.forEach( ( cond ) => {\r\n            switch ( true ) {\r\n                case /^\\d{1,}$/.test( cond ):\r\n                    // By matching event ID\r\n                    condition.type  = 'eventId'\r\n                    condition.value = parseInt( cond, 10 )\r\n                    break\r\n                case /^(|\\d{1,}(-|\\/)\\d{1,2}(-|\\/)\\d{1,2}(|\\s\\d{1,2}:\\d{1,2}(|:\\d{1,2})))(|,\\d{1,}(-|\\/)\\d{1,2}(-|\\/)\\d{1,2}(|\\s\\d{1,2}:\\d{1,2}(|:\\d{1,2})))$/.test( cond ): {\r\n                    // By matching range of datetime\r\n                    let _tmp = cond.split(',')\r\n                    \r\n                    condition.type  = 'daterange'\r\n                    condition.value = {}\r\n                    condition.value['from'] = this.is_empty( _tmp[0] ) ? null : new Date( _tmp[0] )\r\n                    condition.value['to']   = this.is_empty( _tmp[1] ) ? null : new Date( _tmp[1] )\r\n                    break\r\n                }\r\n                default:\r\n                    // By matching regex string\r\n                    condition.type  = 'regex'\r\n                    condition.value = new RegExp( cond )\r\n                    break\r\n            }\r\n            _cacheEvents.forEach( ( evt, _idx ) => {\r\n                switch ( condition.type ) {\r\n                    case 'eventId':\r\n                        if ( parseInt( evt.eventId, 10 ) == condition.value ) {\r\n//console.log( `!removeEvent::${condition.type}:${condition.value}:`, _cacheEvents[_idx] )\r\n                            _cacheEvents.splice( _idx, 1 )\r\n                            remove_done = true\r\n                        }\r\n                        break\r\n                    case 'daterange': {\r\n//console.log( condition.value )\r\n                        let _fromX = condition.value.from ? Math.ceil( this._getCoordinateX( condition.value.from.toString() ) ) : 0,\r\n                            _toX   = condition.value.to   ? Math.floor( this._getCoordinateX( condition.value.to.toString() ) ) : _fromX\r\n                        \r\n                        if ( _fromX <= evt.x && evt.x <= _toX ) {\r\n//console.log( `!removeEvent::${condition.type}:${condition.value.from} ~ ${condition.value.to}:`, _fromX, _toX, evt.x )\r\n                            _cacheEvents.splice( _idx, 1 )\r\n                            remove_done = true\r\n                        }\r\n                        break\r\n                    }\r\n                    case 'regex':\r\n//console.log( `!removeEvent::${condition.type}:${condition.value}:`, JSON.stringify( evt ) )\r\n                        if ( condition.value.test( JSON.stringify( evt ) ) ) {\r\n                            _cacheEvents.splice( _idx, 1 )\r\n                            remove_done = true\r\n                        }\r\n                        break\r\n                }\r\n            })\r\n        })\r\n//console.log( `!removeEvent::after:`, _cacheEvents )\r\n        if ( ! remove_done ) {\r\n            return\r\n        }\r\n        \r\n        this._saveToCache( _cacheEvents )\r\n        \r\n        this._placeEvent()\r\n        \r\n        if ( callback ) {\r\n            this._debug( 'Fired your callback function after placing additional events.' )\r\n            \r\n            callback( this._element, this._config, userdata )\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Update events on the currently timeline object\r\n     * @public\r\n     * @param {?Function()} callback - Custom callback fired after calling this method\r\n     * @param {?Object} userdata - Data as object of referable in that callback\r\n     */\r\n    updateEvent( ...args ) {\r\n        this._debug( 'updateEvent' )\r\n        \r\n        let _args        = args[0],\r\n            events       = this.supplement( null, _args[0], this.validateArray ),\r\n            callback     = _args.length > 1 && typeof _args[1] === 'function' ? _args[1] : null,\r\n            userdata     = _args.length > 2 ? _args.slice(2) : null,\r\n            _cacheEvents = this._loadToCache(),\r\n            update_done  = false\r\n        \r\n        if ( this.is_empty( events ) || ! this._isCompleted || this.is_empty( _cacheEvents ) ) {\r\n            return\r\n        }\r\n        \r\n        events.forEach( ( evt ) => {\r\n            let _upc_event = this._registerEventData( '<div></div>', evt ), // Update Candidate\r\n                _old_index = null,\r\n                _old_event = _cacheEvents.find( ( _evt, _idx ) => {\r\n                    _old_index = _idx\r\n                    return _evt.eventId == _upc_event.eventId\r\n                }),\r\n                _new_event = {}\r\n            \r\n            if ( ! this.is_empty( _old_event ) && ! this.is_empty( _upc_event ) ) {\r\n                if ( _upc_event.hasOwnProperty( 'uid' ) ) {\r\n                    delete _upc_event.uid\r\n                }\r\n                _new_event = Object.assign( _new_event, _old_event, _upc_event )\r\n//console.log( _new_event, _old_event, _upc_event, _old_index )\r\n                _cacheEvents[_old_index] = _new_event\r\n                update_done = true\r\n            }\r\n        })\r\n        \r\n        if ( ! update_done ) {\r\n            return\r\n        }\r\n        \r\n        this._saveToCache( _cacheEvents )\r\n        \r\n        this._placeEvent()\r\n        \r\n        if ( callback ) {\r\n            this._debug( 'Fired your callback function after updating events.' )\r\n            \r\n            callback( this._element, this._config, userdata )\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Reload the timeline with overridable any options\r\n     * @public\r\n     * @param {?Function()} callback - Custom callback fired after calling this method\r\n     * @param {?Object} userdata - Data as object of referable in that callback\r\n     */\r\n    reload( ...args ) {\r\n        this._debug( 'reload' )\r\n        \r\n        let _args        = args[0],\r\n            _upc_options = this.supplement( null, _args[0], this.validateObject ),\r\n            callback     = _args.length > 1 && typeof _args[1] === 'function' ? _args[1] : null,\r\n            userdata     = _args.length > 2 ? _args.slice(2) : null,\r\n            _elem        = this._element,\r\n            $default_evt = $(_elem).find( Selector.DEFAULT_EVENTS ),\r\n            _old_options = this._config,\r\n            _new_options = {}\r\n        \r\n        if ( ! this.is_empty( _upc_options ) ) {\r\n            // _new_options = Object.assign( _new_options, _old_options, _upc_options )\r\n            _new_options = this.mergeDeep( _old_options, _upc_options )\r\n            this._config = _new_options\r\n        }\r\n        \r\n        this._isInitialized = false\r\n        this._isCached      = false\r\n        this._isCompleted   = false\r\n        this._instanceProps = {}\r\n        \r\n        $(_elem).empty().append( $default_evt )\r\n        \r\n        this._calcVars()\r\n        \r\n        if ( ! this._verifyMaxRenderableRange() ) {\r\n            throw new RangeError( `Timeline display period exceeds maximum renderable range.` )\r\n        }\r\n        \r\n        if ( ! this._isInitialized ) {\r\n            this._renderView()\r\n            this._isInitialized = true\r\n        }\r\n        \r\n        if ( this._config.reloadCacheKeep ) {\r\n            let _cacheEvents = this._loadToCache(),\r\n                _renewEvents = []\r\n            \r\n            if ( ! this.is_empty( _cacheEvents ) ) {\r\n                _cacheEvents.forEach( ( evt ) => {\r\n                    delete evt.uid\r\n                    delete evt.x\r\n                    delete evt.Y\r\n                    delete evt.width\r\n                    delete evt.height\r\n                    delete evt.relation.x\r\n                    delete evt.relation.y\r\n                    _renewEvents.push( this._registerEventData( '<div></div>', evt ) )\r\n                })\r\n            }\r\n            this._isCached = this._saveToCache( _renewEvents )\r\n        } else {\r\n            this._loadEvent()\r\n        }\r\n        \r\n        this._placeEvent()\r\n        \r\n        this._isCompleted = true\r\n        \r\n        if ( callback ) {\r\n            this._debug( 'Fired your callback function after reloading timeline.' )\r\n            \r\n            callback( this._element, this._config, userdata )\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * The method that fires when an event on the timeline is clicked\r\n     * Note: You can hook the custom processing with the callback specified in the event parameter\r\n     * @public\r\n     * @param {Object} event - \r\n     */\r\n    openEvent( event ) {\r\n        this._debug( 'openEvent' )\r\n        \r\n        let _that     = this,\r\n            _self     = event.target,\r\n            $viewer   = $(document).find( Selector.EVENT_VIEW ),\r\n            //eventId   = parseInt( $(_self).attr( 'id' ).replace( 'evt-', '' ), 10 ),\r\n            uid       = $(_self).data( 'uid' ),\r\n            //meta      = this.supplement( null, $(_self).data( 'meta' ) ),\r\n            callback  = this.supplement( null, $(_self).data( 'callback' ) )\r\n//console.log( '!openEvent:', _self, $viewer, eventId, uid, meta, callback )\r\n        \r\n        if ( $viewer.length > 0 ) {\r\n            $viewer.each(function() {\r\n                let _cacheEvents = _that._loadToCache(),\r\n                    _eventData   = _cacheEvents.find( ( event ) => event.uid === uid ),\r\n                    _label       = $('<div></div>', { class: ClassName.VIEWER_EVENT_TITLE }),\r\n                    _content     = $('<div></div>', { class: ClassName.VIEWER_EVENT_CONTENT }),\r\n                    _meta        = $('<div></div>', { class: ClassName.VIEWER_EVENT_META }),\r\n                    _image       = $('<div></div>', { class: ClassName.VIEWER_EVENT_IMAGE_WRAPPER })\r\n                \r\n//console.log( '!openEvent:', $(this), $(_self).html(), _eventData.label )\r\n                \r\n                $(this).empty() // Initialize Viewer\r\n                if ( ! _that.is_empty( _eventData.image ) ) {\r\n                    _image.append( `<img src=\"${_eventData.image}\" class=\"${ClassName.VIEWER_EVENT_IMAGE}\" />` )\r\n                    $(this).append( _image )\r\n                }\r\n                if ( ! _that.is_empty( _eventData.label ) ) {\r\n                    _label.html( _eventData.label )\r\n                    $(this).append( _label )\r\n                }\r\n                if ( ! _that.is_empty( _eventData.content ) ) {\r\n                    _content.html( _eventData.content )\r\n                    $(this).append( _content )\r\n                }\r\n                if ( ! _that.is_empty( _eventData.rangeMeta ) ) {\r\n                    _meta.html( _eventData.rangeMeta )\r\n                    $(this).append( _meta )\r\n                }\r\n                \r\n            })\r\n        }\r\n        \r\n        if ( callback ) {\r\n            this._debug( `The callback \"${callback}\" was called by the \"openEvent\" method.` )\r\n            \r\n            try {\r\n                Function.call( null, `return ${callback}` )()\r\n            } catch ( e ) {\r\n                throw new TypeError( e )\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Be zoomed in scale of the timeline that fires when any scales on the ruler is double clicked\r\n     * @public\r\n     * @param {Object} event - \r\n     */\r\n    zoomScale( event ) {\r\n        this._debug( 'zoomScale' )\r\n        \r\n        let _elem        = event.target,\r\n            ruler_item   = $(_elem).data( 'ruler-item' ),\r\n            scaleMap     = {\r\n                millennium : { years: 1000, lower: 'century', minGrids: 10 },\r\n                century    : { years: 100,  lower: 'decade',  minGrids: 10 },\r\n                decade     : { years: 10,   lower: 'lustrum', minGrids: 2  },\r\n                lustrum    : { years: 5,    lower: 'year',    minGrids: 5  },\r\n                year       : { years: 1,    lower: 'month',   minGrids: 12 },\r\n                month      : {              lower: 'day',     minGrids: 28 },\r\n                week       : {              lower: 'day',     minGrids: 7  },\r\n                day        : {              lower: 'hour',    minGrids: 24 },\r\n                weekday    : {              lower: 'hour',    minGrids: 24 },\r\n                hour       : {              lower: 'minute',  minGrids: 60 },\r\n                minute     : {              lower: 'second',  minGrids: 60 },\r\n                second     : {              lower: null,      minGrids: 60 }\r\n            },\r\n            getZoomScale = ( ruler_item ) => {\r\n                let [ scale, date_seed ] = ruler_item.split('-'),\r\n                    min_grids            = scaleMap[scale].minGrids,\r\n                    begin_date, end_date, base_year, base_month, week_num, base_day, is_remapping, _tmpDate\r\n                \r\n                switch ( true ) {\r\n                    case /^millennium$/i.test( scale ):\r\n                    case /^century$/i.test( scale ):\r\n                    case /^decade$/i.test( scale ):\r\n                    case /^lustrum$/i.test( scale ):\r\n                        begin_date = `${( ( date_seed - 1 ) * scaleMap[scale].years ) + 1}/1/1`\r\n                        _tmpDate   = new Date( begin_date, 0, 1 ).setFullYear( date_seed * scaleMap[scale].years + 1 )\r\n                        _tmpDate   = new Date( _tmpDate - 1 )\r\n                        end_date   = `${_tmpDate.getFullYear()}/${_tmpDate.getMonth()+1}/${_tmpDate.getDate()} 23:59:59`\r\n                        break\r\n                    case /^year$/i.test( scale ):\r\n                        begin_date = `${date_seed}/1/1`\r\n                        _tmpDate   = new Date( date_seed, 0, 1 ).setFullYear( parseInt( date_seed, 10 ) + 1 )\r\n                        _tmpDate   = new Date( _tmpDate - 1 )\r\n                        end_date   = `${_tmpDate.getFullYear()}/${_tmpDate.getMonth()+1}/${_tmpDate.getDate()} 23:59:59`\r\n                        break\r\n                    case /^month$/i.test( scale ):\r\n                        [ base_year, base_month ] = date_seed.split('/')\r\n                        is_remapping = parseInt( base_year, 10 ) < 100\r\n                        begin_date = new Date( base_year, parseInt( base_month, 10 ) - 1, 1 )\r\n                        if ( begin_date.getMonth() == 11 ) {\r\n                            _tmpDate = new Date( begin_date.getFullYear() + 1, 0, 1 ).setFullYear( parseInt( base_year, 10 ) + 1 )\r\n                        } else {\r\n                            _tmpDate = new Date( begin_date.getFullYear(), begin_date.getMonth() + 1, 1 ).setFullYear( parseInt( base_year, 10 ) )\r\n                        }\r\n                        begin_date = begin_date.toString()\r\n                        end_date   = new Date( _tmpDate - 1 ).toString()\r\n                        break\r\n                    case /^week$/i.test( scale ):\r\n                        [ base_year, week_num ] = date_seed.split(',')\r\n                        is_remapping = parseInt( base_year, 10 ) < 100\r\n                        _tmpDate = new Date( base_year, 0, 1 )\r\n                        if ( is_remapping ) {\r\n                            _tmpDate.setFullYear( base_year )\r\n                        }\r\n                        begin_date = new Date( _tmpDate.getTime() + ( week_num * 7 * 24 * 60 * 60 * 1000 ) ).toString()\r\n                        end_date   = new Date( new Date( begin_date ).getTime() + ( 7 * 24 * 60 * 60 * 1000 ) - 1 ).toString()\r\n                        break\r\n                    case /^day$/i.test( scale ):\r\n                    case /^weekday$/i.test( scale ):\r\n                        if ( 'weekday' === scale ) {\r\n                            let _tmp = date_seed.split(',')\r\n                            date_seed = _tmp[0]\r\n                        }\r\n                        [ base_year, base_month, base_day ] = date_seed.split('/')\r\n                        is_remapping = parseInt( base_year, 10 ) < 100\r\n                        _tmpDate = new Date( base_year, parseInt( base_month, 10 ) - 1, base_day )\r\n                        begin_date = _tmpDate.toString()\r\n                        end_date   = new Date( _tmpDate.getTime() + ( 24 * 60 * 60 * 1000 ) - 1 ).toString()\r\n//console.log( date_seed, base_year, week_num, begin_date, _tmpDate, new Date( _tmpDate ), new Date( _tmpDate - 1 ) )\r\n                        break\r\n                    case /^hour$/i.test( scale ):\r\n                    case /^minute$/i.test( scale ):\r\n                        begin_date = `${date_seed}:00`\r\n                        end_date   = `${date_seed}:59`\r\n                        break\r\n                    default:\r\n                        begin_date = null\r\n                        end_date   = null\r\n                        break\r\n                }\r\n                \r\n                scale = scaleMap.hasOwnProperty( scale ) ? scaleMap[scale].lower : scale\r\n                return [ scale, begin_date, end_date, min_grids ]\r\n            },\r\n            [ to_scale, begin_date, end_date, min_grids ] = getZoomScale( ruler_item ),\r\n            zoom_options = {\r\n                startDatetime : begin_date,\r\n                endDatetime   : end_date,\r\n                scale         : to_scale,\r\n            }\r\n        \r\n        if ( this.is_empty( zoom_options.scale ) ) {\r\n            return\r\n        }\r\n        if ( this._config.wrapScale ) {\r\n            let _wrap = Math.ceil( ( $(this._element).find(Selector.TIMELINE_CONTAINER).width() - $(this._element).find(Selector.TIMELINE_SIDEBAR).width() ) / min_grids ),\r\n                _originMinGridSize\r\n            \r\n            if ( ! this._config.hasOwnProperty( 'originMinGridSize' ) ) {\r\n                // Keep an original minGridSize as cache\r\n                this._config.originMinGridSize = this._config.minGridSize\r\n            }\r\n            _originMinGridSize = this._config.originMinGridSize\r\n            zoom_options.minGridSize = Math.max( _wrap, _originMinGridSize )\r\n        }\r\n// console.log( ruler_item, zoom_options, this._config.wrapScale, this._config.minGridSize )\r\n        \r\n        this.reload( [zoom_options] )\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Show the loader\r\n     * @public\r\n     */\r\n    showLoader() {\r\n        this._debug( 'showLoader' )\r\n        \r\n        let _elem      = this._element,\r\n            _opts      = this._config,\r\n            _container = $(_elem).find( Selector.TIMELINE_CONTAINER ),\r\n            width      = _container.length > 0 ? _container.width() : $(_elem).width(),\r\n            height     = ( _container.length > 0 ? _container.height() : $(_elem).height() ) || 120,\r\n            _loader    = $('<div></div>', { id: 'jqtl-loader', style: `width:${width}px;height:${height}px;` })\r\n        \r\n//console.log( '!showLoader:', width, height, _container.length )\r\n        if ( _opts.loader === false ) {\r\n            return\r\n        }\r\n        \r\n        if ( $(_opts.loader).length == 0 ) {\r\n            let _loading_text = LOADING_MESSAGE.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\s\\S]|^$/g).filter( Boolean )\r\n            \r\n            _loading_text.forEach( ( str, idx ) => {\r\n                let _fountain_text = $('<div></div>', { id: `jqtl-loading_${( idx + 1 )}`, class: ClassName.LOADER_ITEM }).text( str )\r\n                _loader.append( _fountain_text )\r\n            })\r\n        } else {\r\n            let _custom_loader = $(_opts.loader).clone().prop( 'hidden', false ).css( 'display', 'block' )\r\n            _loader.append( _custom_loader )\r\n        }\r\n        \r\n        if ( $(_elem).find( Selector.LOADER ).length == 0 ) {\r\n            if ( _container.length > 0 ) {\r\n                _container.append( _loader )\r\n            } else {\r\n                $(_elem).css( 'position', 'relative' ).css( 'min-height', `${height}px` ).append( _loader )\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Hide the loader\r\n     * @public\r\n     */\r\n    hideLoader() {\r\n        this._debug( 'hideLoader' )\r\n        \r\n        $(this._element).find( Selector.LOADER ).remove()\r\n    }\r\n    \r\n    \r\n    /* ----------------------------------------------------------------------------------------------------------------\r\n     * Utility Api\r\n     * ----------------------------------------------------------------------------------------------------------------\r\n     */\r\n    \r\n    /**\r\n     * Determine empty that like PHP\r\n     * @param {!(number|string|Object|number[]|boolean)} value - Variable you want to check\r\n     * @return {boolean}\r\n     */\r\n    is_empty( value ) {\r\n        if ( value == null ) {\r\n            // typeof null -> object : for hack a bug of ECMAScript\r\n            // Refer: https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/typeof\r\n            return true\r\n        }\r\n        switch ( typeof value ) {\r\n            case 'object':\r\n                if ( Array.isArray( value ) ) {\r\n                    // When object is array:\r\n                    return ( value.length === 0 )\r\n                } else {\r\n                    // When object is not array:\r\n                    if ( Object.keys( value ).length > 0 || Object.getOwnPropertySymbols( value ).length > 0 ) {\r\n                        return false\r\n                    } else\r\n                    if ( value.valueOf().length !== undefined ) {\r\n                        return ( value.valueOf().length === 0 )\r\n                    } else\r\n                    if ( typeof value.valueOf() !== 'object' ) {\r\n                        return this.is_empty( value.valueOf() )\r\n                    } else {\r\n                        return true\r\n                    }\r\n                }\r\n            case 'string':\r\n                return ( value === '' )\r\n            case 'number':\r\n                return ( value == 0 )\r\n            case 'boolean':\r\n                return ! value\r\n            case 'undefined':\r\n            case 'null':\r\n                return true\r\n            case 'symbol': // Since ECMAScript6\r\n            case 'function':\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Determine whether variable is an Object\r\n     * @param {!(number|string|Object|boolean)} item - Variable you want to check\r\n     * @return {boolean}\r\n     */\r\n    is_Object( item ) {\r\n        return (item && typeof item === 'object' && ! Array.isArray( item ))\r\n    }\r\n    \r\n    /**\r\n     * Merge two objects deeply as polyfill for instead \"$.extend(true,target,source)\"\r\n     * @param {!Object} target - \r\n     * @param {!Object} source - \r\n     * @return {Object}\r\n     */\r\n    mergeDeep( target, source ) {\r\n        let output = Object.assign( {}, target )\r\n        \r\n        if ( this.is_Object( target ) && this.is_Object( source ) ) {\r\n            for ( const key of Object.keys( source ) ) {\r\n                if ( this.is_Object( source[key] ) ) {\r\n                    if ( ! ( key in target ) ) {\r\n                        Object.assign( output, { [key]: source[key] } )\r\n                    } else {\r\n                        output[key] = this.mergeDeep( target[key], source[key] )\r\n                    }\r\n                } else {\r\n                    Object.assign( output, { [key]: source[key] } )\r\n                }\r\n            }\r\n        }\r\n        return output\r\n    }\r\n    \r\n    /**\r\n     * Determine whether the object is iterable\r\n     * @param {!Object} obj - \r\n     * @return {boolean}\r\n     */\r\n    is_iterable( obj ) {\r\n        return obj && typeof obj[Symbol.iterator] === 'function'\r\n    }\r\n    \r\n    /**\r\n     * Add an @@iterator method to non-iterable object\r\n     * @param {!Object} obj - \r\n     * @return {Object}\r\n     */\r\n    toIterableObject( obj ) {\r\n        if ( this.is_iterable( obj ) ) {\r\n            return obj\r\n        }\r\n        \r\n        obj[Symbol.iterator] = () => {\r\n            let index = 0\r\n            \r\n            return {\r\n                next() {\r\n                    if ( obj.length <= index ) {\r\n                        return { done: true }\r\n                    } else {\r\n                        return { value: obj[index++] }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        return obj\r\n    }\r\n    \r\n    /**\r\n     * Await until next process at specific millisec\r\n     * @param {number} [msec=1] - Millisecond\r\n     */\r\n    sleep( msec = 1 ) {\r\n        return new Promise( ( resolve ) => {\r\n            setTimeout( resolve, msec )\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Supplemental method for validating arguments in local scope\r\n     * @param {!(number|string|Object|boolean)} default_value - \r\n     * @param {?(number|string|Object|boolean)} opt_arg - \r\n     * @param {?(number|string|Object|boolean)} opt_callback - function or string of function to call\r\n     * @return {number|string|Object|boolean}\r\n     */\r\n    supplement( default_value, opt_arg, opt_callback ) {\r\n        if ( opt_arg === undefined ) {\r\n            return default_value\r\n        }\r\n        if ( opt_callback === undefined ) {\r\n            return opt_arg\r\n        }\r\n        return opt_callback( default_value, opt_arg )\r\n    }\r\n    \r\n    /**\r\n     * Generate the pluggable unique id\r\n     * @param {number} [digit=1000] - \r\n     * @return {string}\r\n     */\r\n    generateUniqueID( digit = 1000 ) {\r\n        return new Date().getTime().toString(16) + Math.floor( digit * Math.random() ).toString(16)\r\n    }\r\n    \r\n    /**\r\n     * Round a number with specific digit\r\n     * @param {!number} number - \r\n     * @param {?number} digit - Defaults to 0\r\n     * @param {string} [round_type=\"round\"] - \r\n     * @return {number}\r\n     */\r\n    numRound( number, digit, round_type = 'round' ) {\r\n        digit  = this.supplement( 0, digit, this.validateNumeric )\r\n        let _pow = Math.pow( 10, digit )\r\n        \r\n       switch ( true ) {\r\n            case /^ceil$/i.test( round_type ):\r\n                return Math.ceil( number * _pow ) / _pow\r\n            case /^floor$/i.test( round_type ):\r\n                return Math.floor( number * _pow ) / _pow\r\n            case /^round$/i.test( round_type ):\r\n            default:\r\n                return Math.round( number * _pow ) / _pow\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Convert hex of color code to rgba\r\n     * @param {!string} hex - \r\n     * @param {number} [alpha=1] - \r\n     * @return {string}\r\n     */\r\n    hexToRgbA( hex, alpha = 1 ) {\r\n        let _c\r\n        \r\n        if ( /^#([A-Fa-f0-9]{3}){1,2}$/.test( hex ) ) {\r\n            _c = hex.substring(1).split('')\r\n            if ( _c.length == 3 ) {\r\n                _c= [ _c[0], _c[0], _c[1], _c[1], _c[2], _c[2] ]\r\n            }\r\n            _c = `0x${_c.join('')}`\r\n            return `rgba(${[ (_c >> 16) & 255, (_c >> 8) & 255, _c & 255 ].join(',')},${alpha})`\r\n        }\r\n        // throw new Error( 'Bad Hex' )\r\n        return hex\r\n    }\r\n    \r\n    /**\r\n     * Get the correct datetime with remapping to that if the year is 0 - 99\r\n     * @param {!string} datetime_str - \r\n     * @return {?Object} - Date Object, or null if failed\r\n     */\r\n    getCorrectDatetime( datetime_str ) {\r\n        let normalizeDate = ( dateString ) => {\r\n                // For Safari, IE\r\n                let _d = dateString.replace(/-/g, '/')\r\n                return /^\\d{1,4}\\/\\d{1,2}$/.test( _d ) ? `${_d}/1` : _d\r\n            },\r\n            getDateObject = ( datetime_str ) => {\r\n                let _chk_str = normalizeDate( datetime_str ),\r\n                    _ymd, _his, _parts, _date\r\n                \r\n                switch ( true ) {\r\n                    case /^\\d{1,2}(|\\/\\d{1,2}(|\\/\\d{1,2}))(| \\d{1,2}(|:\\d{1,2}(|:\\d{1,2})))$/i.test( _chk_str ): {\r\n                        [ _ymd, _his ] = _chk_str.split(' ')\r\n                        _parts = _ymd.split('/')\r\n                        if ( _parts[1] ) {\r\n                            _parts[1] = parseInt( _parts[1], 10 ) - 1 // to month index\r\n                        }\r\n                        if ( _his ) {\r\n                            _parts.push( ..._his.split(':') )\r\n                        }\r\n                        _date = new Date( new Date( ..._parts ).setFullYear( parseInt( _parts[0], 10 ) ) )\r\n                        break\r\n                    }\r\n                    case /^\\d+$/.test( _chk_str ):\r\n                        _date = new Date( 1, 0, 1 ).setFullYear( parseInt( _chk_str, 10 ) )\r\n                        break\r\n                    default:\r\n                        _date = new Date( _chk_str.toString() )\r\n                        break\r\n                } \r\n                return _date\r\n            },\r\n            _checkDate = getDateObject( datetime_str )\r\n        \r\n        if ( isNaN( _checkDate ) || this.is_empty( _checkDate ) ) {\r\n            console.warn( `\"${datetime_str}\" Cannot parse date because invalid format.` )\r\n            return null\r\n        }\r\n        /*\r\n        let _tempDate = new Date( normalizeDate( datetime_str ) ),\r\n            _chk_date = datetime_str.split( /-|\\// )\r\n        \r\n        if ( parseInt( _chk_date[0], 10 ) < 100 ) {\r\n            // Remapping if year is 0-99\r\n            _tempDate.setFullYear( parseInt( _chk_date[0], 10 ) )\r\n        }\r\n        \r\n        return _tempDate\r\n        */\r\n        if ( typeof _checkDate !== 'object' ) {\r\n            _checkDate = new Date( _checkDate )\r\n        }\r\n//console.log( '!getCorrectDatetime::input:', datetime_str, '::output:', _checkDate, typeof _checkDate )\r\n        return _checkDate\r\n    }\r\n    \r\n    /**\r\n     * Method to get week number as extension of Date object\r\n     * @param {!string} date_str - \r\n     * @return {number}\r\n     */\r\n    getWeek( date_str ) {\r\n        let targetDate, _str, _onejan,\r\n            _millisecInDay = 24 * 60 * 60 * 1000\r\n        \r\n        if ( /^\\d{1,4}(|\\/\\d{1,2}(|\\/\\d{1,2}))$/.test( date_str ) ) {\r\n            _str = date_str.split('/')\r\n            if ( ! this.is_empty( _str[1] ) ) {\r\n                _str[1] = parseInt( _str[1], 10 ) - 1 // To month index\r\n            }\r\n//console.log( '!getWeek:', _str )\r\n            targetDate = new Date( ..._str )\r\n        } else {\r\n            targetDate = new Date( date_str )\r\n        }\r\n        _onejan = new Date( targetDate.getFullYear(), 0, 1 )\r\n        return Math.ceil( ( ( ( targetDate - _onejan ) / _millisecInDay ) + _onejan.getDay() + 1 ) / 7 )\r\n    }\r\n    \r\n    /**\r\n     * Retrieve one higher scale\r\n     * @param {!string} scale - \r\n     * @return {string} - String of higher scale\r\n     */\r\n    getHigherScale( scale ) {\r\n        let higher_scale = scale\r\n        \r\n        switch ( true ) {\r\n            case /^millisec(|ond)s?$/i.test( scale ):\r\n                higher_scale = 'second'\r\n                break\r\n            case /^seconds?$/i.test( scale ):\r\n                higher_scale = 'minute'\r\n                break\r\n            case /^minutes?$/i.test( scale ):\r\n                higher_scale = 'hour'\r\n                break\r\n            case /^quarter-?(|hour)$/i.test( scale ):\r\n            case /^half-?(|hour)$/i.test( scale ):\r\n            case /^hours?$/i.test( scale ):\r\n                higher_scale = 'day'\r\n                break\r\n            case /^days?$/i.test( scale ):\r\n            case /^weeks?$/i.test( scale ):\r\n                higher_scale = 'month'\r\n                break\r\n            case /^months?$/i.test( scale ):\r\n                higher_scale = 'year'\r\n                break\r\n            case /^years?$/i.test( scale ):\r\n                higher_scale = 'lustrum'\r\n                break\r\n            case /^lustrum$/i.test( scale ):\r\n                higher_scale = 'decade'\r\n                break\r\n            case /^dec(ade|ennium)$/i.test( scale ):\r\n                higher_scale = 'century'\r\n                break\r\n            case /^century$/i.test( scale ):\r\n                higher_scale = 'millennium'\r\n                break\r\n            case /^millenniums?|millennia$/i.test( scale ):\r\n            default:\r\n                break\r\n        }\r\n        return higher_scale\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the date string of specified locale\r\n     * @param {!string} date_seed - \r\n     * @param {string} [scale=\"\"] - \r\n     * @param {string} [locales=\"en-US\"] - \r\n     * @param {Object} [options={}] - \r\n     * @return {string} Locale string\r\n     */\r\n    getLocaleString( date_seed, scale = '', locales = 'en-US', options = {} ) {\r\n        function toLocaleStringSupportsLocales() {\r\n            try {\r\n                new Date().toLocaleString( 'i' )\r\n            } catch ( e ) {\r\n                return e.name === \"RangeError\";\r\n            }\r\n            return false;\r\n        }\r\n        let is_toLocalString = toLocaleStringSupportsLocales(),\r\n            locale_string = '',\r\n            _options = {},\r\n            getOrdinal = ( n ) => {\r\n                let s = [ 'th', 'st', 'nd', 'rd' ], v = n % 100\r\n                return n + ( s[(v - 20)%10] || s[v] || s[0] )\r\n            },\r\n            getZerofill = ( num, digit = 4 ) => {\r\n                let strDuplicate = ( n, str ) => Array( n + 1 ).join( str ),\r\n                    zero = strDuplicate( digit - num.length, '0' )\r\n                \r\n                return String( num ).length == digit ? String( num ) : ( zero + num ).substr( num * -1 )\r\n            },\r\n            parseDatetime = ( date_str ) => {\r\n                let [ _ymd, _his ] = date_str.split(' '),\r\n                    _parts         = []\r\n                \r\n                if ( /^\\d{1,4}\\/\\d{1,2}\\/\\d{1,2}$/.test( _ymd ) ) {\r\n                    _str = _ymd.split('/')\r\n                    _parts.push( ..._str )\r\n                }\r\n                if ( /^\\d{1,2}(|:\\d{1,2}(|:\\d{1,2}))$/.test( _his ) ) {\r\n                    _str = _his.split(':')\r\n                    _parts.push( ..._str )\r\n                }\r\n                if ( _parts.length > 0 ) {\r\n                    return new Date( ..._parts )\r\n                } else {\r\n                    return new Date( date_str )\r\n                }\r\n            },\r\n            _prop, _temp, _str, _num\r\n        \r\n        for ( _prop in options ) {\r\n            if ( _prop === 'timeZone' || _prop === 'hour12' ) {\r\n                _options[_prop] = options[_prop]\r\n            }\r\n        }\r\n//console.log( '!getLocaleString:', date_seed, scale, locales, options[scale], is_toLocalString )\r\n        \r\n        switch ( true ) {\r\n            case /^millenniums?|millennia$/i.test( scale ):\r\n            case /^century$/i.test( scale ):\r\n            case /^dec(ade|ennium)$/i.test( scale ):\r\n            case /^lustrum$/i.test( scale ):\r\n                if ( options.hasOwnProperty( scale ) && options[scale] === 'ordinal' ) {\r\n                    locale_string = getOrdinal( date_seed )\r\n                } else {\r\n                    locale_string = date_seed\r\n                }\r\n                break\r\n            case /^years?$/i.test( scale ):\r\n                if ( is_toLocalString && options.hasOwnProperty( scale ) ) {\r\n                    if ( [ 'numeric', '2-digit' ].includes( options[scale] ) ) {\r\n                        _options.year = options[scale]\r\n                        locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\r\n                    } else\r\n                    if ( 'zerofill' === options[scale] ) {\r\n                        locale_string = getZerofill( date_seed )\r\n                    }\r\n                }\r\n                locale_string = this.is_empty( locale_string ) ? this.getCorrectDatetime( date_seed ).getFullYear() : locale_string\r\n                break\r\n            case /^months?$/i.test( scale ):\r\n                if ( is_toLocalString && options.hasOwnProperty( scale ) ) {\r\n                    if ( [ 'numeric', '2-digit', 'narrow', 'short', 'long' ].includes( options[scale] ) ) {\r\n                        _options.month = options[scale]\r\n                        locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\r\n                        //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\r\n                    }\r\n                }\r\n                if ( this.is_empty( locale_string ) || isNaN( locale_string ) ) {\r\n                    if ( /^\\d{1,2}\\/\\d{1,2}(|\\/\\d{1,2})$/.test( date_seed ) ) {\r\n                        _str = date_seed.split('/')\r\n                        _temp = new Date( _str[0], parseInt( _str[1] - 1 ), 1 )\r\n                        locale_string = _temp.toLocaleString( locales, _options )\r\n                    }\r\n                }\r\n                break\r\n            case /^weeks?$/i.test( scale ):\r\n                [ _str, _num ] = date_seed.split(',')\r\n//console.log( date_seed, _str, _num, new Date( _str ), parseDatetime( _str ), this.getCorrectDatetime( _str ) )\r\n                if ( options.hasOwnProperty( scale ) && options[scale] === 'ordinal' ) {\r\n                    locale_string = getOrdinal( parseInt( _num, 10 ) )\r\n                } else {\r\n                    locale_string = _num\r\n                }\r\n                break\r\n            case /^weekdays?$/i.test( scale ):\r\n                [ _str, _num ] = date_seed.split(',')\r\n                if ( /^\\d{1,2}(|\\/\\d{1,2}(|\\/\\d{1,2}))$/.test( _str ) ) {\r\n                    _str = _str.split('/')\r\n                    _temp = new Date( ..._str )\r\n                } else {\r\n                    _temp = new Date( _str )\r\n                }\r\n                if ( is_toLocalString ) {\r\n                    _options.weekday = options.hasOwnProperty('weekday') ? options.weekday : 'narrow'\r\n                    locale_string = _temp.toLocaleString( locales, _options )\r\n                    //locale_string = this.getCorrectDatetime( _temp[0] ).toLocaleString( locales, _options )\r\n                } else {\r\n                    let _weekday = [ 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' ]\r\n                    locale_string = _weekday[parseInt( _num, 10 )]\r\n                }\r\n                break\r\n            case /^days?$/i.test( scale ):\r\n                if ( /^\\d{1,2}(|\\/\\d{1,2}(|\\/\\d{1,2}))$/.test( date_seed ) ) {\r\n                    _str = date_seed.split('/')\r\n                    _temp = new Date( ..._str )\r\n                } else {\r\n                    _temp = new Date( date_seed )\r\n                }\r\n                if ( is_toLocalString ) {\r\n                    _options.day = options.hasOwnProperty('day') ? options.day : 'numeric'\r\n                    locales = options.hasOwnProperty('day') ? locales : 'en-US'\r\n                    locale_string = _temp.toLocaleString( locales, _options )\r\n                    //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\r\n                } else {\r\n                    locale_string = _temp.getDate()\r\n                    //locale_string = this.getCorrectDatetime( date_seed ).getDate()\r\n                }\r\n                break\r\n            case /^hours?$/i.test( scale ):\r\n            case /^(half|quarter)-?hours?$/i.test( scale ):\r\n                _temp = typeof date_seed === 'string' ? parseDatetime( date_seed ) : new Date( date_seed )\r\n                if ( is_toLocalString ) {\r\n                    _options.hour = options.hasOwnProperty('hour') ? options.hour : 'numeric'\r\n                    if ( options.hasOwnProperty('minute') ) {\r\n                        _options.minute = options.hasOwnProperty('minute') ? options.minute : 'numeric'\r\n                    }\r\n                    locale_string = _temp.toLocaleString( locales, _options )\r\n                    //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\r\n                } else {\r\n                    locale_string = _temp.getHours()\r\n                    //locale_string = this.getCorrectDatetime( date_seed ).getHours()\r\n                }\r\n                break\r\n            case /^minutes?$/i.test( scale ):\r\n                _temp = typeof date_seed === 'string' ? parseDatetime( date_seed ) : new Date( date_seed )\r\n                if ( is_toLocalString ) {\r\n                    _options.minute = options.hasOwnProperty('minute') ? options.minute : 'numeric'\r\n                    if ( options.hasOwnProperty('hour') ) {\r\n                        _options.hour   = options.hasOwnProperty('hour') ? options.hour : 'numeric'\r\n                    }\r\n                    locale_string = _temp.toLocaleString( locales, _options )\r\n                    //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\r\n                } else {\r\n                    locale_string = _temp.getMinutes()\r\n                    //locale_string = this.getCorrectDatetime( date_seed ).getMinutes()\r\n                }\r\n                break\r\n            case /^seconds?$/i.test( scale ):\r\n                _temp = typeof date_seed === 'string' ? parseDatetime( date_seed ) : new Date( date_seed )\r\n                if ( is_toLocalString ) {\r\n                    _options.second = options.hasOwnProperty('second') ? options.second : 'numeric'\r\n                    if ( options.hasOwnProperty('hour') ) {\r\n                        _options.hour   = options.hasOwnProperty('hour') ? options.hour : 'numeric'\r\n                    }\r\n                    if ( options.hasOwnProperty('minute') ) {\r\n                        _options.minute = options.hasOwnProperty('minute') ? options.minute : 'numeric'\r\n                    }\r\n                    locale_string = _temp.toLocaleString( locales, _options )\r\n                    //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\r\n                } else {\r\n                    locale_string = _temp.getSeconds()\r\n                    //locale_string = this.getCorrectDatetime( date_seed ).getSeconds()\r\n                }\r\n                break\r\n            case /^millisec(|ond)s?$/i.test( scale ):\r\n            default:\r\n                _temp = typeof date_seed === 'string' ? parseDatetime( date_seed ) : new Date( date_seed )\r\n                locale_string = _temp.toString()\r\n                //locale_string = this.getCorrectDatetime( date_seed )\r\n                break\r\n        }\r\n//console.log( '!getLocaleString:', date_seed, scale, locales, options[scale], locale_string )\r\n        return locale_string\r\n    }\r\n    \r\n    /**\r\n     * Get the rendering width of the given string\r\n     * @param {!string} str - \r\n     * @return {number}\r\n     */\r\n    strWidth( str ) {\r\n        let _str_ruler = $( '<span id=\"jqtl-str-ruler\"></span>' ),\r\n            _width     = 0\r\n        if ( $('#jqtl-str-ruler').length == 0 ) {\r\n            $('body').append( _str_ruler )\r\n        }\r\n        _width = $('#jqtl-str-ruler').text( str ).get(0).offsetWidth\r\n        $('#jqtl-str-ruler').empty()\r\n        return _width\r\n    }\r\n    \r\n    /**\r\n     * Sort an array by value of specific property (Note: destructive method)\r\n     * @example\r\n     * Object.sort( this.compareValues( property, order ) )\r\n     *\r\n     * @param {!string} property - To compare a property of object\r\n     * @param {string} [order=\"asc\"] - Order to sort\r\n     * @return {number} Comparison index\r\n     */\r\n    compareValues( property, order = 'asc' ) {\r\n        return ( a, b ) => {\r\n            if ( ! a.hasOwnProperty( property ) || ! b.hasOwnProperty( property ) ) {\r\n                return 0\r\n            }\r\n            \r\n            const varA = typeof a[property] === 'string' ? a[property].toUpperCase() : a[property]\r\n            const varB = typeof b[property] === 'string' ? b[property].toUpperCase() : b[property]\r\n            \r\n            let comparison = 0\r\n            \r\n            if ( varA > varB ) {\r\n                comparison = 1\r\n            } else\r\n            if ( varA < varB ) {\r\n                comparison = -1\r\n            }\r\n            return order === 'desc' ? comparison * -1 : comparison\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Validator for string\r\n     * @param {!(number|string|Object|boolean)} def - Define instead this value as default if validation failure\r\n     * @param {!(number|string|Object|boolean)} val - Value to validate\r\n     * @return {number|string|Object|boolean}\r\n     */\r\n    validateString( def, val ) {\r\n        return typeof val === 'string' && val !== '' ? val : def\r\n    }\r\n    /**\r\n     * Validator for numeric\r\n     * @param {!(number|string|Object|boolean)} def - Define instead this value as default if validation failure\r\n     * @param {!(number|string|Object|boolean)} val - Value to validate\r\n     * @return {number|string|Object|boolean}\r\n     */\r\n    validateNumeric( def, val ) {\r\n        return typeof val === 'number' ? Number( val ) : def\r\n    }\r\n    /**\r\n     * Validator for boolean\r\n     * @param {!(number|string|Object|boolean)} def - Define instead this value as default if validation failure\r\n     * @param {!(number|string|Object|boolean)} val - Value to validate\r\n     * @return {number|string|Object|boolean}\r\n     */\r\n    validateBoolean( def, val ) {\r\n        return typeof val === 'boolean' || ( typeof val === 'object' && val !== null && typeof val.valueOf() === 'boolean' ) ? val : def\r\n    }\r\n    /**\r\n     * Validator for object\r\n     * @param {!(number|string|Object|boolean)} def - Define instead this value as default if validation failure\r\n     * @param {!(number|string|Object|boolean)} val - Value to validate\r\n     * @return {number|string|Object|boolean}\r\n     */\r\n    validateObject( def, val ) {\r\n        return typeof val === 'object' ? val : def\r\n    }\r\n    /**\r\n     * Validator for array\r\n     * @param {!(number|string|Object|boolean)} def - Define instead this value as default if validation failure\r\n     * @param {!(number|string|Object|boolean)} val - Value to validate\r\n     * @return {number|string|Object|boolean}\r\n     */\r\n    validateArray( def, val ) {\r\n        return Object.prototype.toString.call( val ) === '[object Array]' ? val : def\r\n    }\r\n    \r\n    \r\n    // Static\r\n    \r\n    /**\r\n     * Interface for jQuery\r\n     * @interface\r\n     * @param {?(string|Object)} config - The object of plugin options or string of public method\r\n     * @param {?(...string|...Function())} args - Arguments for public method\r\n     */\r\n    static _jQueryInterface( config, ...args ) {\r\n        return this.each(function () {\r\n            let data = $(this).data( DATA_KEY )\r\n            const _config = {\r\n                ...Default,\r\n                ...$(this).data(),\r\n                ...typeof config === 'object' && config ? config : {}\r\n            }\r\n            \r\n            if ( ! data ) {\r\n                // Apply the plugin and store the instance in data\r\n                data = new Timeline( this, _config )\r\n                $(this).data( DATA_KEY, data )\r\n            }\r\n            \r\n            if ( typeof config === 'string' && config.charAt(0) != '_' ) {\r\n                if ( typeof data[config] === 'undefined' ) {\r\n                    // Call no method\r\n                    throw new ReferenceError( `No method named \"${config}\"` )\r\n                }\r\n                // Call public method\r\n                data[config]( args )\r\n            } else {\r\n                if ( ! data._isInitialized ) {\r\n                    data._init()\r\n                }\r\n            }\r\n        })\r\n    }\r\n    \r\n} // class end\r\n\r\n\r\n/* ----------------------------------------------------------------------------------------------------------------\r\n * For jQuery\r\n * ----------------------------------------------------------------------------------------------------------------\r\n */\r\n$.fn[NAME] = Timeline._jQueryInterface\r\n$.fn[NAME].Constructor = Timeline\r\n$.fn[NAME].noConflict = () => {\r\n    $.fn[NAME] = JQUERY_NO_CONFLICT\r\n    return Timeline._jQueryInterface\r\n}\r\n\r\n/* ----------------------------------------------------------------------------------------------------------------\r\n * For ESDoc\r\n * ----------------------------------------------------------------------------------------------------------------\r\n */\r\nexport {\r\n    /*\r\n    NAME,\r\n    VERSION,\r\n    DATA_KEY,\r\n    EVENT_KEY,\r\n    PREFIX,\r\n    LOADING_MESSAGE,\r\n    MIN_POINTER_SIZE,\r\n    JQUERY_NO_CONFLICT,\r\n    */\r\n    Default,\r\n    LimitScaleGrids,\r\n    EventParams,\r\n    /*\r\n    Event,\r\n    ClassName,\r\n    Selector,\r\n    */\r\n    Timeline\r\n}\r\n",
    "static": true,
    "longname": "C:/xampp/htdocs/factory/jquery.timeline/src/timeline.esdoc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "typedef",
    "name": "LocaleOptions",
    "memberof": "src/timeline.esdoc.js",
    "static": true,
    "longname": "src/timeline.esdoc.js~LocaleOptions",
    "access": "public",
    "description": "In principle, this option conforms to the specification of options in \"Date.prototype.toLocaleString()\".\nHowever, there includes some extensions of this plugin original.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "hour12",
        "description": "Whether to use 12-hour time (as opposed to 24-hour time). Possible values are true and false."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "localeMatcher",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "timeZone",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "hourCycle",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "formatMatcher",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "weekday",
        "description": "The representation of the weekday. Possible values are \"narrow\", \"short\", \"long\"."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "era",
        "description": "The representation of the era. Possible values are \"narrow\", \"short\", \"long\"."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "year",
        "description": "The representation of the year. Possible values are \"numeric\", \"2-digit\"."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "month",
        "description": "The representation of the month. Possible values are \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "day",
        "description": "The representation of the day. Possible values are \"numeric\", \"2-digit\"."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "hour",
        "description": "The representation of the hour. Possible values are \"numeric\", \"2-digit\"."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "minute",
        "description": "The representation of the minute. Possible values are \"numeric\", \"2-digit\"."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "second",
        "description": "The representation of the second. Possible values are \"numeric\", \"2-digit\"."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "timeZoneName",
        "description": "The representation of the time zone name. Possible values are \"short\", \"long\"."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "LocaleOptions"
    }
  },
  {
    "__docId__": 50,
    "kind": "typedef",
    "name": "Headline",
    "memberof": "src/timeline.esdoc.js",
    "static": true,
    "longname": "src/timeline.esdoc.js~Headline",
    "access": "public",
    "description": "",
    "since": "2.0.0",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "display",
        "description": "Whether to display headline"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "title",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "range",
        "description": "Hide if false"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"en-US\"",
        "defaultRaw": "en-US",
        "name": "locale",
        "description": "This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`"
      },
      {
        "nullable": null,
        "types": [
          "LocaleOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "format",
        "description": "This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Headline"
    }
  },
  {
    "__docId__": 51,
    "kind": "typedef",
    "name": "Footer",
    "memberof": "src/timeline.esdoc.js",
    "static": true,
    "longname": "src/timeline.esdoc.js~Footer",
    "access": "public",
    "description": "",
    "since": "2.0.0",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "display",
        "description": "Whether to display headline"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "content",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "range",
        "description": "Visible if true"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"en-US\"",
        "defaultRaw": "en-US",
        "name": "locale",
        "description": "This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`"
      },
      {
        "nullable": null,
        "types": [
          "LocaleOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "format",
        "description": "This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Footer"
    }
  },
  {
    "__docId__": 52,
    "kind": "typedef",
    "name": "Sidebar",
    "memberof": "src/timeline.esdoc.js",
    "static": true,
    "longname": "src/timeline.esdoc.js~Sidebar",
    "access": "public",
    "description": "",
    "since": "2.0.0",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "sticky",
        "description": "Whether does sticky the sidebar by using \"display: sticky\" of CSS."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "overlay",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "array.<String>"
        ],
        "spread": false,
        "optional": true,
        "name": "list",
        "description": "Define the contents of the row of the sidebar. Appropriate escaping is necessary when using HTML."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Sidebar"
    }
  },
  {
    "__docId__": 53,
    "kind": "typedef",
    "name": "RulerOptions",
    "memberof": "src/timeline.esdoc.js",
    "static": true,
    "longname": "src/timeline.esdoc.js~RulerOptions",
    "access": "public",
    "description": "Can define the ruler position to top or bottom and both",
    "since": "2.0.0",
    "properties": [
      {
        "nullable": null,
        "types": [
          "array.<String>"
        ],
        "spread": false,
        "optional": true,
        "name": "lines",
        "description": "Multiple tick marks can be set, and array elements are set in order from the top. Set same scale of Default.scale if omitted this. c.g. [ 'year', 'month', 'day', 'weekday' ]"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "30",
        "defaultRaw": 30,
        "name": "height",
        "description": "The height of a row of rulers"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "14",
        "defaultRaw": 14,
        "name": "fontSize",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"#777777\"",
        "defaultRaw": "#777777",
        "name": "color",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"#FFFFFF\"",
        "defaultRaw": "#FFFFFF",
        "name": "background",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"en-US\"",
        "defaultRaw": "en-US",
        "name": "locale",
        "description": "This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`"
      },
      {
        "nullable": null,
        "types": [
          "LocaleOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "format",
        "description": "This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "RulerOptions"
    }
  },
  {
    "__docId__": 54,
    "kind": "typedef",
    "name": "Ruler",
    "memberof": "src/timeline.esdoc.js",
    "static": true,
    "longname": "src/timeline.esdoc.js~Ruler",
    "access": "public",
    "description": "You can set the upper and lower ruler individually",
    "since": "2.0.0",
    "properties": [
      {
        "nullable": null,
        "types": [
          "RulerOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "top",
        "description": "The upper ruler configuration. The upper ruler is hidden if omitted."
      },
      {
        "nullable": null,
        "types": [
          "RulerOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "bottom",
        "description": "The lower ruler configuration. The lower ruler is hidden if omitted."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Ruler"
    }
  },
  {
    "__docId__": 55,
    "kind": "typedef",
    "name": "EventMeta",
    "memberof": "src/timeline.esdoc.js",
    "static": true,
    "longname": "src/timeline.esdoc.js~EventMeta",
    "access": "public",
    "description": "",
    "since": "2.0.0",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "display",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"day\"",
        "defaultRaw": "day",
        "name": "scale",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"en-US\"",
        "defaultRaw": "en-US",
        "name": "locale",
        "description": "This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`"
      },
      {
        "nullable": null,
        "types": [
          "LocaleOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "format",
        "description": "This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "content",
        "description": "This is value for if you want to show custom content on the meta"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "EventMeta"
    }
  },
  {
    "__docId__": 56,
    "kind": "typedef",
    "name": "Default",
    "memberof": "src/timeline.esdoc.js",
    "static": true,
    "longname": "src/timeline.esdoc.js~Default",
    "access": "public",
    "description": "Default options for generating the timeline by the jQuery.Timeline plugin.\nThose defaults are overridden to undefined settings of the timeline configuration.",
    "since": "2.0.0",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"bar\"",
        "defaultRaw": "bar",
        "name": "type",
        "description": "View type of timeline event is either \"bar\" or \"point\""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"day\"",
        "defaultRaw": "day",
        "name": "scale",
        "description": "Timetable's minimum level scale is either \"year\", \"month\", \"week\", \"day\", \"hour\", \"minute\""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"currently\"",
        "defaultRaw": "currently",
        "name": "startDatetime",
        "description": "Beginning date time of timetable on the timeline. format is ( \"^d{4}(/|-)d{2}(/|-)d{2}\\sd{2}:d{2}:d{2}$\" ) or \"currently\""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"auto\"",
        "defaultRaw": "auto",
        "name": "endDatetime",
        "description": "Ending date time of timetable on the timeline. format is ( \"^d{4}(/|-)d{2}(/|-)d{2}\\sd{2}:d{2}:d{2}$\" ) or \"auto\""
      },
      {
        "nullable": null,
        "types": [
          "Headline"
        ],
        "spread": false,
        "optional": true,
        "name": "headline",
        "description": "Settings for the content customize in the headline"
      },
      {
        "nullable": null,
        "types": [
          "Footer"
        ],
        "spread": false,
        "optional": true,
        "name": "footer",
        "description": "Settings for the content customize in the footer"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "3",
        "defaultRaw": 3,
        "name": "range",
        "description": "Override the scale range of the timeline to be rendered when endDatetime is undefined or \"auto\""
      },
      {
        "nullable": null,
        "types": [
          "Sidebar"
        ],
        "spread": false,
        "optional": true,
        "name": "sidebar",
        "description": "Settings for the content of the sidebar"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"auto\"",
        "defaultRaw": "auto",
        "name": "rows",
        "description": "Rows of timeline event area"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "48",
        "defaultRaw": 48,
        "name": "rowHeight",
        "description": "Height of one row"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"auto\"",
        "defaultRaw": "auto",
        "name": "width",
        "description": "Fixed width (pixel) of timeline view"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"auto\"",
        "defaultRaw": "auto",
        "name": "height",
        "description": "Fixed height (pixel) of timeline view; Defaults to ( rows * rowHeight )"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "30",
        "defaultRaw": 30,
        "name": "minGridSize",
        "description": "Override value of minimum size (pixel) of timeline grid"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "marginHeight",
        "description": "Margin (pixel) top and bottom of events on the timeline"
      },
      {
        "nullable": null,
        "types": [
          "Ruler"
        ],
        "spread": false,
        "optional": true,
        "name": "ruler",
        "description": "Settings of the ruler"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"latest\"",
        "defaultRaw": "latest",
        "name": "rangeAlign",
        "description": "Possible values are \"left\", \"center\", \"right\", \"current\", \"latest\" and specific event id"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"default\"",
        "defaultRaw": "default",
        "name": "loader",
        "description": "Custom loader definition, possible values are \"default\", false and selector of loader element"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "hideScrollbar",
        "description": "Whether or not to display the scroll bar displayed when the width of the timeline overflows (even if it is set to non-display, it will not function depending on the browser)"
      },
      {
        "nullable": null,
        "types": [
          "EventMeta"
        ],
        "spread": false,
        "optional": true,
        "name": "eventMeta",
        "description": "Display meta of range on event node when the timeline type is \"bar\""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"session\"",
        "defaultRaw": "session",
        "name": "storage",
        "description": "Specification of Web storage to cache event data, defaults to sessionStorage"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "reloadCacheKeep",
        "description": "Whether to load cached events during reloading, the cache is discarded if false"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "zoom",
        "description": "Whether to use the ability to zoom the scale of the timeline by double clicking on any scale on the ruler"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "wrapScale",
        "description": "Whether wrapping new scale in the timeline container when zoom"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"canvas\"",
        "defaultRaw": "canvas",
        "name": "engine",
        "description": "Choose dependent module to core as rendering engine. It'll be \"canvas\" or \"d3.js\"; Maybe add in future version"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "debug",
        "description": "Enable to debug mode if true then output logs for debugging to console; defaults to false"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Default"
    }
  },
  {
    "__docId__": 57,
    "kind": "typedef",
    "name": "LimitScaleGrids",
    "memberof": "src/timeline.esdoc.js",
    "static": true,
    "longname": "src/timeline.esdoc.js~LimitScaleGrids",
    "access": "public",
    "description": "The limited grid number per scale of timeline",
    "since": "2.0.0",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "millennium",
        "description": "In other words it's 100000 years"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "500",
        "defaultRaw": 500,
        "name": "century",
        "description": "In other words it's 50000 years"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "500",
        "defaultRaw": 500,
        "name": "decade",
        "description": "In other words it's 5000 years"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "500",
        "defaultRaw": 500,
        "name": "lustrum",
        "description": "In other words it's 2500 years"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "500",
        "defaultRaw": 500,
        "name": "year",
        "description": "In other words it's 500 years"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "540",
        "defaultRaw": 540,
        "name": "month",
        "description": "In other words it's 45 years"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "530",
        "defaultRaw": 530,
        "name": "week",
        "description": "In other words it's 10 years"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "366",
        "defaultRaw": 366,
        "name": "day",
        "description": "In other words it's about 1 years"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "720",
        "defaultRaw": 720,
        "name": "hour",
        "description": "In other words it's 30 days"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "720",
        "defaultRaw": 720,
        "name": "quarterHour",
        "description": "In other words it's 7.5 days"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "720",
        "defaultRaw": 720,
        "name": "halfHour",
        "description": "In other words it's 15 days"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "720",
        "defaultRaw": 720,
        "name": "minute",
        "description": "In other words it's 12 hours"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "900",
        "defaultRaw": 900,
        "name": "second",
        "description": "In other words it's 15 minutes"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "LimitScaleGrids"
    }
  },
  {
    "__docId__": 58,
    "kind": "typedef",
    "name": "RelationOption",
    "memberof": "src/timeline.esdoc.js",
    "static": true,
    "longname": "src/timeline.esdoc.js~RelationOption",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "before",
        "description": "Set target eventID to connect the relation line to the event (leftward on the timeline) in chronological before from oneself event."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "after",
        "description": "Set target eventID to connect the relation line to the event (rightward on the timeline) in chronological after from oneself event."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "linesize",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "linecolor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number",
          "string",
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "curve",
        "description": "Whether the connection line is curved if the connection events are not on the same horizontal. If you specify a boolean value or a shorthand (0 or 1 only), it will be automatically curved. As with the previous version, it is also possible to specify the type of curve using defined preset values."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "RelationOption"
    }
  },
  {
    "__docId__": 59,
    "kind": "typedef",
    "name": "EventParams",
    "memberof": "src/timeline.esdoc.js",
    "static": true,
    "longname": "src/timeline.esdoc.js~EventParams",
    "access": "public",
    "description": "The preset as default of event parameters on the timeline",
    "since": "2.0.0",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "uid",
        "description": "An unique id of event data, this can not define because this value is automatically generate as data for cache only"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "eventId",
        "description": "It is an ID that identifies an event for you to manipulate event data via each method. If omitted, consecutive numbers are automatically assigned."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Can not define because this value is automatically generate as data for cache only"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Can not define because this value is automatically generate as data for cache only"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "Can not define because this value is automatically generate as data for cache only"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Can not define because this value is automatically generate as data for cache only"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Can not define because this value is automatically generate as data for cache only"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "Can not define because this value is automatically generate as data for cache only"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "Can not define because this value is automatically generate as data for cache only"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"#E7E7E7\"",
        "defaultRaw": "#E7E7E7",
        "name": "bgColor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"#343A40\"",
        "defaultRaw": "#343A40",
        "name": "color",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"#6C757D\"",
        "defaultRaw": "#6C757D",
        "name": "bdColor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "label",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "content",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "image",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "margin",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "rangeMeta",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"normal\"",
        "defaultRaw": "normal",
        "name": "size",
        "description": "Define the diameter size of pointer when type of the timeline is \"point\". Possible values are \"large\", \"normal\", \"small\" and value of pixel."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "extend",
        "description": "The specified key/value pair is replaced with the data attribute of the event element."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "remote",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "RelationOption"
        ],
        "spread": false,
        "optional": true,
        "name": "relation",
        "description": "Setting for connecting events by relation lines when the timeline type is \"point\"."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "callback",
        "description": "Callback processing that binds to openEvent method when this event is clicked."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "EventParams"
    }
  },
  {
    "__docId__": 60,
    "kind": "class",
    "name": "Timeline",
    "memberof": "src/timeline.esdoc.js",
    "static": true,
    "longname": "src/timeline.esdoc.js~Timeline",
    "access": "public",
    "export": true,
    "importPath": "jquery-timeline/src/timeline.esdoc.js",
    "importStyle": "{Timeline}",
    "description": "Pluin Core Class",
    "lineNumber": 283,
    "since": "2.0.0",
    "interface": false
  },
  {
    "__docId__": 61,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 284,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "_config",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_config",
    "access": "private",
    "description": null,
    "lineNumber": 286,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "_element",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_element",
    "access": "private",
    "description": null,
    "lineNumber": 288,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "_selector",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_selector",
    "access": "private",
    "description": null,
    "lineNumber": 290,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "_isInitialized",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_isInitialized",
    "access": "private",
    "description": null,
    "lineNumber": 292,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "_isCached",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_isCached",
    "access": "private",
    "description": null,
    "lineNumber": 294,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "_isCompleted",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_isCompleted",
    "access": "private",
    "description": null,
    "lineNumber": 296,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "_isShown",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_isShown",
    "access": "private",
    "description": null,
    "lineNumber": 298,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "_instanceProps",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_instanceProps",
    "access": "private",
    "description": null,
    "lineNumber": 300,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 70,
    "kind": "get",
    "name": "VERSION",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/timeline.esdoc.js~Timeline.VERSION",
    "access": "public",
    "description": null,
    "lineNumber": 306,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 71,
    "kind": "get",
    "name": "Default",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/timeline.esdoc.js~Timeline.Default",
    "access": "public",
    "description": null,
    "lineNumber": 311,
    "type": {
      "nullable": null,
      "types": [
        "Default"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "_getConfig",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_getConfig",
    "access": "private",
    "description": "Define the default options of this plugin",
    "lineNumber": 323,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "Initial options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Config overrided initial options to default config"
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "_filterScaleKeyName",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_filterScaleKeyName",
    "access": "private",
    "description": "Filter the scale key name for LimitScaleGrids",
    "lineNumber": 337,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Filtered scale key name"
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "_init",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_init",
    "access": "private",
    "description": "Initialize the plugin",
    "lineNumber": 357,
    "params": [],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "_calcVars",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_calcVars",
    "access": "private",
    "description": "Calculate each properties of the timeline instance",
    "lineNumber": 446,
    "params": [],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "_getPluggableDatetime",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_getPluggableDatetime",
    "access": "private",
    "description": "Retrieve the pluggable datetime as milliseconds from specified keyword",
    "lineNumber": 512,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Any one of \"current\", \"auto\", or datetime string"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "round_type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "This value unit is milliseconds"
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "_getPluggableParams",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_getPluggableParams",
    "access": "private",
    "description": "Retrieve the pluggable parameter as an object",
    "lineNumber": 654,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str_like_params",
        "description": "Strings that can be parsed as javascript objects"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "_getPluggableRows",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_getPluggableRows",
    "access": "private",
    "description": "Retrieve the pluggable rows of the timeline",
    "lineNumber": 675,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "_verifyScale",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_verifyScale",
    "access": "private",
    "description": "Verify the allowed scale, then retrieve that scale's millisecond if allowed",
    "lineNumber": 691,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "scale",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "boolean"
      ],
      "spread": false,
      "description": "Return false if specified an invalid scale"
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "_verifyMaxRenderableRange",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_verifyMaxRenderableRange",
    "access": "private",
    "description": "Verify the display period of the timeline does not exceed the maximum renderable range",
    "lineNumber": 784,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "_renderView",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_renderView",
    "access": "private",
    "description": "Render the view of timeline container",
    "lineNumber": 793,
    "params": [],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "_createHeadline",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_createHeadline",
    "access": "private",
    "description": "Create the headline of the timeline",
    "lineNumber": 855,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Generated DOM element"
    },
    "params": []
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "_createEventContainer",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_createEventContainer",
    "access": "private",
    "description": "Create the event container of the timeline",
    "lineNumber": 891,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Generated DOM element"
    },
    "params": []
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "_createRuler",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_createRuler",
    "access": "private",
    "description": "Create the ruler of the timeline",
    "lineNumber": 980,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "Either \"top\" or \"bottom\" as the position of the ruler"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Generated DOM element"
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "_filterVariableScale",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_filterVariableScale",
    "access": "private",
    "description": "Filter to aggregate the grid width of the variable length scale",
    "lineNumber": 1075,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "target_scale",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "_getGridsPerScale",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_getGridsPerScale",
    "access": "private",
    "description": "Get the grid number per scale (for fixed length scale)",
    "lineNumber": 1176,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "target_scale",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "_createRulerContent",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_createRulerContent",
    "access": "private",
    "description": "Create the content of ruler of the timeline",
    "lineNumber": 1237,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "_line_grids",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "line_scale",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "RulerOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "ruler",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Generated DOM element"
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "_createSideIndex",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_createSideIndex",
    "access": "private",
    "description": "Create the side indexes of the timeline",
    "lineNumber": 1279,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "margin",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "margin.top",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "margin.bottom",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Generated DOM element"
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "_createFooter",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_createFooter",
    "access": "private",
    "description": "Create the footer of the timeline",
    "lineNumber": 1322,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Generated DOM element"
    },
    "params": []
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "_diffDate",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_diffDate",
    "access": "private",
    "description": "Acquire the difference between two dates with the specified scale value",
    "lineNumber": 1362,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "date1",
        "description": "Number that can be parsed as datetime"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "date2",
        "description": "Number that can be parsed as datetime"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"millisecond\"",
        "defaultRaw": "millisecond",
        "name": "scale",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "absval",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "_loadEvent",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_loadEvent",
    "access": "private",
    "description": "Load all enabled events markupped on target element to the timeline object",
    "lineNumber": 1466,
    "params": [],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "_registerEventData",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_registerEventData",
    "access": "private",
    "description": "Register one event data as object",
    "lineNumber": 1524,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event_element",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Registered new event data"
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "_getCoordinateX",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_getCoordinateX",
    "access": "private",
    "description": "Get the coordinate X on the timeline of any date",
    "lineNumber": 1616,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The pixel value as the coordinate X on timeline"
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "_saveToCache",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_saveToCache",
    "access": "private",
    "description": "Cache the event data to the web storage",
    "lineNumber": 1642,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "_loadToCache",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_loadToCache",
    "access": "private",
    "description": "Load the cached event data from the web storage",
    "lineNumber": 1663,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "_removeCache",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_removeCache",
    "access": "private",
    "description": "Remove the cache data on the web storage",
    "lineNumber": 1684,
    "params": [],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "_placeEvent",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_placeEvent",
    "access": "private",
    "description": "Controller method to place event data on timeline\n@private: ",
    "lineNumber": 1703,
    "params": [],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "_createEventNode",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_createEventNode",
    "access": "private",
    "description": "Create an event element on the timeline",
    "lineNumber": 1748,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Generated DOM element"
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "_getPointerSize",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_getPointerSize",
    "access": "private",
    "description": "Retrieve the diameter size (pixel) of pointer",
    "lineNumber": 1871,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "margin",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "_drawRelationLine",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_drawRelationLine",
    "access": "private",
    "description": "Draw the relational lines",
    "lineNumber": 1900,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "_mapPlacedEvents",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_mapPlacedEvents",
    "access": "private",
    "description": "Retrieve the mapping data that placed current events",
    "lineNumber": 2147,
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "_activeEvent",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_activeEvent",
    "access": "private",
    "description": "Event when focus or blur",
    "lineNumber": 2181,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "_hoverPointer",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_hoverPointer",
    "access": "private",
    "description": "Event when hover on the pointer type event",
    "lineNumber": 2199,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "_debug",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#_debug",
    "access": "private",
    "description": "Echo the log of plugin for debugging",
    "lineNumber": 2231,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"Notice\"",
        "defaultRaw": "Notice",
        "name": "throwType",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "initialized",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#initialized",
    "access": "public",
    "description": "This method is able to call only once after completed an initializing of the plugin",
    "lineNumber": 2259,
    "params": [
      {
        "nullable": true,
        "types": [
          "Function()"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Custom callback fired after calling this method"
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "userdata",
        "description": "Data as object of referable in that callback"
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#destroy",
    "access": "public",
    "description": "Destroy the object to which the plugin is applied",
    "lineNumber": 2284,
    "params": [],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "[_prop]",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#[_prop]",
    "access": "public",
    "description": null,
    "lineNumber": 2296,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "render",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#render",
    "access": "public",
    "description": "",
    "lineNumber": 2304,
    "deprecated": "This method has been deprecated since version 2.0.0",
    "params": [],
    "return": null
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "show",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#show",
    "access": "public",
    "description": "Show hidden timeline",
    "lineNumber": 2312,
    "params": [],
    "return": null
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "hide",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#hide",
    "access": "public",
    "description": "Hide shown timeline",
    "lineNumber": 2328,
    "params": [],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "dateback",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#dateback",
    "access": "public",
    "description": "",
    "lineNumber": 2344,
    "params": [],
    "return": null
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "dateforth",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#dateforth",
    "access": "public",
    "description": "",
    "lineNumber": 2353,
    "params": [],
    "return": null
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "alignment",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#alignment",
    "access": "public",
    "description": "Move the display position of the timeline container to the specified position",
    "lineNumber": 2364,
    "params": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "The preset string of position on timeline you want to align. Allowed values are \"left\", \"begin\", \"center\", \"right\", \"end\", \"latest\", \"current\", \"currently\" or number of event id"
      },
      {
        "nullable": true,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "The duration of alignment animation. Allowed values are \"fast\", \"normal\", \"slow\" or number of milliseconds"
      }
    ],
    "return": null
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "getOptions",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#getOptions",
    "access": "public",
    "description": "",
    "lineNumber": 2461,
    "deprecated": "This method has been deprecated since version 2.0.0",
    "params": [],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "addEvent",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#addEvent",
    "access": "public",
    "description": "Add new events to the rendered timeline object",
    "lineNumber": 2471,
    "params": [
      {
        "nullable": true,
        "types": [
          "Function()"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Custom callback fired after calling this method"
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "userdata",
        "description": "Data as object of referable in that callback"
      }
    ],
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "removeEvent",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#removeEvent",
    "access": "public",
    "description": "Remove events from the currently timeline object",
    "lineNumber": 2524,
    "params": [
      {
        "nullable": true,
        "types": [
          "Function()"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Custom callback fired after calling this method"
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "userdata",
        "description": "Data as object of referable in that callback"
      }
    ],
    "return": null
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "updateEvent",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#updateEvent",
    "access": "public",
    "description": "Update events on the currently timeline object",
    "lineNumber": 2615,
    "params": [
      {
        "nullable": true,
        "types": [
          "Function()"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Custom callback fired after calling this method"
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "userdata",
        "description": "Data as object of referable in that callback"
      }
    ],
    "return": null
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "reload",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#reload",
    "access": "public",
    "description": "Reload the timeline with overridable any options",
    "lineNumber": 2670,
    "params": [
      {
        "nullable": true,
        "types": [
          "Function()"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Custom callback fired after calling this method"
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "userdata",
        "description": "Data as object of referable in that callback"
      }
    ],
    "return": null
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "openEvent",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#openEvent",
    "access": "public",
    "description": "The method that fires when an event on the timeline is clicked\nNote: You can hook the custom processing with the callback specified in the event parameter",
    "lineNumber": 2744,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "zoomScale",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#zoomScale",
    "access": "public",
    "description": "Be zoomed in scale of the timeline that fires when any scales on the ruler is double clicked",
    "lineNumber": 2804,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "showLoader",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#showLoader",
    "access": "public",
    "description": "Show the loader",
    "lineNumber": 2924,
    "params": [],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "hideLoader",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#hideLoader",
    "access": "public",
    "description": "Hide the loader",
    "lineNumber": 2964,
    "params": [],
    "return": null
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "is_empty",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#is_empty",
    "access": "public",
    "description": "Determine empty that like PHP",
    "lineNumber": 2981,
    "params": [
      {
        "nullable": false,
        "types": [
          "number",
          "string",
          "Object",
          "number[]",
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Variable you want to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "is_Object",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#is_Object",
    "access": "public",
    "description": "Determine whether variable is an Object",
    "lineNumber": 3027,
    "params": [
      {
        "nullable": false,
        "types": [
          "number",
          "string",
          "Object",
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "Variable you want to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "mergeDeep",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#mergeDeep",
    "access": "public",
    "description": "Merge two objects deeply as polyfill for instead \"$.extend(true,target,source)\"",
    "lineNumber": 3037,
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "is_iterable",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#is_iterable",
    "access": "public",
    "description": "Determine whether the object is iterable",
    "lineNumber": 3061,
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "toIterableObject",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#toIterableObject",
    "access": "public",
    "description": "Add an @@iterator method to non-iterable object",
    "lineNumber": 3070,
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "sleep",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#sleep",
    "access": "public",
    "description": "Await until next process at specific millisec",
    "lineNumber": 3096,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "msec",
        "description": "Millisecond"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "supplement",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#supplement",
    "access": "public",
    "description": "Supplemental method for validating arguments in local scope",
    "lineNumber": 3109,
    "params": [
      {
        "nullable": false,
        "types": [
          "number",
          "string",
          "Object",
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "default_value",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "number",
          "string",
          "Object",
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "opt_arg",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "number",
          "string",
          "Object",
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "opt_callback",
        "description": "function or string of function to call"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "string",
        "Object",
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "generateUniqueID",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#generateUniqueID",
    "access": "public",
    "description": "Generate the pluggable unique id",
    "lineNumber": 3124,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1000",
        "defaultRaw": 1000,
        "name": "digit",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "numRound",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#numRound",
    "access": "public",
    "description": "Round a number with specific digit",
    "lineNumber": 3135,
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "digit",
        "description": "Defaults to 0"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"round\"",
        "defaultRaw": "round",
        "name": "round_type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "hexToRgbA",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#hexToRgbA",
    "access": "public",
    "description": "Convert hex of color code to rgba",
    "lineNumber": 3156,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hex",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "alpha",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "getCorrectDatetime",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#getCorrectDatetime",
    "access": "public",
    "description": "Get the correct datetime with remapping to that if the year is 0 - 99",
    "lineNumber": 3176,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "datetime_str",
        "description": ""
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Date Object, or null if failed"
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "getWeek",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#getWeek",
    "access": "public",
    "description": "Method to get week number as extension of Date object",
    "lineNumber": 3237,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "date_str",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "getHigherScale",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#getHigherScale",
    "access": "public",
    "description": "Retrieve one higher scale",
    "lineNumber": 3260,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "scale",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "String of higher scale"
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "getLocaleString",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#getLocaleString",
    "access": "public",
    "description": "Retrieve the date string of specified locale",
    "lineNumber": 3312,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "date_seed",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"\"",
        "defaultRaw": "",
        "name": "scale",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"en-US\"",
        "defaultRaw": "en-US",
        "name": "locales",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Locale string"
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "strWidth",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#strWidth",
    "access": "public",
    "description": "Get the rendering width of the given string",
    "lineNumber": 3505,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "compareValues",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#compareValues",
    "access": "public",
    "description": "Sort an array by value of specific property (Note: destructive method)",
    "examples": [
      "Object.sort( this.compareValues( property, order ) )"
    ],
    "lineNumber": 3525,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": "To compare a property of object"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"asc\"",
        "defaultRaw": "asc",
        "name": "order",
        "description": "Order to sort"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Comparison index"
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "validateString",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#validateString",
    "access": "public",
    "description": "Validator for string",
    "lineNumber": 3552,
    "params": [
      {
        "nullable": false,
        "types": [
          "number",
          "string",
          "Object",
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "def",
        "description": "Define instead this value as default if validation failure"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string",
          "Object",
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "Value to validate"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "string",
        "Object",
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "validateNumeric",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#validateNumeric",
    "access": "public",
    "description": "Validator for numeric",
    "lineNumber": 3561,
    "params": [
      {
        "nullable": false,
        "types": [
          "number",
          "string",
          "Object",
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "def",
        "description": "Define instead this value as default if validation failure"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string",
          "Object",
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "Value to validate"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "string",
        "Object",
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "validateBoolean",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#validateBoolean",
    "access": "public",
    "description": "Validator for boolean",
    "lineNumber": 3570,
    "params": [
      {
        "nullable": false,
        "types": [
          "number",
          "string",
          "Object",
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "def",
        "description": "Define instead this value as default if validation failure"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string",
          "Object",
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "Value to validate"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "string",
        "Object",
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "validateObject",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#validateObject",
    "access": "public",
    "description": "Validator for object",
    "lineNumber": 3579,
    "params": [
      {
        "nullable": false,
        "types": [
          "number",
          "string",
          "Object",
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "def",
        "description": "Define instead this value as default if validation failure"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string",
          "Object",
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "Value to validate"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "string",
        "Object",
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "validateArray",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/timeline.esdoc.js~Timeline#validateArray",
    "access": "public",
    "description": "Validator for array",
    "lineNumber": 3588,
    "params": [
      {
        "nullable": false,
        "types": [
          "number",
          "string",
          "Object",
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "def",
        "description": "Define instead this value as default if validation failure"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string",
          "Object",
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "Value to validate"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "string",
        "Object",
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "_jQueryInterface",
    "memberof": "src/timeline.esdoc.js~Timeline",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/timeline.esdoc.js~Timeline._jQueryInterface",
    "access": "private",
    "description": "Interface for jQuery",
    "lineNumber": 3601,
    "unknown": [
      {
        "tagName": "@interface",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "string",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The object of plugin options or string of public method"
      },
      {
        "nullable": true,
        "types": [
          "...string",
          "...Function()"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "Arguments for public method"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "<p align=\"center\">\r\n  <h3 align=\"center\">jQuery.Timeline V2</h3>\r\n\r\n  <table border=\"0\">\r\n    <tr>\r\n    <td width=\"50%\" align=\"center\"><img src=\"https://ka215.github.io/jquery.timeline/imgs/jquery.timeline_v2a1_bar.png\" width=\"99%\" /></td>\r\n    <td width=\"50%\" align=\"center\"><img src=\"https://ka215.github.io/jquery.timeline/imgs/jquery.timeline_v2a1_point.png\" width=\"99%\" /></td>\r\n    </tr>\r\n  </table>\r\n\r\n  <p align=\"center\">\r\n    You are able to easily create two types of horizontal timeline with this jQuery plugin.\r\n    <br>\r\n    <br>\r\n    <a href=\"https://github.com/ka215/jquery.timeline/issues/new?template=bug_report.md\">Report bug</a>\r\n    ·\r\n    <a href=\"https://github.com/ka215/jquery.timeline/issues/new?template=feature_request.md\">Request feature</a>\r\n    ·\r\n    <a href=\"https://ka2.org/\">Blog</a>\r\n  </p>\r\n</p>\r\n\r\n<br>\r\n\r\n## Table of Contents\r\n\r\n- [Quick start](#quick-start)\r\n- [Status](#status)\r\n- [What's included](#whats-included)\r\n- [Usage](#usage)\r\n- [Supported browsers](#supported-browsers)\r\n- [Documentation](#documentation)\r\n- [Example as demonstration](#example-as-demonstration)\r\n- [Contributions](#contributions)\r\n- [Creators](#creators)\r\n- [Copyright and license](#copyright-and-license)\r\n\r\n## Quick start\r\n\r\nSeveral quick start options are available:\r\n\r\n- [Download the latest release.](https://github.com/ka215/jquery.timeline/archive/v2.0.0a3.zip)\r\n- Clone the repository: `git clone https://github.com/ka215/jquery.timeline.git`\r\n\r\n\r\n## Status\r\n\r\n[![Packagist](https://img.shields.io/packagist/l/doctrine/orm.svg)](https://raw.githubusercontent.com/ka215/jquery.timeline/master/LICENSE)\r\n\r\n\r\n## What's included\r\n\r\nWithin the download you'll find the following directories and files, logically grouping common assets and providing compiled and minified variations. You'll see something like this:\r\n\r\n```\r\njquery.timeline/\r\n└── dist/\r\n    ├── jquery.timeline.min.css\r\n    ├── jquery.timeline.min.css.map\r\n    ├── jquery.timeline.min.js\r\n    └── jquery.timeline.min.js.map\r\n```\r\n\r\nWe provide compiled and minified CSS and JS (`jquery.timeline.min.*`). source maps (`jquery.timeline.*.map`) are available for use with certain browsers' developer tools.\r\n\r\n\r\n## Usage\r\n\r\nInclude the installed files into your html:\r\n\r\n```HTML\r\n<link rel=\"stylesheet\" src=\"./jquery.timeline/dist/jquery.timeline.min.css\">\r\n\r\n<script src=\"./jquery.timeline/dist/jquery.timeline.min.js\"></script>\r\n```\r\n\r\nBind this plugin in the scope had imported the jQuery:\r\n\r\n```JavaScript\r\n$('#myTimeline').Timeline()\r\n```\r\n\r\n\r\n## Supported browsers\r\n\r\njQuery.Timeline version 2.x supports the following browsers:\r\n\r\n<table>\r\n<thead>\r\n<tr>\r\n<th colspan=\"6\">PC</th>\r\n<th colspan=\"2\">Mobile</th>\r\n</tr>\r\n<tr>\r\n<th width=\"12.5%\" align=\"center\"><img src=\"https://github.com/ka215/jquery.timeline/blob/develop/docs/imgs/chrome-brands.svg\" width=\"32\" alt=\"Chrome\" /></th>\r\n<th width=\"12.5%\" align=\"center\"><img src=\"https://github.com/ka215/jquery.timeline/blob/develop/docs/imgs/firefox-brands.svg\" width=\"32\" alt=\"Firefox\" /></th>\r\n<th width=\"12.5%\" align=\"center\"><img src=\"https://github.com/ka215/jquery.timeline/blob/develop/docs/imgs/safari-brands.svg\" width=\"32\" alt=\"Safari\" /></th>\r\n<th width=\"12.5%\" align=\"center\"><img src=\"https://github.com/ka215/jquery.timeline/blob/develop/docs/imgs/internet-explorer-brands.svg\" width=\"32\" alt=\"IE\" /></th>\r\n<th width=\"12.5%\" align=\"center\"><img src=\"https://github.com/ka215/jquery.timeline/blob/develop/docs/imgs/edge-brands.svg\" width=\"32\" alt=\"Edge\" /></th>\r\n<th width=\"12.5%\" align=\"center\"><img src=\"https://github.com/ka215/jquery.timeline/blob/develop/docs/imgs/opera-brands.svg\" width=\"32\" alt=\"Opera\" /></th>\r\n<th width=\"12.5%\" align=\"center\"><img src=\"https://github.com/ka215/jquery.timeline/blob/develop/docs/imgs/android-brands.svg\" width=\"32\" alt=\"Android\" /></th>\r\n<th width=\"12.5%\" align=\"center\"><img src=\"https://github.com/ka215/jquery.timeline/blob/develop/docs/imgs/safari-brands.svg\" width=\"32\" alt=\"iOS Safari\" /></th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td name=\"PC:Chrome\" align=\"center\"><b style=\"color:green\">Ok</b></td>\r\n<td name=\"PC:Firefox\" align=\"center\"><b style=\"color:green\">Ok</b></td>\r\n<td name=\"PC:Safari\" align=\"center\"><b style=\"color:#CCC\">?</b></td>\r\n<td name=\"PC:IE\" align=\"center\"><b style=\"color:red\">NG</b></td>\r\n<td name=\"PC:Edge\" align=\"center\"><b style=\"color:green\">Ok</b></td>\r\n<td name=\"PC:Opera\" align=\"center\"><b style=\"color:#CCC\">?</b></td>\r\n<td name=\"MP:Android\" align=\"center\"><b style=\"color:#CCC\">?</b></td>\r\n<td name=\"MP:iOS Safari\" align=\"center\"><b style=\"color:#CCC\">?</b></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\nUnfortunately as for the Internet Explorer etc., several methods of this plugin does not work because JavaScript implementation of browser is too immature. Please note that we are not go to support for these legacy browsers in the future.\r\n\r\n\r\n## Documentation\r\n\r\njQuery.Timeline's documentation, included in this repository in the root directory, is built with [ESDoc](https://esdoc.org/) and publicly hosted on GitHub Pages at <https://ka2.org/>. The docs may also be run locally.\r\n\r\n\r\n### Documentation for previous releases\r\n\r\n- For v2.0.x: (WIP)\r\n- For v1.0.x: <https://raw.githubusercontent.com/ka215/jquery.timeline/v1/README.md>\r\n- For v1.0.x (Japanese): <https://ka2.org/released-jquery-timeline-for-easily-generating-two-type-horizontal-timeline/>\r\n\r\n## Example as demonstration\r\n\r\n(WIP)\r\n\r\n\r\n## Contributions\r\n\r\nYour donations for plugin development will help us.\r\n\r\nDonate URL: <https://ka215.github.io/jquery.timeline/donation.html>\r\n\r\n\r\n## Creators\r\n\r\n**ka2 (Katsuhiko Maeno)**\r\n\r\n- <https://ka2.org/>\r\n\r\n## Copyright and license\r\n\r\nCode and documentation copyright 2011-2018 the [ka2](https://ka2.org/). Code released under the [MIT License](https://raw.githubusercontent.com/ka215/jquery.timeline/master/LICENSE).\r\n\r\n",
    "longname": "C:\\xampp\\htdocs\\factory\\jquery.timeline\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"jquery-timeline\",\r\n  \"description\": \"jQuery plugin for the horizontal timeline creation\",\r\n  \"version\": \"2.0.0a3\",\r\n  \"version_short\": \"2.0\",\r\n  \"keywords\": [\r\n    \"javascript\",\r\n    \"jquery-plugin\",\r\n    \"horizontal\",\r\n    \"timeline\",\r\n    \"mobile\",\r\n    \"web\",\r\n    \"es7\"\r\n  ],\r\n  \"homepage\": \"https://ka215.github.io/jquery.timeline/\",\r\n  \"author\": {\r\n    \"name\": \"ka2 (Katsuhiko Maeno)\",\r\n    \"email\": \"ka2@ka2.org\",\r\n    \"url\": \"https://ka2.org/\"\r\n  },\r\n  \"contributors\": [],\r\n  \"scripts\": {\r\n    \"gulp\": \"node ./node_modules/gulp/bin/gulp.js\",\r\n    \"test\": \"$(npm bin)/mocha src/tests/*.js\",\r\n    \"build\": \"browserify ./src/timeline.js -t babelify -o ./lib/timeline.js\",\r\n    \"watch\": \"node ./node_modules/gulp/bin/gulp.js dev\",\r\n    \"esdoc\": \"./node_modules/.bin/esdoc; open ./docs/index.html\"\r\n  },\r\n  \"style\": \"dist/timeline.min.css\",\r\n  \"sass\": \"src/timeline.scss\",\r\n  \"main\": \"dist/timeline.min.js\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git+https://github.com/ka215/jquery.timeline.git\"\r\n  },\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/ka215/jquery.timeline/issues\"\r\n  },\r\n  \"license\": \"MIT\",\r\n  \"babel\": {\r\n    \"presets\": [\r\n      \"@babel/preset-env\"\r\n    ],\r\n    \"plugins\": [],\r\n    \"env\": {\r\n      \"test\": {\r\n        \"plugins\": []\r\n      }\r\n    }\r\n  },\r\n  \"dependencies\": {\r\n    \"jquery\": \"^3.3.1\"\r\n  },\r\n  \"peerDependencies\": {\r\n    \"jquery\": \"1.9.1 - 3\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.1.2\",\r\n    \"@babel/polyfill\": \"^7.0.0\",\r\n    \"@babel/preset-env\": \"^7.1.0\",\r\n    \"@babel/register\": \"^7.0.0\",\r\n    \"babelify\": \"^10.0.0\",\r\n    \"browserify\": \"^16.2.3\",\r\n    \"esdoc\": \"^1.1.0\",\r\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"fancy-log\": \"^1.3.2\",\r\n    \"gulp\": \"gulpjs/gulp#4.0\",\r\n    \"gulp-autoprefixer\": \"^6.0.0\",\r\n    \"gulp-babel\": \"^8.0.0\",\r\n    \"gulp-clean-css\": \"^3.10.0\",\r\n    \"gulp-eslint\": \"^5.0.0\",\r\n    \"gulp-rename\": \"^1.4.0\",\r\n    \"gulp-sass\": \"^4.0.2\",\r\n    \"gulp-sourcemaps\": \"^2.6.4\",\r\n    \"gulp-uglify\": \"^3.0.1\",\r\n    \"mocha\": \"^5.2.0\",\r\n    \"vinyl-buffer\": \"^1.0.1\",\r\n    \"vinyl-source-stream\": \"^2.0.0\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=6\"\r\n  },\r\n  \"files\": [\r\n    \"lib\"\r\n  ]\r\n}\r\n",
    "longname": "C:\\xampp\\htdocs\\factory\\jquery.timeline\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]