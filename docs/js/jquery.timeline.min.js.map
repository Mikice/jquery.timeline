{"version":3,"sources":["bundle.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_typeof","obj","Symbol","iterator","constructor","prototype","_objectSpread","target","arguments","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","value","defineProperty","configurable","writable","_defineProperties","props","descriptor","NAME","DATA_KEY","EVENT_KEY","PREFIX","JQUERY_NO_CONFLICT","$","fn","Default","type","scale","startDatetime","endDatetime","datetimePrefix","headline","display","title","range","locale","format","hour12","footer","content","zerofillYear","sidebar","sticky","overlay","list","rows","rowHeight","width","height","minGridSize","marginHeight","ruler","top","lines","fontSize","color","background","rangeAlign","naviIcon","left","right","loader","hideScrollbar","eventMeta","showPointer","debug","LimitScaleGrids","millennium","century","decade","lustrum","year","month","week","day","hour","quarterHour","halfHour","minute","second","EventParams","uid","eventId","x","y","bgColor","bdColor","label","image","margin","rangeMeta","size","extend","callback","relation","Event","INITIALIZED","HIDE","SHOW","CLICK_EVENT","FOCUSIN_EVENT","FOCUSOUT_EVENT","MOUSEENTER_POINTER","MOUSELEAVE_POINTER","ClassName","TIMELINE_CONTAINER","TIMELINE_MAIN","TIMELINE_HEADLINE","TIMELINE_HEADLINE_WRAPPER","HEADLINE_TITLE","RANGE_META","RANGE_SPAN","TIMELINE_EVENT_CONTAINER","TIMELINE_BACKGROUND_GRID","TIMELINE_RELATION_LINES","TIMELINE_EVENTS","TIMELINE_EVENT_NODE","TIMELINE_EVENT_LABEL","TIMELINE_EVENT_THUMBNAIL","TIMELINE_RULER_LINES","TIMELINE_RULER_ITEM","TIMELINE_SIDEBAR","TIMELINE_SIDEBAR_MARGIN","TIMELINE_SIDEBAR_ITEM","TIMELINE_FOOTER","TIMELINE_FOOTER_CONTENT","VIEWER_EVENT_TITLE","VIEWER_EVENT_CONTENT","VIEWER_EVENT_META","VIEWER_EVENT_IMAGE_WRAPPER","VIEWER_EVENT_IMAGE","VIEWER_EVENT_TYPE_POINTER","HIDE_SCROLLBAR","RULER_ITEM_ALIGN_LEFT","STICKY_LEFT","OVERLAY","ALIGN_SELF_RIGHT","LOADER_ITEM","Selector","EVENT_NODE","EVENT_VIEW","RULER_TOP","RULER_BOTTOM","TIMELINE_RULER_TOP","TIMELINE_RULER_BOTTOM","LOADER","DEFAULT_EVENTS","Timeline","element","config","instance","Constructor","TypeError","_classCallCheck","this","_config","_getConfig","_element","_selector","_isInitialized","_isCached","_isCompleted","_isShown","_instanceProps","protoProps","staticProps","_len","args","Array","_key3","each","data","charAt","ReferenceError","_init","get","filteredKey","test","_this2","_debug","_elem","tagName","id","className","replace","toLowerCase","_calcVars","_verifyMaxRenderableRange","RangeError","_renderView","afterInitEvent","trigger","off","_loadEvent","_placeEvent","document","on","event","openEvent","_activeEvent","_hoverPointer","_this3","_opts","_props","begin","supplement","_getPluggableDatetime","end","scaleSize","validateNumeric","_getPluggableRows","rowSize","_temp","_verifyScale","_values","values","_averageDays","numRound","reduce","v","_baseDaysOfScale","_totalWidth","days","grids","variableScale","fullwidth","Math","ceil","_prop","fullheight","visibleWidth","visibleHeight","is_empty","round_type","undefined","_date","getFirstDate","dateObj","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","_ms","_higherScale","getHigherScale","getCorrectDatetime","setTime","getTime","_filterScaleKeyName","_tmpDate","getLastDate","str_like_params","params","JSON","parse","stringify","Function","hasOwnProperty","console","warn","fixed_rows","_diffDate","pow","_tl_container","class","style","_tl_main","log","css","addClass","prepend","_createHeadline","append","_createEventContainer","_createRuler","bottom","parseInt","find","_createSideIndex","_createFooter","_display","validateBoolean","_title","_range","_locale","_format","_begin","_end","_tl_headline","_wrapper","_meta","toLocaleString","pos_y","is_dotted","_this4","_actualHeight","_container","_events_bg","_events_lines","_events_body","_cy","ctx_grid","getContext","drawVerticalLine","pos_x","strokeStyle","lineWidth","beginPath","setLineDash","moveTo","lineTo","closePath","stroke","_pos_y","fillStyle","fillRect","_i2","_pos_y2","_bc","_sy","_key","_i3","position","_this5","ruler_line","def","val","is_array","line_height","font_size","text_color","ruler_opts","_fullwidth","_fullheight","_ruler","_ruler_bg","_ruler_body","_finalLines","ctx_ruler","canvas","some","line_scale","idx","_line_y","_line_grids","_grid_x","_correction","_filterVariableScale","_key2","_getGridsPerScale","_createRulerContent","target_scale","scales","retObj","_dt","_days","grid_size","_newKey","_arr","split","getWeek","getDay","_scopes","_scale_grids","_sep","_tmp","_y","_mil","_cen","_dec","_lus","_m","_wd","_d","_w","_h","_min","_s","push","weekday","datetime","toString","_scope","validateString","validateObject","_ruler_lines","_item_width","_line","_ruler_string","getLocaleString","_data_ruler_item","String","attr","html","strWidth","_sticky","_overlay","_sbList","_margin","_list","clone","_item","_content","_tl_footer","date1","date2","absval","_dt1","_dt2","diffMS","retval","lastDayOfMonth","isLeapYear","sum","setMonth","abs","_bd","_ed","_dy","_cd","_i4","_cd2","_i5","_cd3","_i6","_cd4","_i7","_cd5","_that","_event_list","_cnt","events","lastEventId","children","_attr","_visible_width","_visible_height","_showLoader","_evt_params","_getPluggableParams","_one_event","_registerEventData","max","cacheIds","_evt","_i","_this","_chkId","includes","window","sessionStorage","setItem","margin_top","_loader","match","Boolean","str","_fountain_text","text","_custom_loader","prop","remove","event_element","_x","_c","_this6","new_event","generateUniqueID","_relation","_getCoordinateX","start","floor","row","date","coordinate_x","_this7","_evt_container","_relation_lines","getItem","_evt_elem","_createEventNode","_drawRelationLine","sleep","then","_hideLoader","fadeIn","hexToRgbA","backgroundColor","_pointSize","_getPointerSize","_shiftX","_shiftY","_imgSize","meta","_max","min","_size","_this8","ctx_relations","drawLine","_sx","_ex","_ey","evt","_ba","_curveType","_radius","before","after","quadraticCurveTo","bezierCurveTo","_targetId","_targetEvent","_rel","_tl_events","_cache","_events","_uid","_data","removeClass","_base","_z","message","throwType","_msg","_sty","_message","_args","userdata","slice","removeData","removeItem","_movX","scrollWidth","_mapPlacedEvents","sort","compareValues","lastEvent","_events2","targetEvent","_now","_nowX","scrollLeft","_this9","_cacheEvents","targets","_cached","_self","$viewer","_eventData","_label","_image","empty","isArray","valueOf","msec","Promise","resolve","setTimeout","default_value","opt_arg","opt_callback","digit","random","number","_pow","round","hex","alpha","substring","join","datetime_str","normalizeDate","dateString","isNaN","_tempDate","_chk_date","setFullYear","date_str","targetDate","_onejan","higher_scale","date_seed","locales","options","is_toLocalString","name","toLocaleStringSupportsLocales","locale_string","_options","getOrdinal","s","num","zero","substr","getZerofill","_parts","_width","_str_ruler","offsetWidth","order","b","varA","toUpperCase","varB","comparison","Number","_jQueryInterface","noConflict"],"mappings":"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","file":"jquery.timeline.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n//import '@babel/polyfill'\n\n/*!\r\n * jQuery Timeline\r\n * ------------------------\r\n * Version: 2.0.0a1\r\n * Author: Ka2 (https://ka2.org/)\r\n * Repository: https://github.com/ka215/jquery.timeline/tree/develop\r\n * Lisenced: MIT\r\n */\n\n/*\r\n * Constants\r\n */\nvar NAME = \"Timeline\";\nvar VERSION = \"2.0.0a1\";\nvar DATA_KEY = \"jq.timeline\";\nvar EVENT_KEY = \".\".concat(DATA_KEY);\nvar PREFIX = \"jqtl-\";\nvar LOADING_MESSAGE = \"Loading...\";\nvar MIN_POINTER_SIZE = 12; //const DATA_API_KEY       = \".data-api\"\n\nvar JQUERY_NO_CONFLICT = $.fn[NAME];\n/*\r\n * Defaults of plugin options\r\n */\n\nvar Default = {\n  type: \"bar\",\n  // View type of timeline event is either \"bar\" or \"point\"\n  scale: \"day\",\n  // Timetable's minimum level scale is either \"year\", \"month\", \"week\", \"day\", \"hour\", \"minute\"; Enhanced since v2.0.0\n  startDatetime: \"currently\",\n  // Beginning date time of timetable on the timeline. format is ( \"^d{4}(/|-)d{2}(/|-)d{2}\\sd{2}:d{2}:d{2}$\" ) or \"currently\"\n  endDatetime: \"auto\",\n  // Ending date time of timetable on the timeline. format is ( \"^d{4}(/|-)d{2}(/|-)d{2}\\sd{2}:d{2}:d{2}$\" ) or \"auto\"; Added new since v2.0.0\n  datetimePrefix: \"\",\n  // The prefix of the date and time notation displayed in the headline\n  // showHeadline : true, // --> Deprecated since v2.0.0\n  headline: {\n    // Content in the headline; Added new since v2.0.0\n    display: true,\n    // Whether to display headline is instead of former showHeadline\n    title: \"\",\n    range: true,\n    // Hide if false\n    locale: \"en-US\",\n    // This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\n    format: {\n      hour12: false // This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\n\n    }\n  },\n  footer: {\n    // Content in the footer; Added new since v2.0.0\n    display: true,\n    // Whether to display footer\n    content: \"\",\n    range: false,\n    // Visible if true\n    locale: \"en-US\",\n    // This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\n    format: {\n      hour12: false // This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\n\n    }\n  },\n\n  /* datetimeFormat  : { // --> Deprecated since v2.0.0\r\n      full        : \"j M Y\", // or \"Y/m/d\" etc.\r\n      year        : \"Y\",\r\n      month       : \"M Y\", // or \"F\" etc.\r\n      day         : \"D, j M\", // or \"j\" etc.\r\n      years       : \"Y\", \r\n      months      : \"F\", \r\n      days        : \"j\",\r\n      meta        : \"Y/m/d H:i\", // start datetime in meta of Event Detail; or \"g:i A, D F j, Y\"\r\n      metato      : \"\" // --> Deprecated since v2.0.0\r\n  }, */\n  // minuteInterval : 30, // --> Deprecated since v2.0.0\n  zerofillYear: false,\n  // It's outputted at the \"0099\" if true, the \"99\" if false\n  range: 3,\n  // Override the scale range of the timeline to be rendered when endDatetime is undefined or \"auto\"; Enhanced since v2.0.0\n  sidebar: {\n    // Settings of sidebar; Added new since v2.0.0\n    sticky: false,\n    overlay: false,\n    list: []\n  },\n  rows: \"auto\",\n  // Rows of timeline event area. defaults to \"auto\"; Enhanced since v2.0.0\n  rowHeight: 48,\n  // Height of one row\n  width: \"auto\",\n  // Fixed width (pixel) of timeline view. defaults to \"auto\"; Added new since v2.0.0\n  height: \"auto\",\n  // Fixed height (pixel) of timeline view. defaults to \"auto\" ( rows * rowHeight )\n  // minGridPer   : 2, // --> Deprecated since v2.0.0\n  minGridSize: 30,\n  // Override value of minimum size (pixel) of timeline grid; Enhanced since v2.0.0\n  marginHeight: 2,\n  // Margin (pixel) top and bottom of events on the timeline; Added new since v2.0.0\n  ruler: {\n    // Settings of ruler; Added new since v2.0.0\n    top: {\n      // Can define the ruler position to top or bottom and both\n      lines: [],\n      // defaults to this.option.scale; c.g. [ 'year', 'month', 'day', 'weekday' ]\n      height: 30,\n      fontSize: 14,\n      color: \"#777777\",\n      background: \"#FFFFFF\",\n      locale: \"en-US\",\n      // This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\n      format: {\n        hour12: false // This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\n\n      }\n    }\n  },\n  rangeAlign: \"current\",\n  // Possible values are \"left\", \"center\", \"right\", \"current\", \"latest\" and specific event id\n  naviIcon: {\n    // Define class name\n    left: \"\".concat(PREFIX, \"circle-left\"),\n    right: \"\".concat(PREFIX, \"circle-right\")\n  },\n  loader: \"default\",\n  // Custom loader definition, possible values are \"default\", false and selector of loader element; Added new since v2.0.0\n  hideScrollbar: false,\n  // Whether or not to display the scroll bar displayed when the width of the timeline overflows (even if it is set to non-display, it will not function depending on the browser); Added new since v2.0.0\n  eventMeta: {\n    // Display meta of range on event node when the timeline type is \"bar\"; Added new since v2.0.0\n    display: false,\n    scale: \"day\",\n    locale: \"en-US\",\n    // This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\n    format: {\n      hour12: false\n    },\n    // This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\n    content: \"\" // This is value for if you want to show custom content on the meta\n\n  },\n  showPointer: true,\n  // i18n         : {}, // --> Deprecated since v1.0.6\n  // langsDir     : \"./langs/\", // --> Deprecated since v1.0.6\n  // httpLanguage : false, // --> Deprecated since v1.0.6\n  // duration     : 150, // duration of animate as each transition effects; Added v1.0.6 --> Deprecated since v2.0.0\n  debug: false\n  /*\r\n   * Define the limited grid number per scale of timeline\r\n   */\n\n};\nvar LimitScaleGrids = {\n  millennium: 100,\n  // = 100 : 100000 years\n  century: 100 * 5,\n  // = 500 : 50000 years\n  decade: 10 * 50,\n  // = 500 : 5000 years\n  lustrum: 5 * 100,\n  // = 500 : 2500 years\n  year: 500,\n  // = 500 : 500 years\n  month: 12 * 45,\n  // = 540 : 45 years\n  week: 53 * 10,\n  // = 530 : 10 years\n  day: 366,\n  // = 366 : 1 year\n  hour: 24 * 30,\n  // = 720 : 30 days\n  quarterHour: 24 * 4 * 7.5,\n  // = 720 : 7.5 days\n  halfHour: 24 * 2 * 15,\n  // = 720 : 15 days\n  minute: 60 * 12,\n  // = 720 : 12 hours\n  second: 60 * 15 // = 900 : 15 minutes\n\n  /*\r\n  const DefaultType = {\r\n      \r\n  }\r\n  */\n\n  /*\r\n   * Defaults of event parameters on timeline\r\n   */\n\n};\nvar EventParams = {\n  uid: '',\n  eventId: '',\n  x: 0,\n  y: Default.marginHeight,\n  width: Default.minGridSize,\n  height: Default.rowHeight - Default.marginHeight * 2,\n  bgColor: '#E7E7E7',\n  // background color\n  color: '#343A40',\n  // text color\n  bdColor: '#6C757D',\n  // border color\n  label: '',\n  content: '',\n  image: '',\n  margin: Default.marginHeight,\n  rangeMeta: '',\n  size: 'normal',\n  // diameter of pointer\n  extend: {},\n  callback: function callback() {},\n  relation: {\n    /*\r\n    before    : \r\n    after     : \r\n    linesize  : \r\n    linecolor : \r\n    curve     : \r\n    */\n  }\n};\nvar Event = {\n  INITIALIZED: \"initialized\".concat(EVENT_KEY),\n  HIDE: \"hide\".concat(EVENT_KEY),\n  SHOW: \"show\".concat(EVENT_KEY),\n  CLICK_EVENT: \"click.open\".concat(EVENT_KEY),\n  FOCUSIN_EVENT: \"focusin.event\".concat(EVENT_KEY),\n  FOCUSOUT_EVENT: \"focusout.event\".concat(EVENT_KEY),\n  MOUSEENTER_POINTER: \"mouseenter.pointer\".concat(EVENT_KEY),\n  MOUSELEAVE_POINTER: \"mouseleave.pointer\".concat(EVENT_KEY)\n};\nvar ClassName = {\n  TIMELINE_CONTAINER: \"\".concat(PREFIX, \"container\"),\n  TIMELINE_MAIN: \"\".concat(PREFIX, \"main\"),\n  TIMELINE_HEADLINE: \"\".concat(PREFIX, \"headline\"),\n  TIMELINE_HEADLINE_WRAPPER: \"\".concat(PREFIX, \"headline-wrapper\"),\n  HEADLINE_TITLE: \"\".concat(PREFIX, \"timeline-title\"),\n  RANGE_META: \"\".concat(PREFIX, \"range-meta\"),\n  RANGE_SPAN: \"\".concat(PREFIX, \"range-span\"),\n  TIMELINE_EVENT_CONTAINER: \"\".concat(PREFIX, \"event-container\"),\n  TIMELINE_BACKGROUND_GRID: \"\".concat(PREFIX, \"bg-grid\"),\n  TIMELINE_RELATION_LINES: \"\".concat(PREFIX, \"relation-lines\"),\n  TIMELINE_EVENTS: \"\".concat(PREFIX, \"events\"),\n  TIMELINE_EVENT_NODE: \"\".concat(PREFIX, \"event-node\"),\n  TIMELINE_EVENT_LABEL: \"\".concat(PREFIX, \"event-label\"),\n  TIMELINE_EVENT_THUMBNAIL: \"\".concat(PREFIX, \"event-thumbnail\"),\n  TIMELINE_RULER_LINES: \"\".concat(PREFIX, \"ruler-line-rows\"),\n  TIMELINE_RULER_ITEM: \"\".concat(PREFIX, \"ruler-line-item\"),\n  TIMELINE_SIDEBAR: \"\".concat(PREFIX, \"side-index\"),\n  TIMELINE_SIDEBAR_MARGIN: \"\".concat(PREFIX, \"side-index-margin\"),\n  TIMELINE_SIDEBAR_ITEM: \"\".concat(PREFIX, \"side-index-item\"),\n  TIMELINE_FOOTER: \"\".concat(PREFIX, \"footer\"),\n  TIMELINE_FOOTER_CONTENT: \"\".concat(PREFIX, \"footer-content\"),\n  VIEWER_EVENT_TITLE: \"\".concat(PREFIX, \"event-title\"),\n  VIEWER_EVENT_CONTENT: \"\".concat(PREFIX, \"event-content\"),\n  VIEWER_EVENT_META: \"\".concat(PREFIX, \"event-meta\"),\n  VIEWER_EVENT_IMAGE_WRAPPER: \"\".concat(PREFIX, \"event-image-wrapper\"),\n  VIEWER_EVENT_IMAGE: \"\".concat(PREFIX, \"event-image\"),\n  VIEWER_EVENT_TYPE_POINTER: \"\".concat(PREFIX, \"event-type-pointer\"),\n  HIDE_SCROLLBAR: \"\".concat(PREFIX, \"hide-scrollbar\"),\n  HIDE: \"\".concat(PREFIX, \"hide\"),\n  RULER_ITEM_ALIGN_LEFT: \"\".concat(PREFIX, \"rli-left\"),\n  STICKY_LEFT: \"\".concat(PREFIX, \"sticky-left\"),\n  OVERLAY: \"\".concat(PREFIX, \"overlay\"),\n  ALIGN_SELF_RIGHT: \"\".concat(PREFIX, \"align-self-right\"),\n  LOADER_ITEM: \"\".concat(PREFIX, \"loading\")\n};\nvar Selector = {\n  EVENT_NODE: \".\".concat(PREFIX, \"event-node\"),\n  EVENT_VIEW: \".timeline-event-view, .\".concat(PREFIX, \"event-view\"),\n  RULER_TOP: \".\".concat(PREFIX, \"ruler-top\"),\n  RULER_BOTTOM: \".\".concat(PREFIX, \"ruler-bottom\"),\n  TIMELINE_CONTAINER: \".\".concat(ClassName.TIMELINE_CONTAINER),\n  TIMELINE_RULER_TOP: \".\".concat(PREFIX, \"ruler-top\"),\n  TIMELINE_RULER_BOTTOM: \".\".concat(PREFIX, \"ruler-bottom\"),\n  TIMELINE_RELATION_LINES: \".\".concat(ClassName.TIMELINE_RELATION_LINES),\n  TIMELINE_EVENTS: \".\".concat(ClassName.TIMELINE_EVENTS),\n  TIMELINE_SIDEBAR_ITEM: \".\".concat(ClassName.TIMELINE_SIDEBAR_ITEM),\n  TIMELINE_EVENT_NODE: \".\".concat(ClassName.TIMELINE_EVENT_NODE),\n  VIEWER_EVENT_TYPE_POINTER: \".\".concat(ClassName.VIEWER_EVENT_TYPE_POINTER),\n  LOADER: \"#\".concat(PREFIX, \"loader\"),\n  DEFAULT_EVENTS: \".timeline-events\"\n  /*\r\n   * The plugin core class of the jQuery Timeline as controller\r\n   */\n\n};\n\nvar Timeline =\n/*#__PURE__*/\nfunction () {\n  function Timeline(element, config) {\n    _classCallCheck(this, Timeline);\n\n    this._config = this._getConfig(config);\n    this._element = element;\n    this._selector = null;\n    this._isInitialized = false;\n    this._isCached = false;\n    this._isCompleted = false;\n    this._isShown = false;\n    this._instanceProps = {};\n  } // Getters\n\n\n  _createClass(Timeline, [{\n    key: \"_getConfig\",\n    // Private\n\n    /*\r\n     * @private: Define the default options of this plugin\r\n     */\n    value: function _getConfig(config) {\n      config = _objectSpread({}, Default, config);\n      return config;\n    }\n    /*\r\n     * @private: Filter the scale key name for LimitScaleGrids\r\n     */\n\n  }, {\n    key: \"_filterScaleKeyName\",\n    value: function _filterScaleKeyName(key) {\n      var filteredKey = null;\n\n      switch (true) {\n        case /^quarter-?(|hour)$/i.test(key):\n          filteredKey = 'quarterHour';\n          break;\n\n        case /^half-?(|hour)$/i.test(key):\n          filteredKey = 'halfHour';\n          break;\n\n        default:\n          filteredKey = key;\n      }\n\n      return filteredKey;\n    }\n    /*\r\n     * @private: Initialize the plugin\r\n     */\n\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      var _this2 = this;\n\n      this._debug('_init');\n\n      var _elem = this._element,\n          _selector = \"\".concat(_elem.tagName).concat(_elem.id ? \"#\".concat(_elem.id) : '').concat(_elem.className ? \".\".concat(_elem.className.replace(/\\s/g, '.')) : '');\n\n      this._selector = _selector.toLowerCase();\n\n      if (this._isInitialized || this._isCompleted) {\n        return;\n      }\n\n      this._calcVars();\n\n      if (!this._verifyMaxRenderableRange()) {\n        throw new RangeError(\"Timeline display period exceeds maximum renderable range.\");\n      }\n\n      if (!this._isInitialized) {\n        this._renderView();\n\n        var afterInitEvent = $.Event(Event.INITIALIZED, {\n          _elem: _elem\n        });\n        $(_elem).trigger(afterInitEvent);\n        $(_elem).off(Event.INITIALIZED);\n      }\n\n      if (!this._isCached) {\n        this._loadEvent();\n      }\n\n      if (this._isCached) {\n        this._placeEvent();\n      } // Assign events for the timeline\n\n\n      $(document).on(Event.CLICK_EVENT, \"\".concat(this._selector, \" \").concat(Selector.EVENT_NODE), function (event) {\n        return _this2.openEvent(event);\n      });\n      $(_elem).on(Event.FOCUSIN_EVENT, Selector.TIMELINE_EVENT_NODE, function (event) {\n        return _this2._activeEvent(event);\n      });\n      $(_elem).on(Event.FOCUSOUT_EVENT, Selector.TIMELINE_EVENT_NODE, function (event) {\n        return _this2._activeEvent(event);\n      }); //console.log( '!_init:', )\n\n      if (/^point(|er)$/i.test(this._config.type)) {\n        $(_elem).on(Event.MOUSEENTER_POINTER, Selector.VIEWER_EVENT_TYPE_POINTER, function (event) {\n          return _this2._hoverPointer(event);\n        });\n        $(_elem).on(Event.MOUSELEAVE_POINTER, Selector.VIEWER_EVENT_TYPE_POINTER, function (event) {\n          return _this2._hoverPointer(event);\n        });\n      }\n\n      this._isCompleted = true;\n    }\n    /*\r\n     * @private: Calculate each properties of the timeline instance\r\n     */\n\n  }, {\n    key: \"_calcVars\",\n    value: function _calcVars() {\n      var _this3 = this;\n\n      var _opts = this._config,\n          _props = {};\n      _props.begin = this.supplement(null, this._getPluggableDatetime(_opts.startDatetime, 'first'));\n      _props.end = this.supplement(null, this._getPluggableDatetime(_opts.endDatetime, 'last'));\n      _props.scaleSize = this.supplement(null, _opts.minGridSize, this.validateNumeric);\n      _props.rows = this._getPluggableRows();\n      _props.rowSize = this.supplement(null, _opts.rowHeight, this.validateNumeric);\n      _props.width = this.supplement(null, _opts.width, this.validateNumeric);\n      _props.height = this.supplement(null, _opts.height, this.validateNumeric);\n      this._instanceProps = _props; // pre-cache\n\n      if (/^(year|month)s?$/i.test(_opts.scale)) {\n        // For scales where the value of quantity per unit is variable length (:> 単位あたりの量の値が可変長であるスケールの場合\n        var _temp = this._verifyScale(_opts.scale),\n            _values = Object.values(_temp),\n            _averageDays = this.numRound(_values.reduce(function (a, v) {\n          return a + v;\n        }, 0) / _values.length, 4),\n            // Average days within the range\n        _baseDaysOfScale = /^years?$/i.test(_opts.scale) ? 365 : 30,\n            _totalWidth = 0; //console.log( '!', _opts.scale, _temp, _vals )\n\n\n        _values.forEach(function (days) {\n          _totalWidth += _this3.numRound(days * _props.scaleSize / _baseDaysOfScale, 2);\n        });\n\n        _props.scale = _averageDays * (24 * 60 * 60 * 1000);\n        _props.grids = _values.length;\n        _props.variableScale = _temp;\n        _props.fullwidth = _totalWidth;\n      } else {\n        // In case of fixed length scale (:> 固定長スケールの場合\n        _props.scale = this._verifyScale(_opts.scale);\n        _props.grids = Math.ceil((_props.end - _props.begin) / _props.scale);\n        _props.variableScale = null;\n        _props.fullwidth = _props.grids * _props.scaleSize;\n      }\n\n      _props.fullheight = _props.rows * _props.rowSize; // Define visible size according to full size of timeline (:> タイムラインのフルサイズに準じた可視サイズを定義\n\n      _props.visibleWidth = _props.width > 0 ? \"\".concat(_props.width <= _props.fullwidth ? _props.width : _props.fullwidth, \"px\") : '100%';\n      _props.visibleHeight = _props.height > 0 ? \"\".concat(_props.height <= _props.fullheight ? _props.height : _props.fullheight, \"px\") : 'auto';\n\n      for (var _prop in _props) {\n        if (_prop === 'width' || _prop === 'height' || _prop === 'variableScale') {\n          continue;\n        }\n\n        if (this.is_empty(_props[_prop])) {\n          throw new TypeError(\"Property \\\"\".concat(_prop, \"\\\" cannot set because undefined or invalid variable.\"));\n        }\n      }\n\n      if (_props.fullwidth < 2 || _props.fullheight < 2) {\n        throw new TypeError(\"The range of the timeline to be rendered is incorrect.\");\n      }\n\n      this._instanceProps = _props;\n    }\n    /*\r\n     * @private: Retrieve the pluggable datetime as milliseconds from specified keyword (:> 指定キーから作成されたプラガブルな日時をミリ秒単位で取得する\r\n     */\n\n  }, {\n    key: \"_getPluggableDatetime\",\n    value: function _getPluggableDatetime(key) {\n      var round_type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      var _opts = this._config,\n          _date = null,\n          getFirstDate = function getFirstDate(dateObj, scale) {\n        switch (true) {\n          case /^millenniums?|millennia$/i.test(scale):\n          case /^century$/i.test(scale):\n          case /^dec(ade|ennium)$/i.test(scale):\n          case /^lustrum$/i.test(scale):\n          case /^years?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), 0, 1);\n\n          case /^months?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), dateObj.getMonth(), 1);\n\n          case /^(week|day)s?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate());\n\n          case /^(|half|quarter)-?hours?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours());\n\n          case /^minutes?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes());\n\n          case /^seconds?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes(), dateObj.getSeconds());\n        }\n      },\n          getLastDate = function getLastDate(dateObj, scale) {\n        var _tmpDate;\n\n        switch (true) {\n          case /^millenniums?|millennia$/i.test(scale):\n          case /^century$/i.test(scale):\n          case /^dec(ade|ennium)$/i.test(scale):\n          case /^lustrum$/i.test(scale):\n          case /^years?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear() + 1, 0, 1);\n            break;\n\n          case /^months?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth() + 1, 1);\n            break;\n\n          case /^(week|day)s?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate() + 1);\n            break;\n\n          case /^(|half|quarter)-?hours?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours() + 1);\n            break;\n\n          case /^minutes?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes() + 1);\n            break;\n\n          case /^seconds?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes(), dateObj.getSeconds() + 1);\n            break;\n        }\n\n        return new Date(_tmpDate.getTime() - 1);\n      };\n\n      switch (true) {\n        case /^current(|ly)$/i.test(key):\n          _date = new Date(); //console.log( '!_getPluggableDatetime::currently:', _opts.scale, this.getHigherScale( _opts.scale ), key, _date.getTime() )\n\n          break;\n\n        case /^auto$/i.test(key):\n          {\n            var _ms = null,\n                _higherScale = this.getHigherScale(_opts.scale);\n\n            if (/^current(|ly)$/i.test(_opts.startDatetime)) {\n              _date = new Date(); //if ( /^(year|month)s?$/i.test( _opts.scale ) ) {\n\n              _date = getFirstDate(_date, _opts.scale); //}\n            } else {\n              _date = this.getCorrectDatetime(_opts.startDatetime);\n            }\n\n            if (_opts.range || _opts.range > 0) {\n              if (/^years?$/i.test(_higherScale)) {\n                _ms = 365.25 * 24 * 60 * 60 * 1000;\n              } else if (/^months?$/i.test(_higherScale)) {\n                _ms = 30.44 * 24 * 60 * 60 * 1000;\n              } else {\n                _ms = this._verifyScale(_higherScale);\n              }\n\n              _date.setTime(_date.getTime() + _ms * _opts.range);\n            } else {\n              if (/^years?$/i.test(_opts.scale)) {\n                _ms = 365.25 * 24 * 60 * 60 * 1000;\n              } else if (/^months?$/i.test(_opts.scale)) {\n                _ms = 30.44 * 24 * 60 * 60 * 1000;\n              } else {\n                _ms = this._verifyScale(_opts.scale);\n              }\n\n              _date.setTime(_date.getTime() + _ms * LimitScaleGrids[this._filterScaleKeyName(_opts.scale)]);\n            } // console.log( '!_getPluggableDatetime::auto:', _opts.scale, this.getHigherScale( _opts.scale ), key, _date.getTime() )\n\n\n            break;\n          }\n\n        default:\n          _date = this.getCorrectDatetime(key);\n          break;\n      } //if ( ! this.is_empty( round_type ) && /^(year|month|day)s?$/i.test( _opts.scale ) ) {\n\n\n      if (!this.is_empty(round_type)) {\n        if ('first' === round_type) {\n          _date = getFirstDate(_date, _opts.scale);\n        } else if ('last' === round_type) {\n          _date = getLastDate(_date, _opts.scale);\n        }\n      }\n\n      return _date.getTime();\n    }\n    /*\r\n     * @private: Retrieve the pluggable parameter as an object (:> プラガブルなパラメータオブジェクトを取得する\r\n     */\n\n  }, {\n    key: \"_getPluggableParams\",\n    value: function _getPluggableParams(str_like_params) {\n      var params = {};\n\n      if (typeof str_like_params === 'string' && str_like_params) {\n        try {\n          params = JSON.parse(JSON.stringify(new Function(\"return \".concat(str_like_params))()));\n\n          if (params.hasOwnProperty('extend')) {\n            params.extend = JSON.parse(JSON.stringify(new Function(\"return \".concat(params.extend))()));\n          }\n        } catch (e) {\n          console.warn('Can not parse to object therefor invalid param.');\n        }\n      }\n\n      return params;\n    }\n    /*\r\n     * @private: Retrieve the pluggable rows of the timeline (:> プラガブルなタイムラインの行数を取得する\r\n     */\n\n  }, {\n    key: \"_getPluggableRows\",\n    value: function _getPluggableRows() {\n      var _opts = this._config,\n          fixed_rows = this.supplement('auto', _opts.rows, this.validateNumeric);\n\n      if (fixed_rows === 'auto') {\n        fixed_rows = _opts.sidebar.list.length;\n      }\n\n      return fixed_rows > 0 ? fixed_rows : 1;\n    }\n    /*\r\n     * @private: Verify the allowed scale, then retrieve that scale's millisecond if allowed (:> 許容スケールかを確認し、許可時はそのスケールのミリ秒を取得する\r\n     */\n\n  }, {\n    key: \"_verifyScale\",\n    value: function _verifyScale(scale) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _ms = -1;\n\n      if (typeof scale === 'undefined' || typeof scale !== 'string') {\n        return false;\n      }\n\n      switch (true) {\n        case /^millisec(|ond)s?$/i.test(scale):\n          // Millisecond (:> ミリ秒\n          _ms = 1;\n          break;\n\n        case /^seconds?$/i.test(scale):\n          // Second (:> 秒\n          _ms = 1000;\n          break;\n\n        case /^minutes?$/i.test(scale):\n          // Minute (:> 分\n          _ms = 60 * 1000;\n          break;\n\n        case /^quarter-?(|hour)$/i.test(scale):\n          // Quarter of an hour (:> 15分\n          _ms = 15 * 60 * 1000;\n          break;\n\n        case /^half-?(|hour)$/i.test(scale):\n          // Half an hour (:> 30分\n          _ms = 30 * 60 * 1000;\n          break;\n\n        case /^hours?$/i.test(scale):\n          // Hour (:> 時（時間）\n          _ms = 60 * 60 * 1000;\n          break;\n\n        case /^days?$/i.test(scale):\n          // Day (:> 日\n          _ms = 24 * 60 * 60 * 1000;\n          break;\n\n        case /^weeks?$/i.test(scale):\n          // Week (:> 週\n          _ms = 7 * 24 * 60 * 60 * 1000;\n          break;\n\n        case /^months?$/i.test(scale):\n          // Month (is the variable length scale) (:> 月（可変長スケール）\n          //console.log( '!_verifyScale::month:', this._instanceProps, _opts.scale )\n          if (/^(year|month)s?$/i.test(_opts.scale)) {\n            return this._diffDate(_props.begin, _props.end, scale);\n          } else {\n            _ms = 30.44 * 24 * 60 * 60 * 1000;\n            break;\n          }\n\n        case /^years?$/i.test(scale):\n          // Year (is the variable length scale) (:> 年（可変長スケール）\n          if (/^(year|month)s?$/i.test(_opts.scale)) {\n            return this._diffDate(_props.begin, _props.end, scale);\n          } else {\n            _ms = 365.25 * 24 * 60 * 60 * 1000;\n            break;\n          }\n\n        case /^lustrum$/i.test(scale):\n          // Lustrum (:> 五年紀\n          _ms = 3.1536 * Math.pow(10, 8) / 2 * 1000;\n          break;\n\n        case /^dec(ade|ennium)$/i.test(scale):\n          // Decade (:> 十年紀\n          _ms = 3.1536 * Math.pow(10, 8) * 1000;\n          break;\n\n        case /^century$/i.test(scale):\n          // Century (:> 世紀（百年紀）\n          _ms = 3155760000 * 1000;\n          break;\n\n        case /^millenniums?|millennia$/i.test(scale):\n          // Millennium (:> 千年紀\n          _ms = 3.1536 * Math.pow(10, 10) * 1000;\n          break;\n\n        default:\n          console.warn('Specified an invalid scale.');\n          _ms = -1;\n      }\n\n      return _ms > 0 ? _ms : false;\n    }\n    /*\r\n     * @private: Verify the display period of the timeline does not exceed the maximum renderable range (:> タイムラインの表示期間が最大描画可能範囲を超過していないか検証する\r\n     */\n\n  }, {\n    key: \"_verifyMaxRenderableRange\",\n    value: function _verifyMaxRenderableRange() {\n      // console.log( this._instanceProps.grids, '/', LimitScaleGrids[this._filterScaleKeyName( this._config.scale )] )\n      return this._instanceProps.grids <= LimitScaleGrids[this._filterScaleKeyName(this._config.scale)];\n    }\n    /*\r\n     * @private: Render the view of timeline container\r\n     */\n\n  }, {\n    key: \"_renderView\",\n    value: function _renderView() {\n      this._debug('_renderView');\n\n      var _elem = this._element,\n          _opts = this._config,\n          _props = this._instanceProps,\n          _tl_container = $('<div></div>', {\n        class: ClassName.TIMELINE_CONTAINER,\n        style: \"width: \".concat(_props.visibleWidth, \"; height: \").concat(_props.visibleHeight, \";\")\n      }),\n          _tl_main = $('<div></div>', {\n        class: ClassName.TIMELINE_MAIN\n      }); //console.log( _elem, _opts, _props )\n\n\n      if ($(_elem).length == 0) {\n        throw new TypeError('Does not exist the element to render a timeline container.');\n      }\n\n      if (_opts.debug) {\n        console.log(\"Timeline:{ fullWidth: \".concat(_props.fullwidth, \"px,\"), \"fullHeight: \".concat(_props.fullheight, \"px,\"), \"viewWidth: \".concat(_props.visibleWidth), \"viewHeight: \".concat(_props.visibleHeight, \" }\"));\n      }\n\n      $(_elem).css('position', 'relative'); // initialize; not .empty()\n\n      if (_opts.hideScrollbar) {\n        _tl_container.addClass(ClassName.HIDE_SCROLLBAR);\n      } // Create the timeline headline (:> タイムラインの見出しを生成\n\n\n      $(_elem).prepend(this._createHeadline()); // Create the timeline event container (:> タイムラインのイベントコンテナを生成\n\n      _tl_main.append(this._createEventContainer()); // Create the timeline ruler (:> タイムラインの目盛を生成\n\n\n      if (!this.is_empty(_opts.ruler.top)) {\n        _tl_main.prepend(this._createRuler('top'));\n      }\n\n      if (!this.is_empty(_opts.ruler.bottom)) {\n        _tl_main.append(this._createRuler('bottom'));\n      } // Create the timeline side index (:> タイムラインのサイドインデックスを生成\n\n\n      var margin = {\n        top: parseInt(_tl_main.find(Selector.RULER_TOP).height(), 10) - 1,\n        bottom: parseInt(_tl_main.find(Selector.RULER_BOTTOM).height(), 10) - 1\n      };\n\n      if (_opts.sidebar.list.length > 0) {\n        _tl_container.prepend(this._createSideIndex(margin));\n      } // Append the timeline container in the timeline element (:> タイムライン要素にタイムラインコンテナを追加\n\n\n      _tl_container.append(_tl_main);\n\n      $(_elem).append(_tl_container); // Create the timeline footer (:> タイムラインのフッタを生成\n\n      $(_elem).append(this._createFooter());\n      this._isShown = true;\n    }\n    /*\r\n     * @private: Create the headline of the timeline (:> タイムラインの見出しを作成する\r\n     */\n\n  }, {\n    key: \"_createHeadline\",\n    value: function _createHeadline() {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _display = this.supplement(Default.headline.display, _opts.headline.display, this.validateBoolean),\n          _title = this.supplement(null, _opts.headline.title),\n          _range = this.supplement(Default.headline.range, _opts.headline.range, this.validateBoolean),\n          _locale = this.supplement(Default.headline.locale, _opts.headline.locale),\n          _format = this.supplement(Default.headline.format, _opts.headline.format),\n          _begin = this.supplement(null, _props.begin),\n          _end = this.supplement(null, _props.end),\n          _tl_headline = $('<div></div>', {\n        class: ClassName.TIMELINE_HEADLINE\n      }),\n          _wrapper = $('<div></div>', {\n        class: ClassName.TIMELINE_HEADLINE_WRAPPER\n      }); // console.log( '!_createHeadline:', _opts )\n\n\n      if (_title) {\n        _wrapper.append(\"<h3 class=\\\"\".concat(ClassName.HEADLINE_TITLE, \"\\\">\").concat(_opts.headline.title, \"</h3>\"));\n      }\n\n      if (_range) {\n        if (_begin && _end) {\n          var _meta = \"\".concat(new Date(_begin).toLocaleString(_locale, _format), \"<span class=\\\"\").concat(ClassName.RANGE_SPAN, \"\\\"></span>\").concat(new Date(_end).toLocaleString(_locale, _format)); //let _meta = this.getCorrectDatetime( _begin ).toLocaleString( _locale, _format ) +'<span class=\"jqtl-range-span\"></span>'+ this.getCorrectDatetime( _end ).toLocaleString( _locale, _format )\n\n\n          _wrapper.append(\"<div class=\\\"\".concat(ClassName.RANGE_META, \"\\\">\").concat(_meta, \"</div>\"));\n        }\n      }\n\n      if (!_display) {\n        _tl_headline.addClass(ClassName.HIDE);\n      }\n\n      return _tl_headline.append(_wrapper);\n    }\n    /*\r\n     * @private: Create the event container of the timeline (:> タイムラインのイベントコンテナを作成する\r\n     */\n\n  }, {\n    key: \"_createEventContainer\",\n    value: function _createEventContainer() {\n      var _this4 = this;\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _actualHeight = _props.fullheight + Math.ceil(_props.rows / 2),\n          _container = $('<div></div>', {\n        class: ClassName.TIMELINE_EVENT_CONTAINER,\n        style: \"height:\".concat(_actualHeight, \"px;\")\n      }),\n          _events_bg = $(\"<canvas width=\\\"\".concat(_props.fullwidth - 1, \"\\\" height=\\\"\").concat(_actualHeight, \"\\\" class=\\\"\").concat(ClassName.TIMELINE_BACKGROUND_GRID, \"\\\"></canvas>\")),\n          _events_lines = $(\"<canvas width=\\\"\".concat(_props.fullwidth - 1, \"\\\" height=\\\"\").concat(_actualHeight, \"\\\" class=\\\"\").concat(ClassName.TIMELINE_RELATION_LINES, \"\\\"></canvas>\")),\n          _events_body = $('<div></div>', {\n        class: ClassName.TIMELINE_EVENTS\n      }),\n          _cy = 0,\n          ctx_grid = _events_bg[0].getContext('2d'),\n          drawRowRect = function drawRowRect(pos_y, color) {\n        color = _this4.supplement('#FFFFFF', color); // console.log( 0, pos_y, _fullwidth, _size_row, color )\n\n        ctx_grid.fillStyle = color;\n        ctx_grid.fillRect(0, pos_y + 0.5, _props.fullwidth, _props.rowSize + 1.5);\n        ctx_grid.stroke();\n      },\n          drawHorizontalLine = function drawHorizontalLine(pos_y, is_dotted) {\n        is_dotted = _this4.supplement(false, is_dotted); // console.log( pos_y, is_dotted )\n\n        ctx_grid.strokeStyle = 'rgba( 51, 51, 51, 0.1 )';\n        ctx_grid.lineWidth = 1;\n        ctx_grid.filter = 'url(#crisp)';\n        ctx_grid.beginPath();\n\n        if (is_dotted) {\n          ctx_grid.setLineDash([1, 2]);\n        } else {\n          ctx_grid.setLineDash([]);\n        }\n\n        ctx_grid.moveTo(0, pos_y + 0.5);\n        ctx_grid.lineTo(_props.fullwidth, pos_y + 0.5);\n        ctx_grid.closePath();\n        ctx_grid.stroke();\n      },\n          drawVerticalLine = function drawVerticalLine(pos_x, is_dotted) {\n        is_dotted = _this4.supplement(false, is_dotted); // console.log( pos_x, is_dotted )\n\n        ctx_grid.strokeStyle = 'rgba( 51, 51, 51, 0.025 )';\n        ctx_grid.lineWidth = 1;\n        ctx_grid.filter = 'url(#crisp)';\n        ctx_grid.beginPath();\n\n        if (is_dotted) {\n          ctx_grid.setLineDash([1, 2]);\n        } else {\n          ctx_grid.setLineDash([]);\n        }\n\n        ctx_grid.moveTo(pos_x - 0.5, 0);\n        ctx_grid.lineTo(pos_x - 0.5, _props.fullheight);\n        ctx_grid.closePath();\n        ctx_grid.stroke();\n      };\n\n      _cy = 0;\n\n      for (var i = 0; i < _props.rows; i++) {\n        _cy += i % 2 == 0 ? 1 : 0;\n\n        var _pos_y = i * _props.rowSize + _cy;\n\n        drawRowRect(_pos_y, i % 2 == 0 ? '#FEFEFE' : '#F8F8F8');\n      }\n\n      _cy = 0;\n\n      for (var _i2 = 1; _i2 < _props.rows; _i2++) {\n        _cy += _i2 % 2 == 0 ? 1 : 0;\n\n        var _pos_y2 = _i2 * _props.rowSize + _cy;\n\n        drawHorizontalLine(_pos_y2, true);\n      }\n\n      if (/^(year|month)s?$/i.test(_opts.scale)) {\n        // For scales where the value of quantity per unit is variable length (:> 単位あたりの量の値が可変長であるスケールの場合\n        var _bc = /^years?$/i.test(_opts.scale) ? 365 : 30,\n            _sy = 0;\n\n        for (var _key in _props.variableScale) {\n          _sy += this.numRound(_props.variableScale[_key] * _props.scaleSize / _bc, 2);\n          drawVerticalLine(_sy, false);\n        }\n      } else {\n        // In case of fixed length scale (:> 固定長スケールの場合\n        for (var _i3 = 1; _i3 < _props.grids; _i3++) {\n          drawVerticalLine(_i3 * _props.scaleSize, false);\n        }\n      }\n\n      return _container.append(_events_bg).append(_events_lines).append(_events_body);\n    }\n    /*\r\n     * @private: Create the ruler of the timeline (:> タイムラインの目盛を作成する\r\n     */\n\n  }, {\n    key: \"_createRuler\",\n    value: function _createRuler(position) {\n      var _this5 = this;\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          ruler_line = this.supplement([_opts.scale], _opts.ruler[position].lines, function (def, val) {\n        return _this5.is_array(val) && val.length > 0 ? val : def;\n      }),\n          line_height = this.supplement(Default.ruler.top.height, _opts.ruler[position].height),\n          font_size = this.supplement(Default.ruler.top.fontSize, _opts.ruler[position].fontSize),\n          text_color = this.supplement(Default.ruler.top.color, _opts.ruler[position].color),\n          background = this.supplement(Default.ruler.top.background, _opts.ruler[position].background),\n          locale = this.supplement(Default.ruler.top.locale, _opts.ruler[position].locale),\n          format = this.supplement(Default.ruler.top.format, _opts.ruler[position].format),\n          ruler_opts = {\n        lines: ruler_line,\n        height: line_height,\n        fontSize: font_size,\n        color: text_color,\n        background: background,\n        locale: locale,\n        format: format\n      },\n          _fullwidth = _props.fullwidth - 1,\n          _fullheight = ruler_line.length * line_height,\n          _ruler = $('<div></div>', {\n        class: \"\".concat(PREFIX, \"ruler-\").concat(position),\n        style: \"height:\".concat(_fullheight, \"px;\")\n      }),\n          _ruler_bg = $(\"<canvas class=\\\"\".concat(PREFIX, \"ruler-bg-\").concat(position, \"\\\" width=\\\"\").concat(_fullwidth, \"\\\" height=\\\"\").concat(_fullheight, \"\\\"></canvas>\")),\n          _ruler_body = $('<div></div>', {\n        class: \"\".concat(PREFIX, \"ruler-content-\").concat(position)\n      }),\n          _finalLines = 0,\n          ctx_ruler = _ruler_bg[0].getContext('2d'); //console.log( grids, size_per_grid, scale, begin, min_scale, ruler, position, ruler_line, line_height, ctx_ruler.canvas.width, ctx_ruler.canvas.height )\n      // Draw background of ruler\n\n\n      ctx_ruler.fillStyle = background;\n      ctx_ruler.fillRect(0, 0, ctx_ruler.canvas.width, ctx_ruler.canvas.height); // Draw stroke of ruler\n\n      ctx_ruler.strokeStyle = 'rgba( 51, 51, 51, 0.1 )';\n      ctx_ruler.lineWidth = 1;\n      ctx_ruler.filter = 'url(#crisp)';\n      ruler_line.some(function (line_scale, idx) {\n        if (/^(quarter|half)-?(|hour)$/i.test(line_scale)) {\n          return true; // break\n        }\n\n        ctx_ruler.beginPath(); // Draw rows\n        //let _line_x = position === 'top' ? 0 : ctx_ruler.canvas.width,\n\n        var _line_y = position === 'top' ? line_height * (idx + 1) - 0.5 : line_height * idx + 0.5;\n\n        ctx_ruler.moveTo(0, _line_y);\n        ctx_ruler.lineTo(ctx_ruler.canvas.width, _line_y); // Draw cols\n\n        var _line_grids = null,\n            _grid_x = 0,\n            _correction = -1.5;\n\n        if (/^(year|month)s?$/i.test(_opts.scale)) {\n          // For scales where the value of quantity per unit is variable length (:> 単位あたりの量の値が可変長であるスケールの場合\n          _line_grids = _this5._filterVariableScale(line_scale);\n\n          for (var _key in _line_grids) {\n            _grid_x += _this5.numRound(_line_grids[_key], 2);\n            ctx_ruler.moveTo(_grid_x + _correction, position === 'top' ? _line_y - line_height : _line_y);\n            ctx_ruler.lineTo(_grid_x + _correction, position === 'top' ? _line_y : _line_y + line_height);\n          }\n        } else {\n          // In case of fixed length scale (:> 固定長スケールの場合\n          _line_grids = _this5._getGridsPerScale(line_scale);\n\n          for (var _key2 in _line_grids) {\n            if (_this5.is_empty(_key2) || _line_grids[_key2] >= _props.grids) {\n              break;\n            }\n\n            var _grid_width = _line_grids[_key2] * _props.scaleSize;\n\n            _grid_x += _grid_width;\n\n            if (Math.ceil(_grid_x) - _correction >= ctx_ruler.canvas.width) {\n              break;\n            }\n\n            ctx_ruler.moveTo(_grid_x + _correction, position === 'top' ? _line_y - line_height : _line_y);\n            ctx_ruler.lineTo(_grid_x + _correction, position === 'top' ? _line_y : _line_y + line_height);\n          }\n        }\n\n        ctx_ruler.closePath();\n        ctx_ruler.stroke();\n\n        _ruler_body.append(_this5._createRulerContent(_line_grids, line_scale, ruler_opts));\n\n        _finalLines++;\n      });\n\n      if (ruler_line.length != _finalLines) {\n        _ruler.css('height', \"\".concat(_finalLines * line_height, \"px\"));\n      }\n\n      return _ruler.append(_ruler_bg).append(_ruler_body);\n    }\n    /*\r\n     * @private: Filter to aggregate the grid width of the variable length scale (:> 可変長スケールのグリッド幅を集約するフィルタ\r\n     */\n\n  }, {\n    key: \"_filterVariableScale\",\n    value: function _filterVariableScale(target_scale) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _bc = /^years?$/i.test(_opts.scale) ? 365 : 30,\n          scales = _props.variableScale,\n          retObj = {};\n\n      for (var _dt in scales) {\n        var _days = scales[_dt],\n            grid_size = this.numRound(_days * _props.scaleSize / _bc, 2),\n            _newKey = null,\n            _arr = void 0,\n            _temp = void 0; //console.log( '!_filterVariableScale:', _dt, this.getCorrectDatetime( _dt ).getFullYear(), _days )\n\n\n        switch (true) {\n          case /^millenniums?|millennia$/i.test(target_scale):\n            _newKey = Math.ceil(this.getCorrectDatetime(_dt).getFullYear() / 1000);\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^century$/i.test(target_scale):\n            _newKey = Math.ceil(this.getCorrectDatetime(_dt).getFullYear() / 100);\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^dec(ade|ennium)$/i.test(target_scale):\n            _newKey = Math.ceil(this.getCorrectDatetime(_dt).getFullYear() / 10);\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^lustrum$/i.test(target_scale):\n            _newKey = Math.ceil(this.getCorrectDatetime(_dt).getFullYear() / 5);\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^years?$/i.test(target_scale):\n            _newKey = \"\".concat(this.getCorrectDatetime(_dt).getFullYear());\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^months?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1)] = grid_size;\n            break;\n\n          case /^weeks?$/i.test(target_scale):\n            _arr = _dt.split(',');\n            _temp = this.getWeek(_arr[0]);\n            retObj[\"\".concat(this.getCorrectDatetime(_arr[0]).getFullYear(), \",\").concat(_temp)] = grid_size;\n            break;\n\n          case /^weekdays?$/i.test(target_scale):\n            _arr = _dt.split(',');\n            _temp = this.getCorrectDatetime(_arr[0]).getDay();\n            retObj[\"\".concat(this.getCorrectDatetime(_arr[0]).getFullYear(), \"/\").concat(this.getCorrectDatetime(_arr[0]).getMonth() + 1, \"/1,\").concat(_temp)] = grid_size;\n            break;\n\n          case /^days?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1, \"/1\")] = grid_size;\n            break;\n\n          case /^hours?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1, \"/1 0\")] = grid_size;\n            break;\n\n          case /^minutes?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1, \"/1 0:00\")] = grid_size;\n            break;\n\n          case /^seconds?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1, \"/1 0:00:00\")] = grid_size;\n            break;\n\n          default:\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1)] = grid_size;\n            break;\n        }\n      }\n\n      return retObj;\n    }\n    /*\r\n     * @private: Get the grid number per scale (for fixed length scale) (:> スケールごとのグリッド数を取得する（固定長スケール用）\r\n     */\n\n  }, {\n    key: \"_getGridsPerScale\",\n    value: function _getGridsPerScale(target_scale) {\n      //let _opts        = this._config,\n      var _props = this._instanceProps,\n          _scopes = [],\n          _scale_grids = {},\n          _sep = '/';\n\n      for (var i = 0; i < _props.grids; i++) {\n        var _tmp = new Date(_props.begin + i * _props.scale),\n            //let _tmp = this.getCorrectDatetime( _props.begin + ( i * _props.scale ) ),\n        _y = _tmp.getFullYear(),\n            _mil = Math.ceil(_y / 1000),\n            _cen = Math.ceil(_y / 100),\n            _dec = Math.ceil(_y / 10),\n            _lus = Math.ceil(_y / 5),\n            _m = _tmp.getMonth() + 1,\n            _wd = _tmp.getDay(),\n            // 0 = Sun, ... 6 = Sat\n        _d = _tmp.getDate(),\n            _w = this.getWeek(\"\".concat(_y, \"/\").concat(_m, \"/\").concat(_d)),\n            _h = _tmp.getHours(),\n            _min = _tmp.getMinutes(),\n            _s = _tmp.getSeconds();\n\n        _scopes.push({\n          millennium: _mil,\n          century: _cen,\n          decade: _dec,\n          lustrum: _lus,\n          year: _y,\n          month: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep, \"1\"),\n          week: \"\".concat(_y, \",\").concat(_w),\n          weekday: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d, \",\").concat(_wd),\n          day: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d),\n          hour: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d, \" \").concat(_h),\n          minute: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d, \" \").concat(_h, \":\").concat(_min),\n          second: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d, \" \").concat(_h, \":\").concat(_min, \":\").concat(_s),\n          datetime: _tmp.toString()\n        });\n      }\n\n      _scopes.forEach(function (_scope) {\n        //console.log( _scope[target_scale], idx );\n        if (!_scale_grids[_scope[target_scale]]) {\n          _scale_grids[_scope[target_scale]] = 1;\n        } else {\n          _scale_grids[_scope[target_scale]]++;\n        }\n      }); //console.log( '!_getGridsPerScale:', target_scale, _scale_grids )\n\n\n      return _scale_grids;\n    }\n    /*\r\n     * @private: Create the content of ruler of the timeline (:> タイムラインの目盛本文を作成する\r\n     */\n\n  }, {\n    key: \"_createRulerContent\",\n    value: function _createRulerContent(_line_grids, line_scale, ruler) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          line_height = this.supplement(Default.ruler.top.height, ruler.height),\n          font_size = this.supplement(Default.ruler.top.fontSize, ruler.fontSize),\n          text_color = this.supplement(Default.ruler.top.color, ruler.color),\n          locale = this.supplement(Default.ruler.top.locale, ruler.locale, this.validateString),\n          format = this.supplement(Default.ruler.top.format, ruler.format, this.validateObject),\n          _ruler_lines = $('<div></div>', {\n        class: ClassName.TIMELINE_RULER_LINES,\n        style: \"width:100%;height:\".concat(line_height, \"px;\")\n      });\n\n      for (var _key in _line_grids) {\n        var _item_width = /^(year|month)s?$/i.test(_opts.scale) ? _line_grids[_key] : _line_grids[_key] * _props.scaleSize,\n            _line = $('<div></div>', {\n          class: ClassName.TIMELINE_RULER_ITEM,\n          style: \"width:\".concat(_item_width, \"px;height:\").concat(line_height, \"px;line-height:\").concat(line_height, \"px;font-size:\").concat(font_size, \"px;color:\").concat(text_color, \";\")\n        }),\n            _ruler_string = this.getLocaleString(_key, line_scale, locale, format),\n            _data_ruler_item = ''; //console.log( '!_createRulerContent:', _key, _line_grids[_key], line_scale, locale, format, _item_width, _ruler_string )\n\n\n        _data_ruler_item = \"\".concat(line_scale, \"-\").concat(_data_ruler_item === '' ? String(_key) : _data_ruler_item);\n\n        _line.attr('data-ruler-item', _data_ruler_item).html(_ruler_string);\n\n        if (_item_width > this.strWidth(_ruler_string)) {\n          // Adjust position of ruler item string\n          //console.log( _item_width, _ruler_string, _ruler_string.length, this.strWidth( _ruler_string ), $(this._element).width() )\n          if (_item_width > $(this._element).width()) {\n            _line.addClass(ClassName.RULER_ITEM_ALIGN_LEFT);\n          }\n        }\n\n        _ruler_lines.append(_line).attr('data-ruler-scope', line_scale);\n      }\n\n      return _ruler_lines;\n    }\n    /*\r\n     * @private: Create the side indexes of the timeline (:> タイムラインのサイド・インデックスを作成する\r\n     */\n\n  }, {\n    key: \"_createSideIndex\",\n    value: function _createSideIndex(margin) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _sticky = this.supplement(Default.sidebar.sticky, _opts.sidebar.sticky),\n          _overlay = this.supplement(Default.sidebar.overlay, _opts.sidebar.overlay),\n          _sbList = this.supplement(Default.sidebar.list, _opts.sidebar.list),\n          _wrapper = $('<div></div>', {\n        class: ClassName.TIMELINE_SIDEBAR\n      }),\n          _margin = $('<div></div>', {\n        class: ClassName.TIMELINE_SIDEBAR_MARGIN\n      }),\n          _list = $('<div></div>', {\n        class: ClassName.TIMELINE_SIDEBAR_ITEM\n      }),\n          _c = 0.5;\n\n      if (_sticky) {\n        _wrapper.addClass(ClassName.STICKY_LEFT);\n      }\n\n      if (_overlay) {\n        _list.addClass(ClassName.OVERLAY);\n      } //_wrapper.css( 'margin-top', margin.top + 'px' ).css( 'margin-bottom', margin.bottom + 'px' )\n\n\n      if (margin.top > 0) {\n        _wrapper.prepend(_margin.clone().css('height', \"\".concat(margin.top + 1, \"px\")));\n      }\n\n      for (var i = 0; i < _props.rows; i++) {\n        var _item = _list.clone().html(_sbList[i]);\n\n        _wrapper.append(_item);\n      }\n\n      _wrapper.find(Selector.TIMELINE_SIDEBAR_ITEM).css('height', \"\".concat(_props.rowSize + _c, \"px\")).css('line-height', \"\".concat(_props.rowSize + _c, \"px\"));\n\n      if (margin.bottom > 0) {\n        _wrapper.append(_margin.clone().css('height', \"\".concat(margin.bottom + 1, \"px\")));\n      }\n\n      return _wrapper;\n    }\n    /*\r\n     * @private: Create the footer of the timeline (:> タイムラインのフッターを作成する\r\n     */\n\n  }, {\n    key: \"_createFooter\",\n    value: function _createFooter() {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _display = this.supplement(Default.footer.display, _opts.footer.display),\n          _content = this.supplement(null, _opts.footer.content),\n          _range = this.supplement(Default.footer.range, _opts.footer.range),\n          _locale = this.supplement(Default.footer.locale, _opts.footer.locale),\n          _format = this.supplement(Default.footer.format, _opts.footer.format),\n          _begin = this.supplement(null, _props.begin),\n          _end = this.supplement(null, _props.end),\n          _tl_footer = $('<div></div>', {\n        class: ClassName.TIMELINE_FOOTER\n      });\n\n      if (_range) {\n        if (_begin && _end) {\n          var _meta = \"\".concat(new Date(_begin).toLocaleString(_locale, _format), \"<span class=\\\"\").concat(ClassName.RANGE_SPAN, \"\\\"></span>\").concat(new Date(_end).toLocaleString(_locale, _format)); //let _meta = this.getCorrectDatetime( _begin ).toLocaleString( _locale, _format ) +'<span class=\"jqtl-range-span\"></span>'+ this.getCorrectDatetime( _end ).toLocaleString( _locale, _format )\n\n\n          _tl_footer.append(\"<div class=\\\"\".concat(ClassName.RANGE_META, \" \").concat(ClassName.ALIGN_SELF_RIGHT, \"\\\">\").concat(_meta, \"</div>\"));\n        }\n      }\n\n      if (_content) {\n        _tl_footer.append(\"<div class=\\\"\".concat(ClassName.TIMELINE_FOOTER_CONTENT, \"\\\">\").concat(_content, \"</div>\"));\n      }\n\n      if (!_display) {\n        _tl_footer.addClass(ClassName.HIDE);\n      }\n\n      return _tl_footer;\n    }\n    /*\r\n     * @private: Acquire the difference between two dates with the specified scale value (:> 2つの日付の差分を指定したスケール値で取得する\r\n     */\n\n  }, {\n    key: \"_diffDate\",\n    value: function _diffDate(date1, date2) {\n      var scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'millisecond';\n      var absval = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      //let _opts  = this._config,\n      var _dt1 = this.supplement(null, date1),\n          _dt2 = this.supplement(null, date2),\n          diffMS = 0,\n          retval = false,\n          lastDayOfMonth = function lastDayOfMonth(dateObj) {\n        var _tmp = new Date(dateObj.getFullYear(), dateObj.getMonth() + 1, 1);\n\n        _tmp.setTime(_tmp.getTime() - 1);\n\n        return _tmp.getDate();\n      },\n          isLeapYear = function isLeapYear(dateObj) {\n        var _tmp = new Date(dateObj.getFullYear(), 0, 1),\n            sum = 0;\n\n        for (var i = 0; i < 12; i++) {\n          _tmp.setMonth(i);\n\n          sum += lastDayOfMonth(_tmp);\n        }\n\n        return sum == 365 ? false : true;\n      };\n\n      if (!_dt1 || !_dt2) {\n        console.warn('Cannot parse date because invalid format or undefined.');\n        return false;\n      }\n\n      diffMS = _dt2 - _dt1;\n\n      if (absval) {\n        diffMS = Math.abs(diffMS);\n      }\n\n      var _bd = new Date(_dt1),\n          _ed = new Date(_dt2),\n          _dy = _ed.getFullYear() - _bd.getFullYear(),\n          _m = {};\n\n      switch (true) {\n        case /^years?$/i.test(scale):\n          if (_dy > 0) {\n            for (var i = 0; i <= _dy; i++) {\n              var _cd = new Date(_bd.getFullYear() + i, 0, 1);\n\n              _m[\"\".concat(_bd.getFullYear() + i)] = isLeapYear(_cd) ? 366 : 365;\n            }\n          } else {\n            _m[\"\".concat(_bd.getFullYear())] = isLeapYear(_bd) ? 366 : 365;\n          }\n\n          retval = _m;\n          break;\n\n        case /^months?$/i.test(scale):\n          if (_dy > 0) {\n            for (var _i4 = _bd.getMonth(); _i4 < 12; _i4++) {\n              var _cd2 = new Date(_bd.getFullYear(), _i4, 1);\n\n              _m[\"\".concat(_bd.getFullYear(), \"/\").concat(_i4 + 1)] = lastDayOfMonth(_cd2);\n            }\n\n            if (_dy > 1) {\n              for (var y = 1; y < _dy; y++) {\n                for (var _i5 = 0; _i5 < 12; _i5++) {\n                  var _cd3 = new Date(_bd.getFullYear() + y, _i5, 1);\n\n                  _m[\"\".concat(_bd.getFullYear() + y, \"/\").concat(_i5 + 1)] = lastDayOfMonth(_cd3);\n                }\n              }\n            }\n\n            for (var _i6 = 0; _i6 <= _ed.getMonth(); _i6++) {\n              var _cd4 = new Date(_ed.getFullYear(), _i6, 1);\n\n              _m[\"\".concat(_ed.getFullYear(), \"/\").concat(_i6 + 1)] = lastDayOfMonth(_cd4);\n            }\n          } else {\n            for (var _i7 = _bd.getMonth(); _i7 <= _ed.getMonth(); _i7++) {\n              var _cd5 = new Date(_bd.getFullYear(), _i7, 1);\n\n              _m[\"\".concat(_bd.getFullYear(), \"/\").concat(_i7 + 1)] = lastDayOfMonth(_cd5);\n            }\n          }\n\n          retval = _m;\n          break;\n\n        case /^weeks?$/i.test(scale):\n          retval = Math.ceil(diffMS / (7 * 24 * 60 * 60 * 1000));\n          break;\n\n        case /^(|week)days?$/i.test(scale):\n          retval = Math.ceil(diffMS / (24 * 60 * 60 * 1000));\n          break;\n\n        case /^hours?$/i.test(scale):\n          retval = Math.ceil(diffMS / (60 * 60 * 1000));\n          break;\n\n        case /^minutes?$/i.test(scale):\n          retval = Math.ceil(diffMS / (60 * 1000));\n          break;\n\n        case /^seconds?$/i.test(scale):\n          retval = Math.ceil(diffMS / 1000);\n          break;\n\n        default:\n          retval = diffMS;\n          break;\n      } //console.log( '!_diffDate:', retval )\n\n\n      return retval;\n    }\n    /*\r\n     * @private: Load all enabled events markuped on target element to the timeline object\r\n     */\n\n  }, {\n    key: \"_loadEvent\",\n    value: function _loadEvent() {\n      this._debug('_loadEvent');\n\n      var _that = this,\n          _elem = this._element,\n          _opts = this._config,\n          _container = $(_elem).find(Selector.TIMELINE_CONTAINER),\n          //_ruler_top    = $(_elem).find( Selector.TIMELINE_RULER_TOP ),\n      //_ruler_bottom = $(_elem).find( Selector.TIMELINE_RULER_BOTTOM ),\n      _event_list = $(_elem).find(Selector.DEFAULT_EVENTS),\n          _cnt = 0,\n          events = [],\n          lastEventId = 0;\n\n      _event_list.children().each(function () {\n        var _attr = $(this).attr('data-timeline-node');\n\n        if (typeof _attr !== 'undefined' && _attr !== false) {\n          _cnt++;\n        }\n      });\n\n      if (_event_list.length == 0 || _cnt == 0) {\n        this._debug('Enable event does not exist.');\n      } // Show loader\n\n\n      if (_opts.loader !== false) {\n        var _visible_width = _container.width(),\n            _visible_height = _container.height(); //    _margin_top     = ( _visible_height - ( _ruler_top.height() || 0 ) - ( _ruler_bottom.height() || 0 ) ) / 2\n        //console.log( _visible_width, _visible_height, _margin_top )\n\n\n        $(_elem).find(Selector.TIMELINE_CONTAINER).append(this._showLoader(_visible_width, _visible_height));\n      } //console.log( _opts )\n      // Register Event Data\n\n\n      _event_list.children().each(function () {\n        var _evt_params = _that._getPluggableParams($(this).attr('data-timeline-node')),\n            _one_event = {};\n\n        if (!_that.is_empty(_evt_params)) {\n          _one_event = _that._registerEventData(this, _evt_params);\n          events.push(_one_event);\n          lastEventId = Math.max(lastEventId, parseInt(_one_event.eventId, 10));\n        }\n      }); // Set event id with auto increment (:> イベントIDを自動採番\n\n\n      var cacheIds = []; // for checking duplication of id (:> IDの重複チェック用\n\n      events.forEach(function (_evt, _i, _this) {\n        var _chkId = parseInt(_this[_i].eventId, 10);\n\n        if (_chkId == 0 || cacheIds.includes(_chkId)) {\n          lastEventId++;\n          _this[_i].eventId = lastEventId;\n        } else {\n          _this[_i].eventId = _chkId;\n        }\n\n        cacheIds.push(_this[_i].eventId);\n      }); // Cache the event data to the session storage (:> イベントデータをセッションストレージへキャッシュ\n\n      if ('sessionStorage' in window && window.sessionStorage !== null) {\n        sessionStorage.setItem(this._selector, JSON.stringify(events));\n        this._isCached = true;\n      }\n    }\n    /*\r\n     * @private: Show the loader when the timeline creation (:> タイムライン作成時にローダーを表示\r\n     */\n\n  }, {\n    key: \"_showLoader\",\n    value: function _showLoader(width, height, margin_top) {\n      margin_top = this.supplement(0, margin_top, this.validateNumeric);\n\n      var _opts = this._config,\n          _loader = $('<div></div>', {\n        id: 'jqtl-loader',\n        style: \"width:\".concat(width, \"px;height:\").concat(height, \"px;top:\").concat(margin_top, \"px;\")\n      });\n\n      if ($(_opts.loader).length == 0) {\n        height = height === 'auto' ? '240px' : height;\n\n        var _loading_text = LOADING_MESSAGE.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\s\\S]|^$/g).filter(Boolean);\n\n        _loading_text.forEach(function (str, idx) {\n          var _fountain_text = $('<div></div>', {\n            id: \"jqtl-loading_\".concat(idx + 1),\n            class: ClassName.LOADER_ITEM\n          }).text(str);\n\n          _loader.append(_fountain_text);\n        });\n      } else {\n        var _custom_loader = $(_opts.loader).clone().prop('hidden', false).css('display', 'block');\n\n        _loader.append(_custom_loader);\n      }\n\n      return _loader;\n    }\n    /*\r\n     * @private:  Hide the loader (:> ローダーを非表示\r\n     */\n\n  }, {\n    key: \"_hideLoader\",\n    value: function _hideLoader() {\n      $(this._element).find(Selector.LOADER).remove();\n    }\n    /*\r\n     * @private: Register one event data as object (:> イベントデータをオブジェクトとして登録する\r\n     */\n\n  }, {\n    key: \"_registerEventData\",\n    value: function _registerEventData(event_element, params) {\n      var _this6 = this;\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          new_event = _objectSpread({}, EventParams, {\n        uid: this.generateUniqueID(),\n        label: $(event_element).html()\n      }),\n          _relation = {},\n          _x,\n          _w,\n          _c; //, _pointSize\n      //console.log( '!_registerEventData:', _opts, params )\n\n\n      if (params.hasOwnProperty('start')) {\n        _x = this._getCoordinateX(params.start);\n        new_event.x = this.numRound(_x, 2);\n\n        if (params.hasOwnProperty('end')) {\n          _x = this._getCoordinateX(params.end);\n          _w = _x - new_event.x;\n          new_event.width = this.numRound(_w, 2);\n\n          if (_opts.eventMeta.display) {\n            if (this.is_empty(_opts.eventMeta.content) && !params.hasOwnProperty('rangeMeta')) {\n              //console.log( '!_registerEventData:', _opts.eventMeta.locale, _opts.eventMeta.format, _opts.scale, params )\n              new_event.rangeMeta += this.getLocaleString(params.start, _opts.eventMeta.scale, _opts.eventMeta.locale, _opts.eventMeta.format);\n              new_event.rangeMeta += \" - \".concat(this.getLocaleString(params.end, _opts.eventMeta.scale, _opts.eventMeta.locale, _opts.eventMeta.format));\n            } else {\n              new_event.rangeMeta = _opts.eventMeta.content;\n            }\n          }\n        } else {\n          new_event.width = 0;\n        } //console.log( 'getX:', _x, 'getW:', _w, event_element )\n\n\n        if (params.hasOwnProperty('row')) {\n          _c = Math.floor(params.row / 2);\n          new_event.y = (params.row - 1) * _opts.rowHeight + new_event.margin + _c;\n        }\n\n        Object.keys(new_event).forEach(function (_prop) {\n          switch (true) {\n            case /^(|event)id$/i.test(_prop):\n              new_event.eventId = parseInt(params[_prop], 10) || 0;\n              break;\n\n            case /^(label|content)$/i.test(_prop):\n              if (params.hasOwnProperty(_prop) && !_this6.is_empty(params[_prop])) {\n                new_event[_prop] = params[_prop];\n              } // Override the children element to label or content setting\n\n\n              if ($(event_element).children(\".event-\".concat(_prop)).length > 0) {\n                new_event[_prop] = $(event_element).children(\".event-\".concat(_prop)).html();\n              } //console.log( '!_registerEventData:', _prop, params[_prop], new_event[_prop] )\n\n\n              break;\n\n            case /^relation$/i.test(_prop):\n              // For drawing the relation line\n              if (/^point(|er)$/i.test(_opts.type)) {\n                //let _pointSize  = this._getPointerSize( new_event.size, new_event.margin )\n                _relation.x = _this6.numRound(new_event.x, 2);\n                _relation.y = _this6.numRound(_props.rowSize * ((params.row || 1) - 1) + _props.rowSize / 2, 2); //console.log( '!_registerEventData:', params, new_event.x, new_event.y, _pointSize, _relation )\n\n                new_event[_prop] = _objectSpread({}, params[_prop], _relation);\n              }\n\n              break;\n\n            default:\n              if (params.hasOwnProperty(_prop) && !_this6.is_empty(params[_prop])) {\n                new_event[_prop] = params[_prop];\n              }\n\n              break;\n          }\n        });\n      } //console.log( '!_registerEventData:', new_event )\n\n\n      return new_event;\n    }\n    /*\r\n     * @private: Get the coordinate X on the timeline of any date (:> 任意の日付のタイムライン上のX座標（横軸座標）を取得する\r\n     */\n\n  }, {\n    key: \"_getCoordinateX\",\n    value: function _getCoordinateX(date) {\n      //let _opts  = this._config,\n      var _props = this._instanceProps,\n          _date = this.supplement(null, this._getPluggableDatetime(date)),\n          coordinate_x = 0;\n\n      if (_date) {\n        if (_date - _props.begin >= 0 && _props.end - _date >= 0) {\n          // When the given date is within the range of timeline begin and end (:> 指定された日付がタイムラインの開始と終了の範囲内にある場合\n          coordinate_x = Math.abs(_date - _props.begin) / _props.scale * _props.scaleSize;\n        } else {\n          // When the given date is out of timeline range (:> 指定された日付がタイムラインの範囲外にある場合\n          coordinate_x = (_date - _props.begin) / _props.scale * _props.scaleSize;\n        }\n      } else {\n        console.warn('Cannot parse date because invalid format or undefined.');\n      }\n\n      return coordinate_x;\n    }\n  }, {\n    key: \"_placeEvent\",\n    value: function _placeEvent() {\n      var _this7 = this;\n\n      this._debug('_placeEvent');\n\n      if (!this._isCached) {\n        return;\n      }\n\n      var _elem = this._element,\n          _opts = this._config,\n          _evt_container = $(_elem).find(Selector.TIMELINE_EVENTS),\n          _relation_lines = $(_elem).find(Selector.TIMELINE_RELATION_LINES),\n          events = {};\n\n      if ('sessionStorage' in window && window.sessionStorage !== null) {\n        events = JSON.parse(sessionStorage.getItem(this._selector));\n      }\n\n      if (events.length > 0) {\n        events.forEach(function (_evt) {\n          var _evt_elem = _this7._createEventNode(_evt);\n\n          if (_evt_elem) {\n            _evt_container.append(_evt_elem);\n          }\n        });\n      }\n\n      if (/^point(|er)$/i.test(_opts.type)) {\n        this._drawRelationLine(events);\n      } // console.log( '!_placeEvent:', _opts )\n\n\n      this.sleep(1).then(function () {\n        _this7._hideLoader();\n\n        _evt_container.fadeIn('fast', function () {\n          _relation_lines.fadeIn('fast');\n        });\n      });\n    }\n    /*\r\n     * @private: Create an event element on the timeline (:> タイムライン上にイベント要素を作成する\r\n     */\n\n  }, {\n    key: \"_createEventNode\",\n    value: function _createEventNode(params) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _evt_elem = $('<div></div>', {\n        class: ClassName.TIMELINE_EVENT_NODE,\n        id: \"evt-\".concat(params.eventId),\n        css: {\n          left: \"\".concat(params.x, \"px\"),\n          top: \"\".concat(params.y, \"px\"),\n          width: \"\".concat(params.width, \"px\"),\n          height: \"\".concat(params.height, \"px\"),\n          color: this.hexToRgbA(params.color),\n          backgroundColor: this.hexToRgbA(params.bgColor)\n        },\n        html: \"<div class=\\\"\".concat(ClassName.TIMELINE_EVENT_LABEL, \"\\\">\").concat(params.label, \"</div>\")\n      }); //console.log( '!_createEventNode:', params )\n      // Whether this event is within the display range of the timeline (:> タイムライン表示範囲内のイベントかどうか\n      // For events excluded, set the width to -1 (:> 除外イベントは幅を -1 に設定する\n\n\n      if (params.x >= 0) {\n        // The event start datetime is over the start datetime of the timeline (:> イベント始点がタイムラインの始点以上\n        if (params.x <= _props.fullwidth) {\n          // The event start datetime is less than or equal to the timeline end datetime (:> イベントの始点がタイムラインの終点以下\n          if (params.x + params.width <= _props.fullwidth) {// The event end datetime is less than before the timeline end datetime (regular event) (:> イベント終点がタイムラインの終点以下（通常イベント）\n            // OK\n          } else {\n            // The event end datetime is after the timeline end datetime (event exceeded end datetime) (:> イベント終点がタイムラインの終点より後（終点超過イベント）\n            params.width = _props.fullwidth - params.x;\n          }\n        } else {\n          // The event start datetime is after the timeline end datetime (exclude event) (:> イベント始点がタイムラインの終点より後（除外イベント）\n          params.width = -1;\n        }\n      } else {\n        // The event start datetime is before the timeline start datetime (:> イベント始点がタイムラインの始点より前\n        if (/^point(|er)$/i.test(_opts.type)) {\n          // In the case of \"point\" type, that is an exclude event (:> ポインター型の場合は除外イベント\n          params.width = -1;\n        } else {\n          // The case of \"bar\" type\n          if (params.x + params.width <= 0) {\n            // The event end datetime is less than before the timeline start datetime (exclude event) (:> イベント終点がタイムラインの始点より前（除外イベント）\n            params.width = -1;\n          } else {\n            // The event end datetime is after the timeline start datetime (:> イベント終点がタイムラインの始点より後\n            if (params.x + params.width <= _props.fullwidth) {\n              // The event end datetime is less than or equal the timeline end datetime (event exceeded start datetime) (:> イベント終点がタイムラインの終点以下（始点超過イベント）\n              params.width = Math.abs(params.x + params.width);\n              params.x = 0;\n            } else {\n              // The event end datetime is after the timeline end datetime (event exceeded both start and end datetime) (:> イベント終点がタイムラインの終点より後（始点・終点ともに超過イベント）\n              params.width = _props.fullwidth;\n              params.x = 0;\n            }\n          }\n        }\n      } //console.log( 'x:', params.x, 'w:', params.width, 'x-end:', Math.abs( params.x ) + params.width, 'fw:', _props.fullwidth, 'ps:', params.size )\n\n\n      if (/^point(|er)$/i.test(_opts.type)) {\n        if (params.width < 0) {\n          return null;\n        }\n\n        var _pointSize = this._getPointerSize(params.size, params.margin),\n            _shiftX = this.numRound(params.x - _pointSize / 2, 2),\n            _shiftY = this.numRound(params.y + (params.height - _pointSize) / 2, 2); //console.log( '!_createEventNode:', params, _pointSize, _shiftX, _shiftY )\n\n\n        _evt_elem.addClass(ClassName.VIEWER_EVENT_TYPE_POINTER).css('border-color', params.bdColor).css('left', \"\".concat(_shiftX, \"px\")).css('top', \"\".concat(_shiftY, \"px\")).css('width', \"\".concat(_pointSize, \"px\")).css('height', \"\".concat(_pointSize, \"px\")).attr('data-base-size', _pointSize).attr('data-base-left', _shiftX).attr('data-base-top', _shiftY);\n      } else {\n        if (params.width < 1) {\n          return null;\n        }\n\n        _evt_elem.css('left', \"\".concat(params.x, \"px\")).css('width', \"\".concat(params.width, \"px\"));\n      }\n\n      _evt_elem.attr('data-uid', params.uid);\n\n      if (!this.is_empty(params.image)) {\n        if (/^point(|er)$/i.test(_opts.type)) {\n          _evt_elem.css('background-image', \"url(\".concat(params.image, \")\"));\n        } else {\n          var _imgSize = params.height - params.margin * 2;\n\n          _evt_elem.prepend(\"<img src=\\\"\".concat(params.image, \"\\\" class=\\\"\").concat(ClassName.TIMELINE_EVENT_THUMBNAIL, \"\\\" width=\\\"\").concat(_imgSize, \"\\\" height=\\\"\").concat(_imgSize, \"\\\" />\"));\n        }\n      }\n\n      if (/^bar$/i.test(_opts.type) && _opts.eventMeta.display) {\n        //console.log( '!_createEventNode:', params )\n        params.extend.meta = params.rangeMeta;\n      }\n\n      if (!this.is_empty(params.extend)) {\n        for (var _prop in params.extend) {\n          _evt_elem.attr(\"data-\".concat(_prop), params.extend[_prop]);\n\n          if (_prop === 'toggle' && ['popover', 'tooltip'].includes(params.extend[_prop])) {\n            // for bootstrap's popover or tooltip\n            _evt_elem.attr('title', params.label);\n\n            if (!params.extend.hasOwnProperty('content')) {\n              _evt_elem.attr('data-content', params.content);\n            }\n          }\n        }\n      }\n\n      if (!this.is_empty(params.callback)) {\n        _evt_elem.attr('data-callback', params.callback);\n      }\n      /*\r\n      $(document).on( 'mouseenter', `#evt-${params.eventId}`, (e) => {\r\n          $(e.target).css( 'background-color', this.hexToRgbA( params.bgColor, 0.65 ) )\r\n      }).on( 'mouseleave', `#evt-${params.eventId}`, (e) => {\r\n          $(e.target).css( 'background-color', this.hexToRgbA( params.bgColor, 1 ) )\r\n      })\r\n      */\n\n\n      return _evt_elem;\n    }\n    /*\r\n     * @private: Retrieve the diameter size (pixel) of pointer (:> ポインタの直径サイズ（ピクセル値）を取得する\r\n     */\n\n  }, {\n    key: \"_getPointerSize\",\n    value: function _getPointerSize(key, margin) {\n      //let _opts  = this._config,\n      var _props = this._instanceProps,\n          _max = Math.min(_props.scaleSize, _props.rowSize) - margin * 2,\n          _size = null;\n\n      switch (true) {\n        case /^large$/i.test(key):\n          _size = Math.max(this.numRound(_max * 0.8, 1), MIN_POINTER_SIZE);\n          break;\n\n        case /^normal$/i.test(key):\n          _size = Math.max(this.numRound(_max / 2, 1), MIN_POINTER_SIZE);\n          break;\n\n        case /^small$/i.test(key):\n          _size = Math.max(this.numRound(_max / 4, 1), MIN_POINTER_SIZE);\n          break;\n\n        default:\n          _size = Math.max(parseInt(key, 10), MIN_POINTER_SIZE);\n      } //console.log( '!_getPointerSize:', _props, key, _max, _size )\n\n\n      return _size;\n    }\n    /*\r\n     * @private: Draw the relation lines (:> 連結線を描画する\r\n     */\n\n  }, {\n    key: \"_drawRelationLine\",\n    value: function _drawRelationLine(events) {\n      var _this8 = this;\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _canvas = $(this._element).find(Selector.TIMELINE_RELATION_LINES),\n          ctx_relations = _canvas[0].getContext('2d'),\n          drawLine = function drawLine(_sx, _sy, _ex, _ey, evt, _ba) {\n        var _curveType = {},\n            _radius = _this8.numRound(Math.min(_props.scaleSize, _props.rowSize) / 2, 2),\n            _subRadius = _this8.numRound(_this8._getPointerSize(evt.size, _opts.marginHeight) / 2, 2); // Defaults\n\n\n        ctx_relations.strokeStyle = EventParams.bdColor;\n        ctx_relations.lineWidth = 2.5;\n        ctx_relations.filter = 'url(#crisp)';\n\n        for (var _key in evt.relation) {\n          switch (true) {\n            case /^(|line)color$/i.test(_key):\n              ctx_relations.strokeStyle = evt.relation[_key];\n              break;\n\n            case /^(|line)size$/i.test(_key):\n              ctx_relations.lineWidth = parseInt(evt.relation[_key], 10) || 2.5;\n              break;\n\n            case /^curve$/i.test(_key):\n              if (/^(r|l)(t|b),?(r|l)?(t|b)?$/i.test(evt.relation[_key])) {\n                var _tmp = evt.relation[_key].split(',');\n\n                if (_tmp.length == 2) {\n                  _curveType.before = _tmp[0];\n                  _curveType.after = _tmp[1];\n                } else {\n                  _curveType[_ba] = _tmp[0];\n                }\n              } else if (typeof evt.relation[_key] === 'boolean' && evt.relation[_key] || typeof evt.relation[_key] === 'number' && Boolean(evt.relation[_key])) {\n                // Automatically set the necessary linearity type (:> 自動線形判定\n                //console.log( _sx, _sy, _ex, _ey, _radius, _ba, _subRadius )\n                if (_ba === 'before') {\n                  // before: targetEvent[ _ex, _ey ] <---- selfEvent[ _sx, _sy ]\n                  if (_sy > _ey) {\n                    // 連結点が自分より上にある\n                    if (_sx > _ex) {\n                      // 連結点が自分より左にある \"(_ex,_ey)└(_sx,_sy)\" as \"lb\"\n                      _curveType[_ba] = 'lb';\n                    } else if (_sx < _ex) {\n                      // 連結点が自分より右にある \"⊂￣\" as \"lb+lt\"\n                      _curveType[_ba] = 'lb+lt';\n                    } else {\n                      // 連結点が自分の直上 \"│\" to top\n                      _curveType[_ba] = null;\n                    }\n                  } else if (_sy < _ey) {\n                    // 連結点が自分より下にある\n                    if (_sx > _ex) {\n                      // 連結点が自分より左にある \"(_ex,_ey)┌(_sx,_sy)\" as \"lt\"\n                      _curveType[_ba] = 'lt';\n                    } else if (_sx < _ex) {\n                      // 連結点が自分より右にある \"⊂_\" as \"rt+rb\"\n                      _curveType[_ba] = 'lt+lb';\n                    } else {\n                      // 連結点が自分の直下 \"│\" to bottom\n                      _curveType[_ba] = null;\n                    }\n                  } else {\n                    // 連結点が自分と同じ水平上にある（左右どちらか） _sy == _ey; \"─\" to left or right\n                    _curveType[_ba] = null;\n                  }\n                } else if (_ba === 'after') {\n                  // after: selfEvent[ _sx, _sy ] ----> targetEvent[ _ex, _ey ]\n                  if (_sy < _ey) {\n                    // 連結点が自分の下にある\n                    if (_sx < _ex) {\n                      // 連結点が自分の右にある \"(_sx,_sy)┐(_ex,_ey)\" as \"rt\"\n                      _curveType[_ba] = 'rt';\n                    } else if (_sx > _ex) {\n                      // 連結点が自分より左にある \"_⊃\" as \"rt+rb\"\n                      _curveType[_ba] = 'rt+rb';\n                    } else {\n                      // 連結点が自分の直下 \"│\" to bottom\n                      _curveType[_ba] = null;\n                    }\n                  } else if (_sy > _ey) {\n                    // 連結点が自分より上にある\n                    if (_sx < _ex) {\n                      // 連結点が自分の右にある \"┘\" as \"rb\"\n                      _curveType[_ba] = 'rb';\n                    } else if (_sx > _ex) {\n                      // 連結点が自分より左にある \"￣⊃\" as \"rb+rt\"\n                      _curveType[_ba] = 'rb+rt';\n                    } else {\n                      // 連結点が自分の直上 \"│\" to top\n                      _curveType[_ba] = null;\n                    }\n                  } else {\n                    // 連結点が自分と同じ水平上にある（左右どちらか） _sy == _ey; \"─\" to left or right\n                    _curveType[_ba] = null;\n                  }\n                }\n              }\n\n              break;\n          }\n        }\n\n        if (Math.abs(_ey - _sy) > _props.rowSize) {\n          _ey += Math.floor(Math.abs(_ey - _sy) / _props.rowSize);\n        }\n\n        ctx_relations.beginPath();\n\n        if (!_this8.is_empty(_curveType)) {\n          // console.log( '!_drawLine:', _curveType, _sx, _sy, _ex, _ey, _radius )\n          switch (true) {\n            case /^lt$/i.test(_curveType[_ba]):\n              // \"(_ex,_ey)┌(_sx,_sy)\"\n              ctx_relations.moveTo(_sx, _sy);\n\n              if (Math.abs(_sx - _ex) > _radius) {\n                ctx_relations.lineTo(_ex - _radius, _sy); // \"─\"\n              }\n\n              if (Math.abs(_ey - _sy) > _radius) {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _sy + _radius); // \"┌\"\n\n                ctx_relations.lineTo(_ex, _ey); // \"│\"\n              } else {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _ey); // \"┌\"\n              }\n\n              break;\n\n            case /^lb$/i.test(_curveType[_ba]):\n              // \"(_ex,_ey)└(_sx,_sy)\"\n              ctx_relations.moveTo(_sx, _sy);\n\n              if (Math.abs(_sx - _ex) > _radius) {\n                ctx_relations.lineTo(_ex + _radius, _sy); // \"─\"\n              }\n\n              if (Math.abs(_sy - _ey) > _radius) {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _sy - _radius); // \"└\"\n\n                ctx_relations.lineTo(_ex, _ey); // \"│\"\n              } else {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _ey); // \"└\"\n              }\n\n              break;\n\n            case /^rt$/i.test(_curveType[_ba]):\n              // \"(_sx,_sy)┐(_ex,_ey)\"\n              ctx_relations.moveTo(_sx, _sy);\n\n              if (Math.abs(_ex - _sx) > _radius) {\n                ctx_relations.lineTo(_ex - _radius, _sy); // \"─\"\n              }\n\n              if (Math.abs(_ey - _sy) > _radius) {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _sy + _radius); // \"┐\"\n\n                ctx_relations.lineTo(_ex, _ey);\n              } else {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _ey); // \"┐\"\n              }\n\n              break;\n\n            case /^rb$/i.test(_curveType[_ba]):\n              // \"(_sx,_sy)┘(_ex,_ey)\"\n              ctx_relations.moveTo(_sx, _sy);\n\n              if (Math.abs(_ex - _sx) > _radius) {\n                ctx_relations.lineTo(_ex - _radius, _sy); // \"─\"\n              }\n\n              if (Math.abs(_sy - _ey) > _radius) {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _sy - _radius); // \"┘\"\n\n                ctx_relations.lineTo(_ex, _ey);\n              } else {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _ey); // \"┘\"\n              }\n\n              break;\n\n            case /^lt\\+lb$/i.test(_curveType[_ba]): // \"⊂＿\"\n\n            case /^lb\\+lt$/i.test(_curveType[_ba]):\n              // \"⊂￣\"\n              ctx_relations.moveTo(_sx, _sy); //ctx_relations.lineTo( _sx - _subRadius, _sy ) // \"─\"\n\n              ctx_relations.lineTo(_sx - _radius, _sy); // \"─\"\n              //ctx_relations.bezierCurveTo( _sx - _subRadius - _radius, _sy, _sx - _subRadius - _radius, _ey, _sx - _subRadius, _ey ) // \"⊂\"\n\n              ctx_relations.bezierCurveTo(_sx - _radius * 2, _sy, _sx - _radius * 2, _ey, _sx - _radius, _ey); // \"⊂\"\n\n              ctx_relations.lineTo(_ex, _ey); // \"─\"\n\n              break;\n\n            case /^rt\\+rb$/i.test(_curveType[_ba]): // \"＿⊃\"\n\n            case /^rb\\+rt$/i.test(_curveType[_ba]):\n              // \"￣⊃\"\n              ctx_relations.moveTo(_sx, _sy); //ctx_relations.lineTo( _sx + _subRadius, _sy ) // \"─\"\n\n              ctx_relations.lineTo(_sx + _radius, _sy); // \"─\"\n              //ctx_relations.bezierCurveTo( _sx + _subRadius + _radius, _sy, _sx + _subRadius + _radius, _ey, _sx + _subRadius, _ey ) // \"⊃\"\n\n              ctx_relations.bezierCurveTo(_sx + _radius * 2, _sy, _sx + _radius * 2, _ey, _sx + _radius, _ey); // \"⊃\"\n\n              ctx_relations.lineTo(_ex, _ey); // \"─\"\n\n              break;\n          }\n        } else {\n          ctx_relations.moveTo(_sx, _sy);\n          ctx_relations.lineTo(_ex, _ey);\n        } //ctx_relations.closePath()\n\n\n        ctx_relations.stroke();\n      }; //console.log( '!_drawRelationLine:', _props, events, _canvas )\n\n\n      events.forEach(function (evt) {\n        var _rel = evt.relation,\n            _sx,\n            _sy,\n            _ex,\n            _ey,\n            _targetId,\n            _targetEvent;\n\n        if (_rel.hasOwnProperty('before')) {\n          // before: targetEvent[ _ex, _ey ] <---- selfEvent[ _sx, _sy ]\n          // (:> before: 自分を起点（ _sx, _sy ）として左方向の連結点（ _ex, _ey ）へ向かう描画方式\n          _sx = _rel.x;\n          _sy = _rel.y;\n          _targetId = parseInt(_rel.before, 10);\n\n          if (_targetId < 0) {\n            _ex = 0;\n            _ey = _sy;\n          } else {\n            _targetEvent = events.find(function (_evt) {\n              return parseInt(_evt.eventId, 10) == _targetId;\n            });\n\n            if (_targetEvent.relation) {\n              _ex = _targetEvent.relation.x < 0 ? 0 : _targetEvent.relation.x;\n              _ey = _targetEvent.relation.y;\n            }\n          }\n\n          if (_sx >= 0 && _sy >= 0 && _ex >= 0 && _ey >= 0) {\n            drawLine(_sx, _sy, _ex, _ey, evt, 'before');\n          }\n        }\n\n        if (_rel.hasOwnProperty('after')) {\n          // after: selfEvent[ _sx, _sy ] ----> targetEvent[ _ex, _ey ]\n          // (:> after: 自分を起点（ _sx, _sy ）として右方向の連結点（ _ex, _ey ）へ向かう描画方式\n          _sx = _rel.x;\n          _sy = _rel.y;\n          _targetId = parseInt(_rel.after, 10);\n\n          if (_targetId < 0) {\n            _ex = _props.fullwidth;\n            _ey = _sy;\n          } else {\n            _targetEvent = events.find(function (_evt) {\n              return parseInt(_evt.eventId, 10) == _targetId;\n            });\n\n            if (_targetEvent.relation) {\n              _ex = _targetEvent.relation.x > _props.fullwidth ? _props.fullwidth : _targetEvent.relation.x;\n              _ey = _targetEvent.relation.y;\n            }\n          }\n\n          if (_sx >= 0 && _sy >= 0 && _ex >= 0 && _ey >= 0) {\n            drawLine(_sx, _sy, _ex, _ey, evt, 'after');\n          }\n        }\n      });\n    }\n    /*\r\n     * @private: Retrieve the mapping data that placed current events\r\n     */\n\n  }, {\n    key: \"_mapPlacedEvents\",\n    value: function _mapPlacedEvents() {\n      var _that = this,\n          _tl_events = $(this._element).find(Selector.TIMELINE_EVENTS).children(),\n          _cache = null,\n          _events = [];\n\n      if (this._isCached && 'sessionStorage' in window && window.sessionStorage !== null) {\n        _cache = JSON.parse(sessionStorage.getItem(this._selector));\n      }\n\n      _tl_events.each(function () {\n        var _uid = $(this).data('uid'),\n            _data = null;\n\n        if (_cache) {\n          _data = _cache.find(function (_evt) {\n            return _evt.uid === _uid;\n          }) || null;\n        } else {\n          _data = $(this).data();\n        }\n\n        if (!_that.is_empty(_data)) {\n          _events.push(_data);\n        }\n      }); //console.log( '!_mapPlacedEvents:', _events )\n\n\n      return _events;\n    }\n    /*\r\n     * @private: Event when focus or blur\r\n     */\n\n  }, {\n    key: \"_activeEvent\",\n    value: function _activeEvent(event) {\n      // console.log( '!_activeEvent:', event )\n      var _elem = event.target;\n\n      if ('focusin' === event.type) {\n        $(Selector.TIMELINE_EVENT_NODE).removeClass('active');\n        $(_elem).addClass('active');\n      } else if ('focusout' === event.type) {\n        $(_elem).removeClass('active');\n      }\n    }\n    /*\r\n     * @private: Event when hover on the pointer type event\r\n     */\n\n  }, {\n    key: \"_hoverPointer\",\n    value: function _hoverPointer(event) {\n      var _props = this._instanceProps,\n          _elem = event.target,\n          _base = {\n        left: $(_elem).data('baseLeft'),\n        top: $(_elem).data('baseTop'),\n        width: $(_elem).data('baseSize')\n      },\n          _x = _base.left,\n          _y = _base.top,\n          _w = _base.width,\n          _z = 5; //console.log( '!_hoverPointer:', _props )\n\n      if ('mouseenter' === event.type) {\n        _w = Math.max(this.numRound(_w * 1.2, 'ceil'), Math.min(_props.rowSize, _props.scaleSize));\n        _x = this.numRound(_x - (_w - _base.width) / 2, 2);\n        _y = this.numRound(_y - (_w - _base.width) / 2, 2);\n        _z = 9;\n        $(_elem).trigger(Event.FOCUSIN_EVENT);\n      } else {\n        $(_elem).trigger(Event.FOCUSOUT_EVENT);\n      }\n\n      $(_elem).css('left', \"\".concat(_x, \"px\")).css('top', \"\".concat(_y, \"px\")).css('width', \"\".concat(_w, \"px\")).css('height', \"\".concat(_w, \"px\")).css('z-index', _z);\n    }\n    /*\r\n     * @private: Echo the log of plugin for debugging\r\n     */\n\n  }, {\n    key: \"_debug\",\n    value: function _debug(message) {\n      var throwType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Notice';\n\n      if (!this._config.debug) {\n        return;\n      }\n\n      message = this.supplement(null, message);\n\n      if (message) {\n        var _msg = typeof $(this._element).data(DATA_KEY)[message] !== 'undefined' ? \"Called method \\\"\".concat(message, \"\\\".\") : message,\n            _sty = /^Called method \"/.test(_msg) ? 'font-weight:600;color:blue;' : '',\n            _rst = '';\n\n        if (window.console && window.console.log) {\n          if (throwType === 'Notice') {\n            window.console.log('%c%s%c', _sty, _msg, _rst);\n          } else {\n            throw new Error(\"\".concat(_msg));\n          }\n        }\n      }\n    } // Public\n\n    /*\r\n     * @public: This method is able to call only once after completed an initializing of the plugin\r\n     */\n\n  }, {\n    key: \"initialized\",\n    value: function initialized() {\n      var _message = this._isInitialized ? 'Skipped because method \"initialized\" already has been called once' : 'initialized';\n\n      this._debug(_message);\n\n      var _elem = this._element,\n          _opts = this._config,\n          _args = arguments.length <= 0 ? undefined : arguments[0],\n          callback = _args.length > 0 && typeof _args[0] === 'function' ? _args[0] : null,\n          userdata = _args.length > 1 ? _args.slice(1) : null; // console.log( '!initialized:', callback, userdata )\n\n\n      if (callback && !this._isInitialized) {\n        this._debug('Fired your callback function after initializing this plugin.');\n\n        callback(_elem, _opts, userdata);\n      }\n\n      this._isInitialized = true;\n    }\n    /*\r\n     * @public: Destroy the object to which the plugin is applied\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._debug('destroy');\n\n      $.removeData(this._element, DATA_KEY);\n      $(window, document, this._element).off(EVENT_KEY);\n      $(this._element).remove(); // Remove the cached data on the session storage (:> セッションストレージ上にキャッシュしているデータを削除\n\n      if ('sessionStorage' in window && window.sessionStorage !== null && this._isCached) {\n        sessionStorage.removeItem(this._selector);\n      }\n\n      for (var _prop in this) {\n        this[_prop] = null;\n        delete this[_prop];\n      }\n    }\n    /*\r\n     * @public: This method has been deprecated since version 2.0.0\r\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      throw new ReferenceError('This method named \"render\" has been deprecated since version 2.0.0');\n    }\n    /*\r\n     * @public: Show hidden timeline\r\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      this._debug('show');\n\n      var _elem = this._element;\n\n      if (!this._isShown) {\n        $(_elem).removeClass(ClassName.HIDE);\n        this._isShown = true;\n      }\n    }\n    /*\r\n     * @public: Hide shown timeline\r\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this._debug('hide');\n\n      var _elem = this._element;\n\n      if (this._isShown) {\n        $(_elem).addClass(ClassName.HIDE);\n        this._isShown = false;\n      }\n    }\n    /*\r\n     * @public: \r\n     */\n\n  }, {\n    key: \"dateback\",\n    value: function dateback() {\n      this._debug('dateback');\n    }\n    /*\r\n     * @public: \r\n     */\n\n  }, {\n    key: \"dateforth\",\n    value: function dateforth() {\n      this._debug('dateforth');\n    }\n    /*\r\n     * @public: Move the display position of the timeline container to the specified position\r\n     */\n\n  }, {\n    key: \"alignment\",\n    value: function alignment(position) {\n      this._debug('alignment');\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _elem = this._element,\n          _tl_container = $(_elem).find(Selector.TIMELINE_CONTAINER),\n          _movX = 0;\n\n      position = this.is_array(position) ? position[0] : _opts.rangeAlign;\n\n      if (_props.fullwidth <= _elem.scrollWidth) {\n        return;\n      }\n\n      switch (true) {\n        case /^(left|begin)$/i.test(position):\n          _movX = 0;\n          break;\n\n        case /^center$/i.test(position):\n          _movX = (_tl_container[0].scrollWidth - _elem.scrollWidth) / 2 + 1;\n          break;\n\n        case /^(right|end)$/i.test(position):\n          _movX = _tl_container[0].scrollWidth - _elem.scrollWidth + 1;\n          break;\n\n        case /^latest$/i.test(position):\n          {\n            var events = this._mapPlacedEvents().sort(this.compareValues('x')),\n                lastEvent = events[events.length - 1];\n\n            _movX = !this.is_empty(lastEvent) ? lastEvent.x : 0; // console.log( events, lastEvent, _movX, _elem.scrollWidth / 2 )\n            // Centering\n\n            if (_elem.scrollWidth / 2 < _movX) {\n              _movX -= Math.ceil(_elem.scrollWidth / 2);\n            } else {\n              _movX = 0;\n            } // Focus target event\n\n\n            $(\"\".concat(Selector.TIMELINE_EVENT_NODE, \"[data-uid=\\\"\").concat(lastEvent.uid, \"\\\"]\")).trigger(Event.FOCUSIN_EVENT);\n            break;\n          }\n\n        case /^\\d{1,}$/.test(position):\n          {\n            var _events2 = this._mapPlacedEvents(),\n                targetEvent = {};\n\n            if (_events2.length > 0) {\n              targetEvent = _events2.find(function (evt) {\n                return evt.eventId == parseInt(position, 10);\n              });\n            }\n\n            _movX = !this.is_empty(targetEvent) ? targetEvent.x : 0; // Centering\n\n            if (Math.ceil(_elem.scrollWidth / 2) < _movX) {\n              _movX -= Math.ceil(_elem.scrollWidth / 2);\n            } else {\n              _movX = 0;\n            } // Focus target event\n\n\n            $(\"\".concat(Selector.TIMELINE_EVENT_NODE, \"[data-uid=\\\"\").concat(targetEvent.uid, \"\\\"]\")).trigger(Event.FOCUSIN_EVENT);\n            break;\n          }\n\n        case /^current(|ly)|now$/i.test(position):\n        default:\n          {\n            var _now = new Date().toString(),\n                _nowX = this.numRound(this._getCoordinateX(_now), 2);\n\n            if (_nowX >= 0) {\n              if (_tl_container[0].scrollWidth - _elem.scrollWidth + 1 < _nowX) {\n                _movX = _tl_container[0].scrollWidth - _elem.scrollWidth + 1;\n              } else {\n                _movX = _nowX;\n              }\n            } else {\n              _movX = 0;\n            }\n\n            break;\n          }\n      } //console.log( `!alignment::${position}:`, _props.fullwidth, _props.visibleWidth, _tl_container[0].scrollWidth, _tl_container[0].scrollLeft, _movX )\n\n\n      _tl_container.scrollLeft(_movX);\n    }\n    /*\r\n     * @public: This method has been deprecated since version 2.0.0\r\n     */\n\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      throw new ReferenceError('This method named \"getOptions\" has been deprecated since version 2.0.0');\n    }\n    /*\r\n     * @public: Add new events to the rendered timeline object\r\n     */\n\n  }, {\n    key: \"addEvent\",\n    value: function addEvent() {\n      var _this9 = this;\n\n      this._debug('addEvent');\n\n      var _args = arguments.length <= 0 ? undefined : arguments[0],\n          events = this.supplement(null, _args[0]),\n          callback = _args.length > 1 && typeof _args[1] === 'function' ? _args[1] : null,\n          userdata = _args.length > 2 ? _args.slice(2) : null,\n          _cacheEvents = [],\n          lastEventId = 0;\n\n      if (this.is_empty(events) || !this._isCompleted) {\n        return;\n      }\n\n      if (this._isCached && 'sessionStorage' in window && window.sessionStorage !== null) {\n        _cacheEvents = JSON.parse(sessionStorage.getItem(this._selector));\n      }\n\n      if (!this.is_empty(_cacheEvents)) {\n        _cacheEvents.sort(this.compareValues('eventId'));\n\n        lastEventId = parseInt(_cacheEvents[_cacheEvents.length - 1].eventId, 10);\n      } //console.log( '!addEvent::before:', _cacheEvents, lastEventId, callback, userdata )\n\n\n      events.forEach(function (evt) {\n        var _one_event = _this9._registerEventData('<div></div>', evt);\n\n        _one_event.eventId = Math.max(lastEventId + 1, parseInt(_one_event.eventId, 10));\n\n        _cacheEvents.push(_one_event);\n\n        lastEventId = parseInt(_one_event.eventId, 10);\n      }); //console.log( '!addEvent::after:', _cacheEvents, lastEventId, callback, userdata )\n      // Cache the event data to the session storage (:> イベントデータをセッションストレージへキャッシュ\n\n      if ('sessionStorage' in window && window.sessionStorage !== null) {\n        sessionStorage.setItem(this._selector, JSON.stringify(_cacheEvents));\n      }\n\n      this._placeEvent();\n\n      if (callback) {\n        this._debug('Fired your callback function after placing additional events.');\n\n        callback(this._element, this._config, userdata);\n      }\n    }\n    /*\r\n     * @public: Remove events from the currently timeline object\r\n     */\n\n  }, {\n    key: \"removeEvent\",\n    value: function removeEvent(targets) {\n      this._debug('removeEvent');\n    }\n    /*\r\n     * @public: Update events on the currently timeline object\r\n     */\n\n  }, {\n    key: \"updateEvent\",\n    value: function updateEvent(events) {\n      this._debug('updateEvent');\n    }\n    /*\r\n     * @public: The method that fires when an event on the timeline is clicked (:> タイムライン上のイベントがクリックされた時に発火\r\n     *\r\n     * Note: You can hook the custom processing with the callback specified in the event parameter. (:> イベントパラメータに指定したコールバックでカスタム処理をフックできます\r\n     */\n\n  }, {\n    key: \"openEvent\",\n    value: function openEvent(event) {\n      this._debug('openEvent');\n\n      var _that = this,\n          _opts = this._config,\n          _cached = this._isCached,\n          _selector = this._selector,\n          _self = event.target,\n          $viewer = $(document).find(Selector.EVENT_VIEW),\n          //eventId   = parseInt( $(_self).attr( 'id' ).replace( 'evt-', '' ), 10 ),\n      uid = $(_self).data('uid'),\n          //meta      = this.supplement( null, $(_self).data( 'meta' ) ),\n      callback = this.supplement(null, $(_self).data('callback')); //console.log( '!openEvent:', _self, $viewer, eventId, uid, meta, callback )\n\n\n      if ($viewer.length > 0) {\n        $viewer.each(function () {\n          var _cacheEvents = null,\n              _eventData = null,\n              _label = $('<div></div>', {\n            class: ClassName.VIEWER_EVENT_TITLE\n          }),\n              _content = $('<div></div>', {\n            class: ClassName.VIEWER_EVENT_CONTENT\n          }),\n              _meta = $('<div></div>', {\n            class: ClassName.VIEWER_EVENT_META\n          }),\n              _image = $('<div></div>', {\n            class: ClassName.VIEWER_EVENT_IMAGE_WRAPPER\n          });\n\n          if (_cached && 'sessionStorage' in window && window.sessionStorage !== null) {\n            _cacheEvents = JSON.parse(sessionStorage.getItem(_selector));\n            _eventData = _cacheEvents.find(function (event) {\n              return event.uid === uid;\n            });\n          } //console.log( '!openEvent:', $(this), $(_self).html(), _eventData.label )\n\n\n          $(this).empty(); // Initialize Viewer\n\n          if (!_that.is_empty(_eventData.image)) {\n            _image.append(\"<img src=\\\"\".concat(_eventData.image, \"\\\" class=\\\"\").concat(ClassName.VIEWER_EVENT_IMAGE, \"\\\" />\"));\n\n            $(this).append(_image);\n          }\n\n          if (!_that.is_empty(_eventData.label)) {\n            _label.html(_eventData.label);\n\n            $(this).append(_label);\n          }\n\n          if (!_that.is_empty(_eventData.content)) {\n            _content.html(_eventData.content);\n\n            $(this).append(_content);\n          }\n\n          if (!_that.is_empty(_eventData.rangeMeta)) {\n            _meta.html(_eventData.rangeMeta);\n\n            $(this).append(_meta);\n          }\n        });\n      }\n\n      if (callback) {\n        if (_opts.debug) {\n          this._debug(\"The callback \\\"\".concat(callback, \"\\\" was called by the \\\"openEvent\\\" method.\"));\n        }\n\n        try {\n          Function.call(null, \"return \".concat(callback))();\n        } catch (e) {\n          throw new TypeError(e);\n        }\n      }\n    }\n    /* ----------------------------------------------------------------------------------------------------------------\r\n     * Utility Api\r\n     * ----------------------------------------------------------------------------------------------------------------\r\n     */\n\n    /*\r\n     * Determine empty that like PHP (:> PHPライクな空判定メソッド\r\n     *\r\n     * @param mixed value (required)\r\n     *\r\n     * @return bool\r\n     */\n\n  }, {\n    key: \"is_empty\",\n    value: function is_empty(value) {\n      if (value == null) {\n        // typeof null -> object : for hack a bug of ECMAScript\n        // Refer: https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/typeof\n        return true;\n      }\n\n      switch (_typeof(value)) {\n        case 'object':\n          if (Array.isArray(value)) {\n            // When object is array:\n            return value.length === 0;\n          } else {\n            // When object is not array:\n            if (Object.keys(value).length > 0 || Object.getOwnPropertySymbols(value).length > 0) {\n              return false;\n            } else if (value.valueOf().length !== undefined) {\n              return value.valueOf().length === 0;\n            } else if (_typeof(value.valueOf()) !== 'object') {\n              return this.is_empty(value.valueOf());\n            } else {\n              return true;\n            }\n          }\n\n        case 'string':\n          return value === '';\n\n        case 'number':\n          return value == 0;\n\n        case 'boolean':\n          return !value;\n\n        case 'undefined':\n        case 'null':\n          return true;\n\n        case 'symbol': // Since ECMAScript6\n\n        case 'function':\n        default:\n          return false;\n      }\n    }\n    /*\r\n     * Determine whether variable is an array (:> 変数が配列かどうかを調べる\r\n     *\r\n     * @param mixed val (required)\r\n     *\r\n     * @return bool\r\n     */\n\n  }, {\n    key: \"is_array\",\n    value: function is_array(val) {\n      return Object.prototype.toString.call(val) === '[object Array]';\n    }\n    /*\r\n     * Await until next process at specific millisec (:> 指定ミリ秒でスリープ\r\n     *\r\n     * @param int msec (optional; defaults to 1)\r\n     *\r\n     * @return void\r\n     */\n\n  }, {\n    key: \"sleep\",\n    value: function sleep() {\n      var msec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return new Promise(function (resolve) {\n        setTimeout(resolve, msec);\n      });\n    }\n    /*\r\n     * Supplemental method for validating arguments in local scope (:> ローカルスコープ内で引数を検証するための補助メソッド\r\n     *\r\n     * @param mixed default_value (required)\r\n     * @param mixed opt_arg (optional)\r\n     * @param mixed opt_callback (optional; function or string of function to call)\r\n     *\r\n     * @return mixed\r\n     */\n\n  }, {\n    key: \"supplement\",\n    value: function supplement(default_value, opt_arg, opt_callback) {\n      if (opt_arg === undefined) {\n        return default_value;\n      }\n\n      if (opt_callback === undefined) {\n        return opt_arg;\n      }\n\n      return opt_callback(default_value, opt_arg);\n    }\n    /*\r\n     * Generate the pluggable unique id (:> プラガブルな一意のIDを生成する\r\n     *\r\n     * @param int digit (optional)\r\n     *\r\n     * @return string\r\n     */\n\n  }, {\n    key: \"generateUniqueID\",\n    value: function generateUniqueID() {\n      var digit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n      return new Date().getTime().toString(16) + Math.floor(digit * Math.random()).toString(16);\n    }\n    /*\r\n     * Round a number with specific digit (:> 桁指定して数値を丸める\r\n     *\r\n     * @param numeric number (required)\r\n     * @param int digit (optional)\r\n     * @param string round_type (optional; defaults to \"round\")\r\n     *\r\n     * @return numeric\r\n     */\n\n  }, {\n    key: \"numRound\",\n    value: function numRound(number, digit) {\n      var round_type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'round';\n      digit = this.supplement(0, digit, this.validateNumeric);\n\n      var _pow = Math.pow(10, digit);\n\n      switch (true) {\n        case /^ceil$/i.test(round_type):\n          return Math.ceil(number * _pow) / _pow;\n\n        case /^floor$/i.test(round_type):\n          return Math.floor(number * _pow) / _pow;\n\n        case /^round$/i.test(round_type):\n        default:\n          return Math.round(number * _pow) / _pow;\n      }\n    }\n    /*\r\n     * Convert hex of color code to rgba (:> カラーコードのHEX値をRGBA値へ変換する\r\n     *\r\n     * @param string hex (required)\r\n     * @param float alpha (optional; defaults to 1)\r\n     *\r\n     * @return string\r\n     */\n\n  }, {\n    key: \"hexToRgbA\",\n    value: function hexToRgbA(hex) {\n      var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n      var _c;\n\n      if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n        _c = hex.substring(1).split('');\n\n        if (_c.length == 3) {\n          _c = [_c[0], _c[0], _c[1], _c[1], _c[2], _c[2]];\n        }\n\n        _c = \"0x\".concat(_c.join(''));\n        return \"rgba(\".concat([_c >> 16 & 255, _c >> 8 & 255, _c & 255].join(','), \",\").concat(alpha, \")\");\n      } // throw new Error( 'Bad Hex' )\n\n\n      return hex;\n    }\n    /*\r\n     * Get the correct datetime with remapping to that if the year is 0 - 99 (:> 年が0～99の場合に再マッピングして正確な日時を取得する\r\n     *\r\n     * @param string datetime_str (required)\r\n     *\r\n     * @return Date Object, or null if failed\r\n     */\n\n  }, {\n    key: \"getCorrectDatetime\",\n    value: function getCorrectDatetime(datetime_str) {\n      var normalizeDate = function normalizeDate(dateString) {\n        return dateString.replace(/-/g, '/');\n      }; // For Safari, IE\n\n\n      if (isNaN(Date.parse(normalizeDate(datetime_str)))) {\n        console.warn(\"\\\"\".concat(datetime_str, \"\\\" Cannot parse date because invalid format.\"));\n        return null;\n      }\n\n      var _tempDate = new Date(normalizeDate(datetime_str)),\n          _chk_date = datetime_str.split(/-|\\//);\n\n      if (parseInt(_chk_date[0], 10) < 100) {\n        // Remapping if year is 0-99\n        _tempDate.setFullYear(parseInt(_chk_date[0], 10));\n      }\n\n      return _tempDate;\n    }\n    /*\r\n     * Method to get week number as extension of Date object (:> Dateオブジェクトで週番号を取得する拡張メソッド\r\n     *\r\n     * @param string date_str (required)\r\n     *\r\n     * @return int\r\n     */\n\n  }, {\n    key: \"getWeek\",\n    value: function getWeek(date_str) {\n      var targetDate = new Date(date_str),\n          _onejan = new Date(targetDate.getFullYear(), 0, 1),\n          _millisecInDay = 24 * 60 * 60 * 1000;\n\n      return Math.ceil(((targetDate - _onejan) / _millisecInDay + _onejan.getDay() + 1) / 7);\n    }\n    /*\r\n     * Retrieve one higher scale (:> 一つ上のスケールを取得する\r\n     *\r\n     * @param string scale (required)\r\n     *\r\n     * @return string higher_scale\r\n     */\n\n  }, {\n    key: \"getHigherScale\",\n    value: function getHigherScale(scale) {\n      var higher_scale = scale;\n\n      switch (true) {\n        case /^millisec(|ond)s?$/i.test(scale):\n          higher_scale = 'second';\n          break;\n\n        case /^seconds?$/i.test(scale):\n          higher_scale = 'minute';\n          break;\n\n        case /^minutes?$/i.test(scale):\n          higher_scale = 'hour';\n          break;\n\n        case /^quarter-?(|hour)$/i.test(scale):\n        case /^half-?(|hour)$/i.test(scale):\n        case /^hours?$/i.test(scale):\n          higher_scale = 'day';\n          break;\n\n        case /^days?$/i.test(scale):\n        case /^weeks?$/i.test(scale):\n          higher_scale = 'month';\n          break;\n\n        case /^months?$/i.test(scale):\n          higher_scale = 'year';\n          break;\n\n        case /^years?$/i.test(scale):\n          higher_scale = 'lustrum';\n          break;\n\n        case /^lustrum$/i.test(scale):\n          higher_scale = 'decade';\n          break;\n\n        case /^dec(ade|ennium)$/i.test(scale):\n          higher_scale = 'century';\n          break;\n\n        case /^century$/i.test(scale):\n          higher_scale = 'millennium';\n          break;\n\n        case /^millenniums?|millennia$/i.test(scale):\n        default:\n          break;\n      }\n\n      return higher_scale;\n    }\n    /*\r\n     * Retrieve the date string of specified locale (:> 指定されたロケールの日付文字列を取得する\r\n     *\r\n     * @param string date_seed (required)\r\n     * @param string scale (required)\r\n     * @param string locales (optional)\r\n     * @param object options (optional)\r\n     *\r\n     * @return string locale_string\r\n     */\n\n  }, {\n    key: \"getLocaleString\",\n    value: function getLocaleString(date_seed, scale) {\n      var locales = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en-US';\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      function toLocaleStringSupportsLocales() {\n        try {\n          new Date().toLocaleString('i');\n        } catch (e) {\n          return e.name === \"RangeError\";\n        }\n\n        return false;\n      }\n\n      var is_toLocalString = toLocaleStringSupportsLocales(),\n          locale_string = '',\n          _options = {},\n          getOrdinal = function getOrdinal(n) {\n        var s = ['th', 'st', 'nd', 'rd'],\n            v = n % 100;\n        return n + (s[(v - 20) % 10] || s[v] || s[0]);\n      },\n          getZerofill = function getZerofill(num) {\n        var digit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n\n        var strDuplicate = function strDuplicate(n, str) {\n          return Array(n + 1).join(str);\n        },\n            zero = strDuplicate(digit - 1, '0');\n\n        return String(num).length == digit ? String(num) : (zero + num).substr(num * -1);\n      },\n          _prop,\n          _temp;\n\n      for (_prop in options) {\n        if (_prop === 'timeZone' || _prop === 'hour12') {\n          _options[_prop] = options[_prop];\n        }\n      } //console.log( '!2', date_seed, scale, locales, options[scale], is_toLocalString )\n\n\n      switch (true) {\n        case /^millenniums?|millennia$/i.test(scale):\n        case /^century$/i.test(scale):\n        case /^dec(ade|ennium)$/i.test(scale):\n        case /^lustrum$/i.test(scale):\n          if (options.hasOwnProperty(scale) && options[scale] === 'ordinal') {\n            locale_string = getOrdinal(date_seed);\n          } else {\n            locale_string = date_seed;\n          }\n\n          break;\n\n        case /^years?$/i.test(scale):\n          if (is_toLocalString && options.hasOwnProperty(scale)) {\n            if (['numeric', '2-digit'].includes(options[scale])) {\n              _options.year = options[scale];\n              locale_string = this.getCorrectDatetime(date_seed).toLocaleString(locales, _options);\n            } else if ('zerofill' === options[scale]) {\n              locale_string = getZerofill(date_seed);\n            }\n          }\n\n          locale_string = this.is_empty(locale_string) ? this.getCorrectDatetime(date_seed).getFullYear() : locale_string;\n          break;\n\n        case /^months?$/i.test(scale):\n          if (is_toLocalString && options.hasOwnProperty(scale)) {\n            if (['numeric', '2-digit', 'narrow', 'short', 'long'].includes(options[scale])) {\n              _options.month = options[scale];\n              locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n            }\n          } //locale_string = new Date( date_seed ).getMonth() + 1\n\n\n          locale_string = this.is_empty(locale_string) ? new Date(date_seed).getMonth() + 1 : locale_string;\n          break;\n\n        case /^weeks?$/i.test(scale):\n          _temp = date_seed.split(',');\n\n          if (options.hasOwnProperty(scale) && options[scale] === 'ordinal') {\n            locale_string = getOrdinal(_temp);\n          } else {\n            locale_string = _temp[1];\n          }\n\n          break;\n\n        case /^weekdays?$/i.test(scale):\n          _temp = date_seed.split(',');\n\n          if (is_toLocalString) {\n            _options.weekday = options.hasOwnProperty('weekday') ? options.weekday : 'narrow';\n            locale_string = new Date(_temp[0]).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( _temp[0] ).toLocaleString( locales, _options )\n          } else {\n            var _weekday = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n            locale_string = _weekday[_temp[1]];\n          }\n\n          break;\n\n        case /^days?$/i.test(scale):\n          if (is_toLocalString) {\n            _options.day = options.hasOwnProperty('day') ? options.day : 'numeric';\n            locales = options.hasOwnProperty('day') ? locales : 'en-US';\n            locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n          } else {\n            locale_string = new Date(date_seed).getDate(); //locale_string = this.getCorrectDatetime( date_seed ).getDate()\n          }\n\n          break;\n\n        case /^hours?$/i.test(scale):\n        case /^(half|quarter)-?hours?$/i.test(scale):\n          // console.log( '!getLocaleString:', date_seed )\n          if (typeof date_seed === 'string') {\n            var _parts = date_seed.split(':');\n\n            if (_parts.length == 1) {\n              date_seed = \"\".concat(date_seed, \":00:00\");\n            } else if (_parts.length == 2) {\n              date_seed = \"\".concat(date_seed, \":00\");\n            }\n          }\n\n          if (is_toLocalString) {\n            _options.hour = options.hasOwnProperty('hour') ? options.hour : 'numeric';\n\n            if (options.hasOwnProperty('minute')) {\n              _options.minute = options.hasOwnProperty('minute') ? options.minute : 'numeric';\n            }\n\n            locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n          } else {\n            locale_string = new Date(date_seed).getHours(); //locale_string = this.getCorrectDatetime( date_seed ).getHours()\n          }\n\n          break;\n\n        case /^minutes?$/i.test(scale):\n          if (is_toLocalString) {\n            _options.minute = options.hasOwnProperty('minute') ? options.minute : 'numeric';\n\n            if (options.hasOwnProperty('hour')) {\n              _options.hour = options.hasOwnProperty('hour') ? options.hour : 'numeric';\n            }\n\n            locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n          } else {\n            locale_string = new Date(date_seed).getMinutes(); //locale_string = this.getCorrectDatetime( date_seed ).getMinutes()\n          }\n\n          break;\n\n        case /^seconds?$/i.test(scale):\n          if (is_toLocalString) {\n            _options.second = options.hasOwnProperty('second') ? options.second : 'numeric';\n\n            if (options.hasOwnProperty('hour')) {\n              _options.hour = options.hasOwnProperty('hour') ? options.hour : 'numeric';\n            }\n\n            if (options.hasOwnProperty('minute')) {\n              _options.minute = options.hasOwnProperty('minute') ? options.minute : 'numeric';\n            }\n\n            locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n          } else {\n            locale_string = new Date(date_seed).getSeconds(); //locale_string = this.getCorrectDatetime( date_seed ).getSeconds()\n          }\n\n          break;\n\n        case /^millisec(|ond)s?$/i.test(scale):\n        default:\n          locale_string = new Date(date_seed); //locale_string = this.getCorrectDatetime( date_seed )\n\n          break;\n      }\n\n      return locale_string;\n    }\n    /*\r\n     * Get the rendering width of the given string (:> 指定された文字列のレンダリング幅を取得する\r\n     *\r\n     * @param string str (required)\r\n     *\r\n     * @return int\r\n     */\n\n  }, {\n    key: \"strWidth\",\n    value: function strWidth(str) {\n      var _str_ruler = $('<span id=\"jqtl-str-ruler\"></span>'),\n          _width = 0;\n\n      if ($('#jqtl-str-ruler').length == 0) {\n        $('body').append(_str_ruler);\n      }\n\n      _width = $('#jqtl-str-ruler').text(str).get(0).offsetWidth;\n      $('#jqtl-str-ruler').empty();\n      return _width;\n    }\n    /*\r\n     * Sort an array by value of specific property (Note: destructive method) (:> 指定プロパティの値で配列をソートする（注:破壊的メソッド）\r\n     * Usage: Object.sort( this.compareValues( property, order ) )\r\n     *\r\n     * @param string key (required)\r\n     * @param string order (optional; defaults to 'asc')\r\n     *\r\n     * @return object\r\n     */\n\n  }, {\n    key: \"compareValues\",\n    value: function compareValues(key) {\n      var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'asc';\n      return function (a, b) {\n        if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n          return 0;\n        }\n\n        var varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];\n        var varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];\n        var comparison = 0;\n\n        if (varA > varB) {\n          comparison = 1;\n        } else if (varA < varB) {\n          comparison = -1;\n        }\n\n        return order === 'desc' ? comparison * -1 : comparison;\n      };\n    }\n    /*\r\n     * Validators\r\n     */\n\n  }, {\n    key: \"validateString\",\n    value: function validateString(def, val) {\n      return typeof val === 'string' && val !== '' ? val : def;\n    }\n  }, {\n    key: \"validateNumeric\",\n    value: function validateNumeric(def, val) {\n      return typeof val === 'number' ? Number(val) : def;\n    }\n  }, {\n    key: \"validateBoolean\",\n    value: function validateBoolean(def, val) {\n      return typeof val === 'boolean' || _typeof(val) === 'object' && val !== null && typeof val.valueOf() === 'boolean' ? val : def;\n    }\n  }, {\n    key: \"validateObject\",\n    value: function validateObject(def, val) {\n      return _typeof(val) === 'object' ? val : def;\n    } // Static\n\n  }], [{\n    key: \"_jQueryInterface\",\n    value: function _jQueryInterface(config) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key3 = 1; _key3 < _len; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n\n      return this.each(function () {\n        var data = $(this).data(DATA_KEY);\n\n        var _config = _objectSpread({}, Default, $(this).data(), _typeof(config) === 'object' && config ? config : {}); //console.log( '!_jQueryInterface:', data, config, args )\n\n\n        if (!data) {\n          // Apply the plugin and store the instance in data (:> プラグインを適用する\n          data = new Timeline(this, _config);\n          $(this).data(DATA_KEY, data);\n        }\n\n        if (typeof config === 'string' && config.charAt(0) != '_') {\n          if (typeof data[config] === 'undefined') {\n            // Call no method\n            throw new ReferenceError(\"No method named \\\"\".concat(config, \"\\\"\"));\n          } // Call public method (:> （インスタンスがpublicメソッドを持っている場合）メソッドを呼び出す\n\n\n          data[config](args);\n        } else {\n          if (!data._isInitialized) {\n            data._init();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"VERSION\",\n    get: function get() {\n      return VERSION;\n    }\n  }, {\n    key: \"Default\",\n    get: function get() {\n      return Default;\n    }\n  }]);\n\n  return Timeline;\n}(); // class end\n\n/*\r\n * jQuery\r\n */\n\n\n$.fn[NAME] = Timeline._jQueryInterface;\n$.fn[NAME].Constructor = Timeline;\n\n$.fn[NAME].noConflict = function () {\n  $.fn[NAME] = JQUERY_NO_CONFLICT;\n  return Timeline._jQueryInterface;\n};\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}