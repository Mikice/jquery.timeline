{"version":3,"sources":["bundle.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_typeof","obj","Symbol","iterator","constructor","prototype","_slicedToArray","arr","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","_iterableToArrayLimit","TypeError","_nonIterableRest","_objectSpread","target","arguments","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","defineProperty","configurable","writable","_defineProperties","props","descriptor","NAME","DATA_KEY","EVENT_KEY","PREFIX","JQUERY_NO_CONFLICT","$","fn","Default","type","scale","startDatetime","endDatetime","datetimePrefix","headline","display","title","range","locale","format","hour12","footer","content","zerofillYear","sidebar","sticky","overlay","list","rows","rowHeight","width","height","minGridSize","marginHeight","ruler","top","lines","fontSize","color","background","rangeAlign","naviIcon","left","right","loader","hideScrollbar","eventMeta","showPointer","storage","debug","LimitScaleGrids","millennium","century","decade","lustrum","year","month","week","day","hour","quarterHour","halfHour","minute","second","EventParams","uid","eventId","x","y","bgColor","bdColor","label","image","margin","rangeMeta","size","extend","callback","relation","Event","INITIALIZED","HIDE","SHOW","CLICK_EVENT","FOCUSIN_EVENT","FOCUSOUT_EVENT","MOUSEENTER_POINTER","MOUSELEAVE_POINTER","ClassName","TIMELINE_CONTAINER","TIMELINE_MAIN","TIMELINE_HEADLINE","TIMELINE_HEADLINE_WRAPPER","HEADLINE_TITLE","RANGE_META","RANGE_SPAN","TIMELINE_EVENT_CONTAINER","TIMELINE_BACKGROUND_GRID","TIMELINE_RELATION_LINES","TIMELINE_EVENTS","TIMELINE_EVENT_NODE","TIMELINE_EVENT_LABEL","TIMELINE_EVENT_THUMBNAIL","TIMELINE_RULER_LINES","TIMELINE_RULER_ITEM","TIMELINE_SIDEBAR","TIMELINE_SIDEBAR_MARGIN","TIMELINE_SIDEBAR_ITEM","TIMELINE_FOOTER","TIMELINE_FOOTER_CONTENT","VIEWER_EVENT_TITLE","VIEWER_EVENT_CONTENT","VIEWER_EVENT_META","VIEWER_EVENT_IMAGE_WRAPPER","VIEWER_EVENT_IMAGE","VIEWER_EVENT_TYPE_POINTER","HIDE_SCROLLBAR","RULER_ITEM_ALIGN_LEFT","STICKY_LEFT","OVERLAY","ALIGN_SELF_RIGHT","LOADER_ITEM","Selector","EVENT_NODE","EVENT_VIEW","RULER_TOP","RULER_BOTTOM","TIMELINE_RULER_TOP","TIMELINE_RULER_BOTTOM","LOADER","DEFAULT_EVENTS","Timeline","element","config","instance","Constructor","_classCallCheck","this","_config","_getConfig","_element","_selector","_isInitialized","_isCached","_isCompleted","_isShown","_instanceProps","protoProps","staticProps","_len","args","_key2","each","data","charAt","ReferenceError","_init","get","filteredKey","test","_this2","_debug","_elem","tagName","id","className","replace","toLowerCase","_calcVars","_verifyMaxRenderableRange","RangeError","_renderView","afterInitEvent","trigger","off","_loadEvent","_placeEvent","document","on","event","openEvent","_activeEvent","_hoverPointer","_this3","_opts","_props","begin","supplement","_getPluggableDatetime","end","scaleSize","validateNumeric","_getPluggableRows","rowSize","_temp","_verifyScale","_values","values","_averageDays","numRound","reduce","v","_baseDaysOfScale","_totalWidth","days","grids","variableScale","fullwidth","Math","ceil","_prop","fullheight","visibleWidth","visibleHeight","is_empty","round_type","_date","getFirstDate","dateObj","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","_ms","_higherScale","getHigherScale","getCorrectDatetime","setTime","getTime","_filterScaleKeyName","_tmpDate","getLastDate","str_like_params","params","JSON","parse","stringify","Function","hasOwnProperty","console","warn","fixed_rows","_diffDate","pow","_tl_container","class","style","_tl_main","log","css","addClass","prepend","_createHeadline","append","_createEventContainer","_createRuler","bottom","parseInt","find","_createSideIndex","_createFooter","_display","validateBoolean","_title","_range","_locale","_format","_begin","_end","_tl_headline","_wrapper","_meta","toLocaleString","pos_y","is_dotted","_this4","_actualHeight","_container","_events_bg","_events_lines","_events_body","_cy","ctx_grid","getContext","drawVerticalLine","pos_x","strokeStyle","lineWidth","beginPath","setLineDash","moveTo","lineTo","closePath","stroke","_pos_y","fillStyle","fillRect","_i2","_pos_y2","_bc","_sy","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","_val","return","_i3","position","_this5","ruler_line","def","val","is_array","line_height","font_size","text_color","ruler_opts","_fullwidth","_fullheight","_ruler","_ruler_bg","_ruler_body","_finalLines","ctx_ruler","canvas","some","line_scale","idx","_line_y","_line_grids","_grid_x","_correction","_filterVariableScale","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_getGridsPerScale","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_val2","_createRulerContent","target_scale","scales","retObj","_arr2","_i4","_dt","_days","grid_size","_newKey","split","getWeek","getDay","_scopes","_scale_grids","_sep","_tmp","_y","_mil","_cen","_dec","_lus","_m","_wd","_w","_h","_min","weekday","datetime","toString","_scope","toIterableObject","validateString","validateObject","_ruler_lines","_arr3","_i5","_key","_item_width","_line","_ruler_string","getLocaleString","_data_ruler_item","String","attr","html","strWidth","_sticky","_overlay","_sbList","_margin","_list","clone","_item","_content","_tl_footer","date1","date2","absval","_dt1","_dt2","diffMS","retval","lastDayOfMonth","isLeapYear","sum","setMonth","abs","_bd","_ed","_dy","_cd","_i6","_cd2","_i7","_cd3","_i8","_cd4","_i9","_cd5","_that","_event_list","_cnt","events","lastEventId","children","_attr","_visible_width","_visible_height","_showLoader","_evt_params","_getPluggableParams","_one_event","_registerEventData","max","cacheIds","_evt","_this","_chkId","includes","_saveToCache","margin_top","_loader","match","Boolean","str","_fountain_text","text","_custom_loader","prop","remove","event_element","_x","_c","_this6","new_event","generateUniqueID","_relation","_getCoordinateX","start","floor","row","date","coordinate_x","strageEngine","window","localStorage","sessionStorage","setItem","getItem","removeItem","_this7","_evt_container","_relation_lines","_loadToCache","empty","_evt_elem","_createEventNode","_drawRelationLine","sleep","then","_hideLoader","fadeIn","hexToRgbA","backgroundColor","_pointSize","_getPointerSize","_shiftX","_shiftY","_imgSize","meta","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_step4$value","_max","min","_size","_this8","_canvas","ctx_relations","drawLine","_sx","_ex","_ey","evt","_ba","_curveType","_radius","_arr4","_i10","before","after","quadraticCurveTo","bezierCurveTo","clearRect","_targetId","_targetEvent","_rel","_tl_events","_cache","_events","_uid","_data","removeClass","_base","_z","message","throwType","_msg","_sty","_message","_args","userdata","slice","removeData","_removeCache","_arr5","_i11","_movX","scrollWidth","_mapPlacedEvents","sort","compareValues","lastEvent","_events2","targetEvent","_now","_nowX","scrollLeft","_this9","validateArray","_cacheEvents","add_done","_this10","targets","condition","remove_done","cond","RegExp","_idx","splice","_fromX","from","_toX","to","_this11","update_done","_upc_event","_old_index","_old_event","_new_event","assign","_cached","_self","$viewer","_eventData","_label","_image","valueOf","is_iterable","index","msec","Promise","resolve","setTimeout","default_value","opt_arg","opt_callback","digit","random","number","_pow","round","hex","alpha","substring","join","datetime_str","normalizeDate","dateString","isNaN","_tempDate","_chk_date","setFullYear","date_str","targetDate","_onejan","higher_scale","date_seed","locales","options","is_toLocalString","name","toLocaleStringSupportsLocales","locale_string","_options","getOrdinal","s","num","zero","substr","getZerofill","_parts","_width","_str_ruler","offsetWidth","order","b","varA","toUpperCase","varB","comparison","Number","_jQueryInterface","noConflict"],"mappings":"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","file":"jquery.timeline.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n//import '@babel/polyfill'\n\n/*!\r\n * jQuery Timeline\r\n * ------------------------\r\n * Version: 2.0.0a1\r\n * Author: Ka2 (https://ka2.org/)\r\n * Repository: https://github.com/ka215/jquery.timeline/tree/develop\r\n * Lisenced: MIT\r\n */\n\n/*\r\n * Constants\r\n */\nvar NAME = \"Timeline\";\nvar VERSION = \"2.0.0a1\";\nvar DATA_KEY = \"jq.timeline\";\nvar EVENT_KEY = \".\".concat(DATA_KEY);\nvar PREFIX = \"jqtl-\";\nvar LOADING_MESSAGE = \"Loading...\";\nvar MIN_POINTER_SIZE = 12; //const DATA_API_KEY       = \".data-api\"\n\nvar JQUERY_NO_CONFLICT = $.fn[NAME];\n/*\r\n * Defaults of plugin options\r\n */\n\nvar Default = {\n  type: \"bar\",\n  // View type of timeline event is either \"bar\" or \"point\"\n  scale: \"day\",\n  // Timetable's minimum level scale is either \"year\", \"month\", \"week\", \"day\", \"hour\", \"minute\"; Enhanced since v2.0.0\n  startDatetime: \"currently\",\n  // Beginning date time of timetable on the timeline. format is ( \"^d{4}(/|-)d{2}(/|-)d{2}\\sd{2}:d{2}:d{2}$\" ) or \"currently\"\n  endDatetime: \"auto\",\n  // Ending date time of timetable on the timeline. format is ( \"^d{4}(/|-)d{2}(/|-)d{2}\\sd{2}:d{2}:d{2}$\" ) or \"auto\"; Added new since v2.0.0\n  datetimePrefix: \"\",\n  // The prefix of the date and time notation displayed in the headline\n  // showHeadline : true, // --> Deprecated since v2.0.0\n  headline: {\n    // Content in the headline; Added new since v2.0.0\n    display: true,\n    // Whether to display headline is instead of former showHeadline\n    title: \"\",\n    range: true,\n    // Hide if false\n    locale: \"en-US\",\n    // This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\n    format: {\n      hour12: false // This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\n\n    }\n  },\n  footer: {\n    // Content in the footer; Added new since v2.0.0\n    display: true,\n    // Whether to display footer\n    content: \"\",\n    range: false,\n    // Visible if true\n    locale: \"en-US\",\n    // This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\n    format: {\n      hour12: false // This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\n\n    }\n  },\n\n  /* datetimeFormat  : { // --> Deprecated since v2.0.0\r\n      full        : \"j M Y\", // or \"Y/m/d\" etc.\r\n      year        : \"Y\",\r\n      month       : \"M Y\", // or \"F\" etc.\r\n      day         : \"D, j M\", // or \"j\" etc.\r\n      years       : \"Y\", \r\n      months      : \"F\", \r\n      days        : \"j\",\r\n      meta        : \"Y/m/d H:i\", // start datetime in meta of Event Detail; or \"g:i A, D F j, Y\"\r\n      metato      : \"\" // --> Deprecated since v2.0.0\r\n  }, */\n  // minuteInterval : 30, // --> Deprecated since v2.0.0\n  zerofillYear: false,\n  // It's outputted at the \"0099\" if true, the \"99\" if false\n  range: 3,\n  // Override the scale range of the timeline to be rendered when endDatetime is undefined or \"auto\"; Enhanced since v2.0.0\n  sidebar: {\n    // Settings of sidebar; Added new since v2.0.0\n    sticky: false,\n    overlay: false,\n    list: []\n  },\n  rows: \"auto\",\n  // Rows of timeline event area. defaults to \"auto\"; Enhanced since v2.0.0\n  rowHeight: 48,\n  // Height of one row\n  width: \"auto\",\n  // Fixed width (pixel) of timeline view. defaults to \"auto\"; Added new since v2.0.0\n  height: \"auto\",\n  // Fixed height (pixel) of timeline view. defaults to \"auto\" ( rows * rowHeight )\n  // minGridPer   : 2, // --> Deprecated since v2.0.0\n  minGridSize: 30,\n  // Override value of minimum size (pixel) of timeline grid; Enhanced since v2.0.0\n  marginHeight: 2,\n  // Margin (pixel) top and bottom of events on the timeline; Added new since v2.0.0\n  ruler: {\n    // Settings of ruler; Added new since v2.0.0\n    top: {\n      // Can define the ruler position to top or bottom and both\n      lines: [],\n      // defaults to this.option.scale; c.g. [ 'year', 'month', 'day', 'weekday' ]\n      height: 30,\n      fontSize: 14,\n      color: \"#777777\",\n      background: \"#FFFFFF\",\n      locale: \"en-US\",\n      // This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\n      format: {\n        hour12: false // This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\n\n      }\n    }\n  },\n  rangeAlign: \"current\",\n  // Possible values are \"left\", \"center\", \"right\", \"current\", \"latest\" and specific event id\n  naviIcon: {\n    // Define class name\n    left: \"\".concat(PREFIX, \"circle-left\"),\n    right: \"\".concat(PREFIX, \"circle-right\")\n  },\n  loader: \"default\",\n  // Custom loader definition, possible values are \"default\", false and selector of loader element; Added new since v2.0.0\n  hideScrollbar: false,\n  // Whether or not to display the scroll bar displayed when the width of the timeline overflows (even if it is set to non-display, it will not function depending on the browser); Added new since v2.0.0\n  eventMeta: {\n    // Display meta of range on event node when the timeline type is \"bar\"; Added new since v2.0.0\n    display: false,\n    scale: \"day\",\n    locale: \"en-US\",\n    // This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\n    format: {\n      hour12: false\n    },\n    // This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\n    content: \"\" // This is value for if you want to show custom content on the meta\n\n  },\n  showPointer: true,\n  // i18n         : {}, // --> Deprecated since v1.0.6\n  // langsDir     : \"./langs/\", // --> Deprecated since v1.0.6\n  // httpLanguage : false, // --> Deprecated since v1.0.6\n  // duration     : 150, // duration of animate as each transition effects; Added v1.0.6 --> Deprecated since v2.0.0\n  storage: 'session',\n  // Specification of Web storage to cache event data, defaults to sessionStorage; Added new since v2.0.0\n  debug: false\n  /*\r\n   * Define the limited grid number per scale of timeline\r\n   */\n\n};\nvar LimitScaleGrids = {\n  millennium: 100,\n  // = 100 : 100000 years\n  century: 100 * 5,\n  // = 500 : 50000 years\n  decade: 10 * 50,\n  // = 500 : 5000 years\n  lustrum: 5 * 100,\n  // = 500 : 2500 years\n  year: 500,\n  // = 500 : 500 years\n  month: 12 * 45,\n  // = 540 : 45 years\n  week: 53 * 10,\n  // = 530 : 10 years\n  day: 366,\n  // = 366 : 1 year\n  hour: 24 * 30,\n  // = 720 : 30 days\n  quarterHour: 24 * 4 * 7.5,\n  // = 720 : 7.5 days\n  halfHour: 24 * 2 * 15,\n  // = 720 : 15 days\n  minute: 60 * 12,\n  // = 720 : 12 hours\n  second: 60 * 15 // = 900 : 15 minutes\n\n  /*\r\n  const DefaultType = {\r\n      \r\n  }\r\n  */\n\n  /*\r\n   * Defaults of event parameters on timeline\r\n   */\n\n};\nvar EventParams = {\n  uid: '',\n  eventId: '',\n  x: 0,\n  y: Default.marginHeight,\n  width: Default.minGridSize,\n  height: Default.rowHeight - Default.marginHeight * 2,\n  bgColor: '#E7E7E7',\n  // background color\n  color: '#343A40',\n  // text color\n  bdColor: '#6C757D',\n  // border color\n  label: '',\n  content: '',\n  image: '',\n  margin: Default.marginHeight,\n  rangeMeta: '',\n  size: 'normal',\n  // diameter of pointer\n  extend: {},\n  callback: function callback() {},\n  relation: {\n    /*\r\n    before    : \r\n    after     : \r\n    linesize  : \r\n    linecolor : \r\n    curve     : \r\n    */\n  }\n};\nvar Event = {\n  INITIALIZED: \"initialized\".concat(EVENT_KEY),\n  HIDE: \"hide\".concat(EVENT_KEY),\n  SHOW: \"show\".concat(EVENT_KEY),\n  CLICK_EVENT: \"click.open\".concat(EVENT_KEY),\n  FOCUSIN_EVENT: \"focusin.event\".concat(EVENT_KEY),\n  FOCUSOUT_EVENT: \"focusout.event\".concat(EVENT_KEY),\n  MOUSEENTER_POINTER: \"mouseenter.pointer\".concat(EVENT_KEY),\n  MOUSELEAVE_POINTER: \"mouseleave.pointer\".concat(EVENT_KEY)\n};\nvar ClassName = {\n  TIMELINE_CONTAINER: \"\".concat(PREFIX, \"container\"),\n  TIMELINE_MAIN: \"\".concat(PREFIX, \"main\"),\n  TIMELINE_HEADLINE: \"\".concat(PREFIX, \"headline\"),\n  TIMELINE_HEADLINE_WRAPPER: \"\".concat(PREFIX, \"headline-wrapper\"),\n  HEADLINE_TITLE: \"\".concat(PREFIX, \"timeline-title\"),\n  RANGE_META: \"\".concat(PREFIX, \"range-meta\"),\n  RANGE_SPAN: \"\".concat(PREFIX, \"range-span\"),\n  TIMELINE_EVENT_CONTAINER: \"\".concat(PREFIX, \"event-container\"),\n  TIMELINE_BACKGROUND_GRID: \"\".concat(PREFIX, \"bg-grid\"),\n  TIMELINE_RELATION_LINES: \"\".concat(PREFIX, \"relation-lines\"),\n  TIMELINE_EVENTS: \"\".concat(PREFIX, \"events\"),\n  TIMELINE_EVENT_NODE: \"\".concat(PREFIX, \"event-node\"),\n  TIMELINE_EVENT_LABEL: \"\".concat(PREFIX, \"event-label\"),\n  TIMELINE_EVENT_THUMBNAIL: \"\".concat(PREFIX, \"event-thumbnail\"),\n  TIMELINE_RULER_LINES: \"\".concat(PREFIX, \"ruler-line-rows\"),\n  TIMELINE_RULER_ITEM: \"\".concat(PREFIX, \"ruler-line-item\"),\n  TIMELINE_SIDEBAR: \"\".concat(PREFIX, \"side-index\"),\n  TIMELINE_SIDEBAR_MARGIN: \"\".concat(PREFIX, \"side-index-margin\"),\n  TIMELINE_SIDEBAR_ITEM: \"\".concat(PREFIX, \"side-index-item\"),\n  TIMELINE_FOOTER: \"\".concat(PREFIX, \"footer\"),\n  TIMELINE_FOOTER_CONTENT: \"\".concat(PREFIX, \"footer-content\"),\n  VIEWER_EVENT_TITLE: \"\".concat(PREFIX, \"event-title\"),\n  VIEWER_EVENT_CONTENT: \"\".concat(PREFIX, \"event-content\"),\n  VIEWER_EVENT_META: \"\".concat(PREFIX, \"event-meta\"),\n  VIEWER_EVENT_IMAGE_WRAPPER: \"\".concat(PREFIX, \"event-image-wrapper\"),\n  VIEWER_EVENT_IMAGE: \"\".concat(PREFIX, \"event-image\"),\n  VIEWER_EVENT_TYPE_POINTER: \"\".concat(PREFIX, \"event-type-pointer\"),\n  HIDE_SCROLLBAR: \"\".concat(PREFIX, \"hide-scrollbar\"),\n  HIDE: \"\".concat(PREFIX, \"hide\"),\n  RULER_ITEM_ALIGN_LEFT: \"\".concat(PREFIX, \"rli-left\"),\n  STICKY_LEFT: \"\".concat(PREFIX, \"sticky-left\"),\n  OVERLAY: \"\".concat(PREFIX, \"overlay\"),\n  ALIGN_SELF_RIGHT: \"\".concat(PREFIX, \"align-self-right\"),\n  LOADER_ITEM: \"\".concat(PREFIX, \"loading\")\n};\nvar Selector = {\n  EVENT_NODE: \".\".concat(PREFIX, \"event-node\"),\n  EVENT_VIEW: \".timeline-event-view, .\".concat(PREFIX, \"event-view\"),\n  RULER_TOP: \".\".concat(PREFIX, \"ruler-top\"),\n  RULER_BOTTOM: \".\".concat(PREFIX, \"ruler-bottom\"),\n  TIMELINE_CONTAINER: \".\".concat(ClassName.TIMELINE_CONTAINER),\n  TIMELINE_RULER_TOP: \".\".concat(PREFIX, \"ruler-top\"),\n  TIMELINE_RULER_BOTTOM: \".\".concat(PREFIX, \"ruler-bottom\"),\n  TIMELINE_RELATION_LINES: \".\".concat(ClassName.TIMELINE_RELATION_LINES),\n  TIMELINE_EVENTS: \".\".concat(ClassName.TIMELINE_EVENTS),\n  TIMELINE_SIDEBAR_ITEM: \".\".concat(ClassName.TIMELINE_SIDEBAR_ITEM),\n  TIMELINE_EVENT_NODE: \".\".concat(ClassName.TIMELINE_EVENT_NODE),\n  VIEWER_EVENT_TYPE_POINTER: \".\".concat(ClassName.VIEWER_EVENT_TYPE_POINTER),\n  LOADER: \"#\".concat(PREFIX, \"loader\"),\n  DEFAULT_EVENTS: \".timeline-events\"\n  /*\r\n   * The plugin core class of the jQuery Timeline as controller\r\n   */\n\n};\n\nvar Timeline =\n/*#__PURE__*/\nfunction () {\n  function Timeline(element, config) {\n    _classCallCheck(this, Timeline);\n\n    this._config = this._getConfig(config);\n    this._element = element;\n    this._selector = null;\n    this._isInitialized = false;\n    this._isCached = false;\n    this._isCompleted = false;\n    this._isShown = false;\n    this._instanceProps = {};\n  } // Getters\n\n\n  _createClass(Timeline, [{\n    key: \"_getConfig\",\n    // Private\n\n    /*\r\n     * @private: Define the default options of this plugin\r\n     */\n    value: function _getConfig(config) {\n      config = _objectSpread({}, Default, config);\n      return config;\n    }\n    /*\r\n     * @private: Filter the scale key name for LimitScaleGrids\r\n     */\n\n  }, {\n    key: \"_filterScaleKeyName\",\n    value: function _filterScaleKeyName(key) {\n      var filteredKey = null;\n\n      switch (true) {\n        case /^quarter-?(|hour)$/i.test(key):\n          filteredKey = 'quarterHour';\n          break;\n\n        case /^half-?(|hour)$/i.test(key):\n          filteredKey = 'halfHour';\n          break;\n\n        default:\n          filteredKey = key;\n      }\n\n      return filteredKey;\n    }\n    /*\r\n     * @private: Initialize the plugin\r\n     */\n\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      var _this2 = this;\n\n      this._debug('_init');\n\n      var _elem = this._element,\n          _selector = \"\".concat(_elem.tagName).concat(_elem.id ? \"#\".concat(_elem.id) : '').concat(_elem.className ? \".\".concat(_elem.className.replace(/\\s/g, '.')) : '');\n\n      this._selector = _selector.toLowerCase();\n\n      if (this._isInitialized || this._isCompleted) {\n        return;\n      }\n\n      this._calcVars();\n\n      if (!this._verifyMaxRenderableRange()) {\n        throw new RangeError(\"Timeline display period exceeds maximum renderable range.\");\n      }\n\n      if (!this._isInitialized) {\n        this._renderView();\n\n        var afterInitEvent = $.Event(Event.INITIALIZED, {\n          _elem: _elem\n        });\n        $(_elem).trigger(afterInitEvent);\n        $(_elem).off(Event.INITIALIZED);\n      }\n\n      if (!this._isCached) {\n        this._loadEvent();\n      }\n\n      if (this._isCached) {\n        this._placeEvent();\n      } // Assign events for the timeline\n\n\n      $(document).on(Event.CLICK_EVENT, \"\".concat(this._selector, \" \").concat(Selector.EVENT_NODE), function (event) {\n        return _this2.openEvent(event);\n      });\n      $(_elem).on(Event.FOCUSIN_EVENT, Selector.TIMELINE_EVENT_NODE, function (event) {\n        return _this2._activeEvent(event);\n      });\n      $(_elem).on(Event.FOCUSOUT_EVENT, Selector.TIMELINE_EVENT_NODE, function (event) {\n        return _this2._activeEvent(event);\n      }); //console.log( '!_init:', )\n\n      if (/^point(|er)$/i.test(this._config.type)) {\n        $(_elem).on(Event.MOUSEENTER_POINTER, Selector.VIEWER_EVENT_TYPE_POINTER, function (event) {\n          return _this2._hoverPointer(event);\n        });\n        $(_elem).on(Event.MOUSELEAVE_POINTER, Selector.VIEWER_EVENT_TYPE_POINTER, function (event) {\n          return _this2._hoverPointer(event);\n        });\n      }\n\n      this._isCompleted = true;\n    }\n    /*\r\n     * @private: Calculate each properties of the timeline instance\r\n     */\n\n  }, {\n    key: \"_calcVars\",\n    value: function _calcVars() {\n      var _this3 = this;\n\n      var _opts = this._config,\n          _props = {};\n      _props.begin = this.supplement(null, this._getPluggableDatetime(_opts.startDatetime, 'first'));\n      _props.end = this.supplement(null, this._getPluggableDatetime(_opts.endDatetime, 'last'));\n      _props.scaleSize = this.supplement(null, _opts.minGridSize, this.validateNumeric);\n      _props.rows = this._getPluggableRows();\n      _props.rowSize = this.supplement(null, _opts.rowHeight, this.validateNumeric);\n      _props.width = this.supplement(null, _opts.width, this.validateNumeric);\n      _props.height = this.supplement(null, _opts.height, this.validateNumeric);\n      this._instanceProps = _props; // pre-cache\n\n      if (/^(year|month)s?$/i.test(_opts.scale)) {\n        // For scales where the value of quantity per unit is variable length (:> 単位あたりの量の値が可変長であるスケールの場合\n        var _temp = this._verifyScale(_opts.scale),\n            _values = Object.values(_temp),\n            _averageDays = this.numRound(_values.reduce(function (a, v) {\n          return a + v;\n        }, 0) / _values.length, 4),\n            // Average days within the range\n        _baseDaysOfScale = /^years?$/i.test(_opts.scale) ? 365 : 30,\n            _totalWidth = 0; //console.log( '!', _opts.scale, _temp, _vals )\n\n\n        _values.forEach(function (days) {\n          _totalWidth += _this3.numRound(days * _props.scaleSize / _baseDaysOfScale, 2);\n        });\n\n        _props.scale = _averageDays * (24 * 60 * 60 * 1000);\n        _props.grids = _values.length;\n        _props.variableScale = _temp;\n        _props.fullwidth = _totalWidth;\n      } else {\n        // In case of fixed length scale (:> 固定長スケールの場合\n        _props.scale = this._verifyScale(_opts.scale);\n        _props.grids = Math.ceil((_props.end - _props.begin) / _props.scale);\n        _props.variableScale = null;\n        _props.fullwidth = _props.grids * _props.scaleSize;\n      }\n\n      _props.fullheight = _props.rows * _props.rowSize; // Define visible size according to full size of timeline (:> タイムラインのフルサイズに準じた可視サイズを定義\n\n      _props.visibleWidth = _props.width > 0 ? \"\".concat(_props.width <= _props.fullwidth ? _props.width : _props.fullwidth, \"px\") : '100%';\n      _props.visibleHeight = _props.height > 0 ? \"\".concat(_props.height <= _props.fullheight ? _props.height : _props.fullheight, \"px\") : 'auto';\n\n      for (var _prop in _props) {\n        if (_prop === 'width' || _prop === 'height' || _prop === 'variableScale') {\n          continue;\n        }\n\n        if (this.is_empty(_props[_prop])) {\n          throw new TypeError(\"Property \\\"\".concat(_prop, \"\\\" cannot set because undefined or invalid variable.\"));\n        }\n      }\n\n      if (_props.fullwidth < 2 || _props.fullheight < 2) {\n        throw new TypeError(\"The range of the timeline to be rendered is incorrect.\");\n      }\n\n      this._instanceProps = _props;\n    }\n    /*\r\n     * @private: Retrieve the pluggable datetime as milliseconds from specified keyword (:> 指定キーから作成されたプラガブルな日時をミリ秒単位で取得する\r\n     */\n\n  }, {\n    key: \"_getPluggableDatetime\",\n    value: function _getPluggableDatetime(key) {\n      var round_type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      var _opts = this._config,\n          _date = null,\n          getFirstDate = function getFirstDate(dateObj, scale) {\n        switch (true) {\n          case /^millenniums?|millennia$/i.test(scale):\n          case /^century$/i.test(scale):\n          case /^dec(ade|ennium)$/i.test(scale):\n          case /^lustrum$/i.test(scale):\n          case /^years?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), 0, 1);\n\n          case /^months?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), dateObj.getMonth(), 1);\n\n          case /^(week|day)s?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate());\n\n          case /^(|half|quarter)-?hours?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours());\n\n          case /^minutes?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes());\n\n          case /^seconds?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes(), dateObj.getSeconds());\n        }\n      },\n          getLastDate = function getLastDate(dateObj, scale) {\n        var _tmpDate;\n\n        switch (true) {\n          case /^millenniums?|millennia$/i.test(scale):\n          case /^century$/i.test(scale):\n          case /^dec(ade|ennium)$/i.test(scale):\n          case /^lustrum$/i.test(scale):\n          case /^years?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear() + 1, 0, 1);\n            break;\n\n          case /^months?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth() + 1, 1);\n            break;\n\n          case /^(week|day)s?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate() + 1);\n            break;\n\n          case /^(|half|quarter)-?hours?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours() + 1);\n            break;\n\n          case /^minutes?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes() + 1);\n            break;\n\n          case /^seconds?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes(), dateObj.getSeconds() + 1);\n            break;\n        }\n\n        return new Date(_tmpDate.getTime() - 1);\n      };\n\n      switch (true) {\n        case /^current(|ly)$/i.test(key):\n          _date = new Date(); //console.log( '!_getPluggableDatetime::currently:', _opts.scale, this.getHigherScale( _opts.scale ), key, _date.getTime() )\n\n          break;\n\n        case /^auto$/i.test(key):\n          {\n            var _ms = null,\n                _higherScale = this.getHigherScale(_opts.scale);\n\n            if (/^current(|ly)$/i.test(_opts.startDatetime)) {\n              _date = new Date(); //if ( /^(year|month)s?$/i.test( _opts.scale ) ) {\n\n              _date = getFirstDate(_date, _opts.scale); //}\n            } else {\n              _date = this.getCorrectDatetime(_opts.startDatetime);\n            }\n\n            if (_opts.range || _opts.range > 0) {\n              if (/^years?$/i.test(_higherScale)) {\n                _ms = 365.25 * 24 * 60 * 60 * 1000;\n              } else if (/^months?$/i.test(_higherScale)) {\n                _ms = 30.44 * 24 * 60 * 60 * 1000;\n              } else {\n                _ms = this._verifyScale(_higherScale);\n              }\n\n              _date.setTime(_date.getTime() + _ms * _opts.range);\n            } else {\n              if (/^years?$/i.test(_opts.scale)) {\n                _ms = 365.25 * 24 * 60 * 60 * 1000;\n              } else if (/^months?$/i.test(_opts.scale)) {\n                _ms = 30.44 * 24 * 60 * 60 * 1000;\n              } else {\n                _ms = this._verifyScale(_opts.scale);\n              }\n\n              _date.setTime(_date.getTime() + _ms * LimitScaleGrids[this._filterScaleKeyName(_opts.scale)]);\n            } // console.log( '!_getPluggableDatetime::auto:', _opts.scale, this.getHigherScale( _opts.scale ), key, _date.getTime() )\n\n\n            break;\n          }\n\n        default:\n          _date = this.getCorrectDatetime(key);\n          break;\n      } //if ( ! this.is_empty( round_type ) && /^(year|month|day)s?$/i.test( _opts.scale ) ) {\n\n\n      if (!this.is_empty(round_type)) {\n        if ('first' === round_type) {\n          _date = getFirstDate(_date, _opts.scale);\n        } else if ('last' === round_type) {\n          _date = getLastDate(_date, _opts.scale);\n        }\n      }\n\n      return _date.getTime();\n    }\n    /*\r\n     * @private: Retrieve the pluggable parameter as an object (:> プラガブルなパラメータオブジェクトを取得する\r\n     */\n\n  }, {\n    key: \"_getPluggableParams\",\n    value: function _getPluggableParams(str_like_params) {\n      var params = {};\n\n      if (typeof str_like_params === 'string' && str_like_params) {\n        try {\n          params = JSON.parse(JSON.stringify(new Function(\"return \".concat(str_like_params))()));\n\n          if (params.hasOwnProperty('extend')) {\n            params.extend = JSON.parse(JSON.stringify(new Function(\"return \".concat(params.extend))()));\n          }\n        } catch (e) {\n          console.warn('Can not parse to object therefor invalid param.');\n        }\n      }\n\n      return params;\n    }\n    /*\r\n     * @private: Retrieve the pluggable rows of the timeline (:> プラガブルなタイムラインの行数を取得する\r\n     */\n\n  }, {\n    key: \"_getPluggableRows\",\n    value: function _getPluggableRows() {\n      var _opts = this._config,\n          fixed_rows = this.supplement('auto', _opts.rows, this.validateNumeric);\n\n      if (fixed_rows === 'auto') {\n        fixed_rows = _opts.sidebar.list.length;\n      }\n\n      return fixed_rows > 0 ? fixed_rows : 1;\n    }\n    /*\r\n     * @private: Verify the allowed scale, then retrieve that scale's millisecond if allowed (:> 許容スケールかを確認し、許可時はそのスケールのミリ秒を取得する\r\n     */\n\n  }, {\n    key: \"_verifyScale\",\n    value: function _verifyScale(scale) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _ms = -1;\n\n      if (typeof scale === 'undefined' || typeof scale !== 'string') {\n        return false;\n      }\n\n      switch (true) {\n        case /^millisec(|ond)s?$/i.test(scale):\n          // Millisecond (:> ミリ秒\n          _ms = 1;\n          break;\n\n        case /^seconds?$/i.test(scale):\n          // Second (:> 秒\n          _ms = 1000;\n          break;\n\n        case /^minutes?$/i.test(scale):\n          // Minute (:> 分\n          _ms = 60 * 1000;\n          break;\n\n        case /^quarter-?(|hour)$/i.test(scale):\n          // Quarter of an hour (:> 15分\n          _ms = 15 * 60 * 1000;\n          break;\n\n        case /^half-?(|hour)$/i.test(scale):\n          // Half an hour (:> 30分\n          _ms = 30 * 60 * 1000;\n          break;\n\n        case /^hours?$/i.test(scale):\n          // Hour (:> 時（時間）\n          _ms = 60 * 60 * 1000;\n          break;\n\n        case /^days?$/i.test(scale):\n          // Day (:> 日\n          _ms = 24 * 60 * 60 * 1000;\n          break;\n\n        case /^weeks?$/i.test(scale):\n          // Week (:> 週\n          _ms = 7 * 24 * 60 * 60 * 1000;\n          break;\n\n        case /^months?$/i.test(scale):\n          // Month (is the variable length scale) (:> 月（可変長スケール）\n          //console.log( '!_verifyScale::month:', this._instanceProps, _opts.scale )\n          if (/^(year|month)s?$/i.test(_opts.scale)) {\n            return this._diffDate(_props.begin, _props.end, scale);\n          } else {\n            _ms = 30.44 * 24 * 60 * 60 * 1000;\n            break;\n          }\n\n        case /^years?$/i.test(scale):\n          // Year (is the variable length scale) (:> 年（可変長スケール）\n          if (/^(year|month)s?$/i.test(_opts.scale)) {\n            return this._diffDate(_props.begin, _props.end, scale);\n          } else {\n            _ms = 365.25 * 24 * 60 * 60 * 1000;\n            break;\n          }\n\n        case /^lustrum$/i.test(scale):\n          // Lustrum (:> 五年紀\n          _ms = 3.1536 * Math.pow(10, 8) / 2 * 1000;\n          break;\n\n        case /^dec(ade|ennium)$/i.test(scale):\n          // Decade (:> 十年紀\n          _ms = 3.1536 * Math.pow(10, 8) * 1000;\n          break;\n\n        case /^century$/i.test(scale):\n          // Century (:> 世紀（百年紀）\n          _ms = 3155760000 * 1000;\n          break;\n\n        case /^millenniums?|millennia$/i.test(scale):\n          // Millennium (:> 千年紀\n          _ms = 3.1536 * Math.pow(10, 10) * 1000;\n          break;\n\n        default:\n          console.warn('Specified an invalid scale.');\n          _ms = -1;\n      }\n\n      return _ms > 0 ? _ms : false;\n    }\n    /*\r\n     * @private: Verify the display period of the timeline does not exceed the maximum renderable range (:> タイムラインの表示期間が最大描画可能範囲を超過していないか検証する\r\n     */\n\n  }, {\n    key: \"_verifyMaxRenderableRange\",\n    value: function _verifyMaxRenderableRange() {\n      // console.log( this._instanceProps.grids, '/', LimitScaleGrids[this._filterScaleKeyName( this._config.scale )] )\n      return this._instanceProps.grids <= LimitScaleGrids[this._filterScaleKeyName(this._config.scale)];\n    }\n    /*\r\n     * @private: Render the view of timeline container\r\n     */\n\n  }, {\n    key: \"_renderView\",\n    value: function _renderView() {\n      this._debug('_renderView');\n\n      var _elem = this._element,\n          _opts = this._config,\n          _props = this._instanceProps,\n          _tl_container = $('<div></div>', {\n        class: ClassName.TIMELINE_CONTAINER,\n        style: \"width: \".concat(_props.visibleWidth, \"; height: \").concat(_props.visibleHeight, \";\")\n      }),\n          _tl_main = $('<div></div>', {\n        class: ClassName.TIMELINE_MAIN\n      }); //console.log( _elem, _opts, _props )\n\n\n      if ($(_elem).length == 0) {\n        throw new TypeError('Does not exist the element to render a timeline container.');\n      }\n\n      if (_opts.debug) {\n        console.log(\"Timeline:{ fullWidth: \".concat(_props.fullwidth, \"px,\"), \"fullHeight: \".concat(_props.fullheight, \"px,\"), \"viewWidth: \".concat(_props.visibleWidth), \"viewHeight: \".concat(_props.visibleHeight, \" }\"));\n      }\n\n      $(_elem).css('position', 'relative'); // initialize; not .empty()\n\n      if (_opts.hideScrollbar) {\n        _tl_container.addClass(ClassName.HIDE_SCROLLBAR);\n      } // Create the timeline headline (:> タイムラインの見出しを生成\n\n\n      $(_elem).prepend(this._createHeadline()); // Create the timeline event container (:> タイムラインのイベントコンテナを生成\n\n      _tl_main.append(this._createEventContainer()); // Create the timeline ruler (:> タイムラインの目盛を生成\n\n\n      if (!this.is_empty(_opts.ruler.top)) {\n        _tl_main.prepend(this._createRuler('top'));\n      }\n\n      if (!this.is_empty(_opts.ruler.bottom)) {\n        _tl_main.append(this._createRuler('bottom'));\n      } // Create the timeline side index (:> タイムラインのサイドインデックスを生成\n\n\n      var margin = {\n        top: parseInt(_tl_main.find(Selector.RULER_TOP).height(), 10) - 1,\n        bottom: parseInt(_tl_main.find(Selector.RULER_BOTTOM).height(), 10) - 1\n      };\n\n      if (_opts.sidebar.list.length > 0) {\n        _tl_container.prepend(this._createSideIndex(margin));\n      } // Append the timeline container in the timeline element (:> タイムライン要素にタイムラインコンテナを追加\n\n\n      _tl_container.append(_tl_main);\n\n      $(_elem).append(_tl_container); // Create the timeline footer (:> タイムラインのフッタを生成\n\n      $(_elem).append(this._createFooter());\n      this._isShown = true;\n    }\n    /*\r\n     * @private: Create the headline of the timeline (:> タイムラインの見出しを作成する\r\n     */\n\n  }, {\n    key: \"_createHeadline\",\n    value: function _createHeadline() {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _display = this.supplement(Default.headline.display, _opts.headline.display, this.validateBoolean),\n          _title = this.supplement(null, _opts.headline.title),\n          _range = this.supplement(Default.headline.range, _opts.headline.range, this.validateBoolean),\n          _locale = this.supplement(Default.headline.locale, _opts.headline.locale),\n          _format = this.supplement(Default.headline.format, _opts.headline.format),\n          _begin = this.supplement(null, _props.begin),\n          _end = this.supplement(null, _props.end),\n          _tl_headline = $('<div></div>', {\n        class: ClassName.TIMELINE_HEADLINE\n      }),\n          _wrapper = $('<div></div>', {\n        class: ClassName.TIMELINE_HEADLINE_WRAPPER\n      }); // console.log( '!_createHeadline:', _opts )\n\n\n      if (_title) {\n        _wrapper.append(\"<h3 class=\\\"\".concat(ClassName.HEADLINE_TITLE, \"\\\">\").concat(_opts.headline.title, \"</h3>\"));\n      }\n\n      if (_range) {\n        if (_begin && _end) {\n          var _meta = \"\".concat(new Date(_begin).toLocaleString(_locale, _format), \"<span class=\\\"\").concat(ClassName.RANGE_SPAN, \"\\\"></span>\").concat(new Date(_end).toLocaleString(_locale, _format)); //let _meta = this.getCorrectDatetime( _begin ).toLocaleString( _locale, _format ) +'<span class=\"jqtl-range-span\"></span>'+ this.getCorrectDatetime( _end ).toLocaleString( _locale, _format )\n\n\n          _wrapper.append(\"<div class=\\\"\".concat(ClassName.RANGE_META, \"\\\">\").concat(_meta, \"</div>\"));\n        }\n      }\n\n      if (!_display) {\n        _tl_headline.addClass(ClassName.HIDE);\n      }\n\n      return _tl_headline.append(_wrapper);\n    }\n    /*\r\n     * @private: Create the event container of the timeline (:> タイムラインのイベントコンテナを作成する\r\n     */\n\n  }, {\n    key: \"_createEventContainer\",\n    value: function _createEventContainer() {\n      var _this4 = this;\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _actualHeight = _props.fullheight + Math.ceil(_props.rows / 2),\n          _container = $('<div></div>', {\n        class: ClassName.TIMELINE_EVENT_CONTAINER,\n        style: \"height:\".concat(_actualHeight, \"px;\")\n      }),\n          _events_bg = $(\"<canvas width=\\\"\".concat(_props.fullwidth - 1, \"\\\" height=\\\"\").concat(_actualHeight, \"\\\" class=\\\"\").concat(ClassName.TIMELINE_BACKGROUND_GRID, \"\\\"></canvas>\")),\n          _events_lines = $(\"<canvas width=\\\"\".concat(_props.fullwidth - 1, \"\\\" height=\\\"\").concat(_actualHeight, \"\\\" class=\\\"\").concat(ClassName.TIMELINE_RELATION_LINES, \"\\\"></canvas>\")),\n          _events_body = $('<div></div>', {\n        class: ClassName.TIMELINE_EVENTS\n      }),\n          _cy = 0,\n          ctx_grid = _events_bg[0].getContext('2d'),\n          drawRowRect = function drawRowRect(pos_y, color) {\n        color = _this4.supplement('#FFFFFF', color); // console.log( 0, pos_y, _fullwidth, _size_row, color )\n\n        ctx_grid.fillStyle = color;\n        ctx_grid.fillRect(0, pos_y + 0.5, _props.fullwidth, _props.rowSize + 1.5);\n        ctx_grid.stroke();\n      },\n          drawHorizontalLine = function drawHorizontalLine(pos_y, is_dotted) {\n        is_dotted = _this4.supplement(false, is_dotted); // console.log( pos_y, is_dotted )\n\n        ctx_grid.strokeStyle = 'rgba( 51, 51, 51, 0.1 )';\n        ctx_grid.lineWidth = 1;\n        ctx_grid.filter = 'url(#crisp)';\n        ctx_grid.beginPath();\n\n        if (is_dotted) {\n          ctx_grid.setLineDash([1, 2]);\n        } else {\n          ctx_grid.setLineDash([]);\n        }\n\n        ctx_grid.moveTo(0, pos_y + 0.5);\n        ctx_grid.lineTo(_props.fullwidth, pos_y + 0.5);\n        ctx_grid.closePath();\n        ctx_grid.stroke();\n      },\n          drawVerticalLine = function drawVerticalLine(pos_x, is_dotted) {\n        is_dotted = _this4.supplement(false, is_dotted); // console.log( pos_x, is_dotted )\n\n        ctx_grid.strokeStyle = 'rgba( 51, 51, 51, 0.025 )';\n        ctx_grid.lineWidth = 1;\n        ctx_grid.filter = 'url(#crisp)';\n        ctx_grid.beginPath();\n\n        if (is_dotted) {\n          ctx_grid.setLineDash([1, 2]);\n        } else {\n          ctx_grid.setLineDash([]);\n        }\n\n        ctx_grid.moveTo(pos_x - 0.5, 0);\n        ctx_grid.lineTo(pos_x - 0.5, _props.fullheight);\n        ctx_grid.closePath();\n        ctx_grid.stroke();\n      };\n\n      _cy = 0;\n\n      for (var i = 0; i < _props.rows; i++) {\n        _cy += i % 2 == 0 ? 1 : 0;\n\n        var _pos_y = i * _props.rowSize + _cy;\n\n        drawRowRect(_pos_y, i % 2 == 0 ? '#FEFEFE' : '#F8F8F8');\n      }\n\n      _cy = 0;\n\n      for (var _i2 = 1; _i2 < _props.rows; _i2++) {\n        _cy += _i2 % 2 == 0 ? 1 : 0;\n\n        var _pos_y2 = _i2 * _props.rowSize + _cy;\n\n        drawHorizontalLine(_pos_y2, true);\n      }\n\n      if (/^(year|month)s?$/i.test(_opts.scale)) {\n        // For scales where the value of quantity per unit is variable length (:> 単位あたりの量の値が可変長であるスケールの場合\n        var _bc = /^years?$/i.test(_opts.scale) ? 365 : 30,\n            _sy = 0;\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _props.variableScale[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _val = _step.value;\n            _sy += this.numRound(_val * _props.scaleSize / _bc, 2);\n            drawVerticalLine(_sy, false);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      } else {\n        // In case of fixed length scale (:> 固定長スケールの場合\n        for (var _i3 = 1; _i3 < _props.grids; _i3++) {\n          drawVerticalLine(_i3 * _props.scaleSize, false);\n        }\n      }\n\n      return _container.append(_events_bg).append(_events_lines).append(_events_body);\n    }\n    /*\r\n     * @private: Create the ruler of the timeline (:> タイムラインの目盛を作成する\r\n     */\n\n  }, {\n    key: \"_createRuler\",\n    value: function _createRuler(position) {\n      var _this5 = this;\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          ruler_line = this.supplement([_opts.scale], _opts.ruler[position].lines, function (def, val) {\n        return _this5.is_array(val) && val.length > 0 ? val : def;\n      }),\n          line_height = this.supplement(Default.ruler.top.height, _opts.ruler[position].height),\n          font_size = this.supplement(Default.ruler.top.fontSize, _opts.ruler[position].fontSize),\n          text_color = this.supplement(Default.ruler.top.color, _opts.ruler[position].color),\n          background = this.supplement(Default.ruler.top.background, _opts.ruler[position].background),\n          locale = this.supplement(Default.ruler.top.locale, _opts.ruler[position].locale),\n          format = this.supplement(Default.ruler.top.format, _opts.ruler[position].format),\n          ruler_opts = {\n        lines: ruler_line,\n        height: line_height,\n        fontSize: font_size,\n        color: text_color,\n        background: background,\n        locale: locale,\n        format: format\n      },\n          _fullwidth = _props.fullwidth - 1,\n          _fullheight = ruler_line.length * line_height,\n          _ruler = $('<div></div>', {\n        class: \"\".concat(PREFIX, \"ruler-\").concat(position),\n        style: \"height:\".concat(_fullheight, \"px;\")\n      }),\n          _ruler_bg = $(\"<canvas class=\\\"\".concat(PREFIX, \"ruler-bg-\").concat(position, \"\\\" width=\\\"\").concat(_fullwidth, \"\\\" height=\\\"\").concat(_fullheight, \"\\\"></canvas>\")),\n          _ruler_body = $('<div></div>', {\n        class: \"\".concat(PREFIX, \"ruler-content-\").concat(position)\n      }),\n          _finalLines = 0,\n          ctx_ruler = _ruler_bg[0].getContext('2d'); //console.log( grids, size_per_grid, scale, begin, min_scale, ruler, position, ruler_line, line_height, ctx_ruler.canvas.width, ctx_ruler.canvas.height )\n      // Draw background of ruler\n\n\n      ctx_ruler.fillStyle = background;\n      ctx_ruler.fillRect(0, 0, ctx_ruler.canvas.width, ctx_ruler.canvas.height); // Draw stroke of ruler\n\n      ctx_ruler.strokeStyle = 'rgba( 51, 51, 51, 0.1 )';\n      ctx_ruler.lineWidth = 1;\n      ctx_ruler.filter = 'url(#crisp)';\n      ruler_line.some(function (line_scale, idx) {\n        if (/^(quarter|half)-?(|hour)$/i.test(line_scale)) {\n          return true; // break\n        }\n\n        ctx_ruler.beginPath(); // Draw rows\n        //let _line_x = position === 'top' ? 0 : ctx_ruler.canvas.width,\n\n        var _line_y = position === 'top' ? line_height * (idx + 1) - 0.5 : line_height * idx + 0.5;\n\n        ctx_ruler.moveTo(0, _line_y);\n        ctx_ruler.lineTo(ctx_ruler.canvas.width, _line_y); // Draw cols\n\n        var _line_grids = null,\n            _grid_x = 0,\n            _correction = -1.5;\n\n        if (/^(year|month)s?$/i.test(_opts.scale)) {\n          // For scales where the value of quantity per unit is variable length (:> 単位あたりの量の値が可変長であるスケールの場合\n          _line_grids = _this5._filterVariableScale(line_scale);\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = _line_grids[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var _val = _step2.value;\n              _grid_x += _this5.numRound(_val, 2);\n              ctx_ruler.moveTo(_grid_x + _correction, position === 'top' ? _line_y - line_height : _line_y);\n              ctx_ruler.lineTo(_grid_x + _correction, position === 'top' ? _line_y : _line_y + line_height);\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        } else {\n          // In case of fixed length scale (:> 固定長スケールの場合\n          _line_grids = _this5._getGridsPerScale(line_scale);\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = _line_grids[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var _val2 = _step3.value;\n\n              if (_this5.is_empty(_val2) || _val2 >= _props.grids) {\n                break;\n              }\n\n              var _grid_width = _val2 * _props.scaleSize;\n\n              _grid_x += _grid_width;\n\n              if (Math.ceil(_grid_x) - _correction >= ctx_ruler.canvas.width) {\n                break;\n              }\n\n              ctx_ruler.moveTo(_grid_x + _correction, position === 'top' ? _line_y - line_height : _line_y);\n              ctx_ruler.lineTo(_grid_x + _correction, position === 'top' ? _line_y : _line_y + line_height);\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n        }\n\n        ctx_ruler.closePath();\n        ctx_ruler.stroke();\n\n        _ruler_body.append(_this5._createRulerContent(_line_grids, line_scale, ruler_opts));\n\n        _finalLines++;\n      });\n\n      if (ruler_line.length != _finalLines) {\n        _ruler.css('height', \"\".concat(_finalLines * line_height, \"px\"));\n      }\n\n      return _ruler.append(_ruler_bg).append(_ruler_body);\n    }\n    /*\r\n     * @private: Filter to aggregate the grid width of the variable length scale (:> 可変長スケールのグリッド幅を集約するフィルタ\r\n     */\n\n  }, {\n    key: \"_filterVariableScale\",\n    value: function _filterVariableScale(target_scale) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _bc = /^years?$/i.test(_opts.scale) ? 365 : 30,\n          scales = _props.variableScale,\n          retObj = {};\n\n      var _arr2 = Object.keys(scales);\n\n      for (var _i4 = 0; _i4 < _arr2.length; _i4++) {\n        var _dt = _arr2[_i4];\n\n        var _days = scales[_dt],\n            grid_size = this.numRound(_days * _props.scaleSize / _bc, 2),\n            _newKey = null,\n            _arr = void 0,\n            _temp = void 0; //console.log( '!_filterVariableScale:', _dt, this.getCorrectDatetime( _dt ).getFullYear(), _days )\n\n\n        switch (true) {\n          case /^millenniums?|millennia$/i.test(target_scale):\n            _newKey = Math.ceil(this.getCorrectDatetime(_dt).getFullYear() / 1000);\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^century$/i.test(target_scale):\n            _newKey = Math.ceil(this.getCorrectDatetime(_dt).getFullYear() / 100);\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^dec(ade|ennium)$/i.test(target_scale):\n            _newKey = Math.ceil(this.getCorrectDatetime(_dt).getFullYear() / 10);\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^lustrum$/i.test(target_scale):\n            _newKey = Math.ceil(this.getCorrectDatetime(_dt).getFullYear() / 5);\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^years?$/i.test(target_scale):\n            _newKey = \"\".concat(this.getCorrectDatetime(_dt).getFullYear());\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^months?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1)] = grid_size;\n            break;\n\n          case /^weeks?$/i.test(target_scale):\n            _arr = _dt.split(',');\n            _temp = this.getWeek(_arr[0]);\n            retObj[\"\".concat(this.getCorrectDatetime(_arr[0]).getFullYear(), \",\").concat(_temp)] = grid_size;\n            break;\n\n          case /^weekdays?$/i.test(target_scale):\n            _arr = _dt.split(',');\n            _temp = this.getCorrectDatetime(_arr[0]).getDay();\n            retObj[\"\".concat(this.getCorrectDatetime(_arr[0]).getFullYear(), \"/\").concat(this.getCorrectDatetime(_arr[0]).getMonth() + 1, \"/1,\").concat(_temp)] = grid_size;\n            break;\n\n          case /^days?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1, \"/1\")] = grid_size;\n            break;\n\n          case /^hours?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1, \"/1 0\")] = grid_size;\n            break;\n\n          case /^minutes?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1, \"/1 0:00\")] = grid_size;\n            break;\n\n          case /^seconds?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1, \"/1 0:00:00\")] = grid_size;\n            break;\n\n          default:\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1)] = grid_size;\n            break;\n        }\n      }\n\n      return retObj;\n    }\n    /*\r\n     * @private: Get the grid number per scale (for fixed length scale) (:> スケールごとのグリッド数を取得する（固定長スケール用）\r\n     */\n\n  }, {\n    key: \"_getGridsPerScale\",\n    value: function _getGridsPerScale(target_scale) {\n      //let _opts        = this._config,\n      var _props = this._instanceProps,\n          _scopes = [],\n          _scale_grids = {},\n          _sep = '/';\n\n      for (var i = 0; i < _props.grids; i++) {\n        var _tmp = new Date(_props.begin + i * _props.scale),\n            //let _tmp = this.getCorrectDatetime( _props.begin + ( i * _props.scale ) ),\n        _y = _tmp.getFullYear(),\n            _mil = Math.ceil(_y / 1000),\n            _cen = Math.ceil(_y / 100),\n            _dec = Math.ceil(_y / 10),\n            _lus = Math.ceil(_y / 5),\n            _m = _tmp.getMonth() + 1,\n            _wd = _tmp.getDay(),\n            // 0 = Sun, ... 6 = Sat\n        _d = _tmp.getDate(),\n            _w = this.getWeek(\"\".concat(_y, \"/\").concat(_m, \"/\").concat(_d)),\n            _h = _tmp.getHours(),\n            _min = _tmp.getMinutes(),\n            _s = _tmp.getSeconds();\n\n        _scopes.push({\n          millennium: _mil,\n          century: _cen,\n          decade: _dec,\n          lustrum: _lus,\n          year: _y,\n          month: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep, \"1\"),\n          week: \"\".concat(_y, \",\").concat(_w),\n          weekday: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d, \",\").concat(_wd),\n          day: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d),\n          hour: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d, \" \").concat(_h),\n          minute: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d, \" \").concat(_h, \":\").concat(_min),\n          second: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d, \" \").concat(_h, \":\").concat(_min, \":\").concat(_s),\n          datetime: _tmp.toString()\n        });\n      }\n\n      _scopes.forEach(function (_scope) {\n        //console.log( _scope[target_scale], idx );\n        if (!_scale_grids[_scope[target_scale]]) {\n          _scale_grids[_scope[target_scale]] = 1;\n        } else {\n          _scale_grids[_scope[target_scale]]++;\n        }\n      }); //console.log( '!_getGridsPerScale:', target_scale, _scale_grids )\n\n\n      return this.toIterableObject(_scale_grids);\n    }\n    /*\r\n     * @private: Create the content of ruler of the timeline (:> タイムラインの目盛本文を作成する\r\n     */\n\n  }, {\n    key: \"_createRulerContent\",\n    value: function _createRulerContent(_line_grids, line_scale, ruler) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          line_height = this.supplement(Default.ruler.top.height, ruler.height),\n          font_size = this.supplement(Default.ruler.top.fontSize, ruler.fontSize),\n          text_color = this.supplement(Default.ruler.top.color, ruler.color),\n          locale = this.supplement(Default.ruler.top.locale, ruler.locale, this.validateString),\n          format = this.supplement(Default.ruler.top.format, ruler.format, this.validateObject),\n          _ruler_lines = $('<div></div>', {\n        class: ClassName.TIMELINE_RULER_LINES,\n        style: \"width:100%;height:\".concat(line_height, \"px;\")\n      });\n\n      var _arr3 = Object.keys(_line_grids);\n\n      for (var _i5 = 0; _i5 < _arr3.length; _i5++) {\n        var _key = _arr3[_i5];\n\n        var _item_width = /^(year|month)s?$/i.test(_opts.scale) ? _line_grids[_key] : _line_grids[_key] * _props.scaleSize,\n            _line = $('<div></div>', {\n          class: ClassName.TIMELINE_RULER_ITEM,\n          style: \"width:\".concat(_item_width, \"px;height:\").concat(line_height, \"px;line-height:\").concat(line_height, \"px;font-size:\").concat(font_size, \"px;color:\").concat(text_color, \";\")\n        }),\n            _ruler_string = this.getLocaleString(_key, line_scale, locale, format),\n            _data_ruler_item = ''; //console.log( '!_createRulerContent:', _key, _line_grids[_key], line_scale, locale, format, _item_width, _ruler_string )\n\n\n        _data_ruler_item = \"\".concat(line_scale, \"-\").concat(_data_ruler_item === '' ? String(_key) : _data_ruler_item);\n\n        _line.attr('data-ruler-item', _data_ruler_item).html(_ruler_string);\n\n        if (_item_width > this.strWidth(_ruler_string)) {\n          // Adjust position of ruler item string\n          //console.log( _item_width, _ruler_string, _ruler_string.length, this.strWidth( _ruler_string ), $(this._element).width() )\n          if (_item_width > $(this._element).width()) {\n            _line.addClass(ClassName.RULER_ITEM_ALIGN_LEFT);\n          }\n        }\n\n        _ruler_lines.append(_line).attr('data-ruler-scope', line_scale);\n      }\n\n      return _ruler_lines;\n    }\n    /*\r\n     * @private: Create the side indexes of the timeline (:> タイムラインのサイド・インデックスを作成する\r\n     */\n\n  }, {\n    key: \"_createSideIndex\",\n    value: function _createSideIndex(margin) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _sticky = this.supplement(Default.sidebar.sticky, _opts.sidebar.sticky),\n          _overlay = this.supplement(Default.sidebar.overlay, _opts.sidebar.overlay),\n          _sbList = this.supplement(Default.sidebar.list, _opts.sidebar.list),\n          _wrapper = $('<div></div>', {\n        class: ClassName.TIMELINE_SIDEBAR\n      }),\n          _margin = $('<div></div>', {\n        class: ClassName.TIMELINE_SIDEBAR_MARGIN\n      }),\n          _list = $('<div></div>', {\n        class: ClassName.TIMELINE_SIDEBAR_ITEM\n      }),\n          _c = 0.5;\n\n      if (_sticky) {\n        _wrapper.addClass(ClassName.STICKY_LEFT);\n      }\n\n      if (_overlay) {\n        _list.addClass(ClassName.OVERLAY);\n      } //_wrapper.css( 'margin-top', margin.top + 'px' ).css( 'margin-bottom', margin.bottom + 'px' )\n\n\n      if (margin.top > 0) {\n        _wrapper.prepend(_margin.clone().css('height', \"\".concat(margin.top + 1, \"px\")));\n      }\n\n      for (var i = 0; i < _props.rows; i++) {\n        var _item = _list.clone().html(_sbList[i]);\n\n        _wrapper.append(_item);\n      }\n\n      _wrapper.find(Selector.TIMELINE_SIDEBAR_ITEM).css('height', \"\".concat(_props.rowSize + _c, \"px\")).css('line-height', \"\".concat(_props.rowSize + _c, \"px\"));\n\n      if (margin.bottom > 0) {\n        _wrapper.append(_margin.clone().css('height', \"\".concat(margin.bottom + 1, \"px\")));\n      }\n\n      return _wrapper;\n    }\n    /*\r\n     * @private: Create the footer of the timeline (:> タイムラインのフッターを作成する\r\n     */\n\n  }, {\n    key: \"_createFooter\",\n    value: function _createFooter() {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _display = this.supplement(Default.footer.display, _opts.footer.display),\n          _content = this.supplement(null, _opts.footer.content),\n          _range = this.supplement(Default.footer.range, _opts.footer.range),\n          _locale = this.supplement(Default.footer.locale, _opts.footer.locale),\n          _format = this.supplement(Default.footer.format, _opts.footer.format),\n          _begin = this.supplement(null, _props.begin),\n          _end = this.supplement(null, _props.end),\n          _tl_footer = $('<div></div>', {\n        class: ClassName.TIMELINE_FOOTER\n      });\n\n      if (_range) {\n        if (_begin && _end) {\n          var _meta = \"\".concat(new Date(_begin).toLocaleString(_locale, _format), \"<span class=\\\"\").concat(ClassName.RANGE_SPAN, \"\\\"></span>\").concat(new Date(_end).toLocaleString(_locale, _format)); //let _meta = this.getCorrectDatetime( _begin ).toLocaleString( _locale, _format ) +'<span class=\"jqtl-range-span\"></span>'+ this.getCorrectDatetime( _end ).toLocaleString( _locale, _format )\n\n\n          _tl_footer.append(\"<div class=\\\"\".concat(ClassName.RANGE_META, \" \").concat(ClassName.ALIGN_SELF_RIGHT, \"\\\">\").concat(_meta, \"</div>\"));\n        }\n      }\n\n      if (_content) {\n        _tl_footer.append(\"<div class=\\\"\".concat(ClassName.TIMELINE_FOOTER_CONTENT, \"\\\">\").concat(_content, \"</div>\"));\n      }\n\n      if (!_display) {\n        _tl_footer.addClass(ClassName.HIDE);\n      }\n\n      return _tl_footer;\n    }\n    /*\r\n     * @private: Acquire the difference between two dates with the specified scale value (:> 2つの日付の差分を指定したスケール値で取得する\r\n     */\n\n  }, {\n    key: \"_diffDate\",\n    value: function _diffDate(date1, date2) {\n      var scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'millisecond';\n      var absval = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      //let _opts  = this._config,\n      var _dt1 = this.supplement(null, date1),\n          _dt2 = this.supplement(null, date2),\n          diffMS = 0,\n          retval = false,\n          lastDayOfMonth = function lastDayOfMonth(dateObj) {\n        var _tmp = new Date(dateObj.getFullYear(), dateObj.getMonth() + 1, 1);\n\n        _tmp.setTime(_tmp.getTime() - 1);\n\n        return _tmp.getDate();\n      },\n          isLeapYear = function isLeapYear(dateObj) {\n        var _tmp = new Date(dateObj.getFullYear(), 0, 1),\n            sum = 0;\n\n        for (var i = 0; i < 12; i++) {\n          _tmp.setMonth(i);\n\n          sum += lastDayOfMonth(_tmp);\n        }\n\n        return sum == 365 ? false : true;\n      };\n\n      if (!_dt1 || !_dt2) {\n        console.warn('Cannot parse date because invalid format or undefined.');\n        return false;\n      }\n\n      diffMS = _dt2 - _dt1;\n\n      if (absval) {\n        diffMS = Math.abs(diffMS);\n      }\n\n      var _bd = new Date(_dt1),\n          _ed = new Date(_dt2),\n          _dy = _ed.getFullYear() - _bd.getFullYear(),\n          _m = {};\n\n      switch (true) {\n        case /^years?$/i.test(scale):\n          if (_dy > 0) {\n            for (var i = 0; i <= _dy; i++) {\n              var _cd = new Date(_bd.getFullYear() + i, 0, 1);\n\n              _m[\"\".concat(_bd.getFullYear() + i)] = isLeapYear(_cd) ? 366 : 365;\n            }\n          } else {\n            _m[\"\".concat(_bd.getFullYear())] = isLeapYear(_bd) ? 366 : 365;\n          }\n\n          retval = _m;\n          break;\n\n        case /^months?$/i.test(scale):\n          if (_dy > 0) {\n            for (var _i6 = _bd.getMonth(); _i6 < 12; _i6++) {\n              var _cd2 = new Date(_bd.getFullYear(), _i6, 1);\n\n              _m[\"\".concat(_bd.getFullYear(), \"/\").concat(_i6 + 1)] = lastDayOfMonth(_cd2);\n            }\n\n            if (_dy > 1) {\n              for (var y = 1; y < _dy; y++) {\n                for (var _i7 = 0; _i7 < 12; _i7++) {\n                  var _cd3 = new Date(_bd.getFullYear() + y, _i7, 1);\n\n                  _m[\"\".concat(_bd.getFullYear() + y, \"/\").concat(_i7 + 1)] = lastDayOfMonth(_cd3);\n                }\n              }\n            }\n\n            for (var _i8 = 0; _i8 <= _ed.getMonth(); _i8++) {\n              var _cd4 = new Date(_ed.getFullYear(), _i8, 1);\n\n              _m[\"\".concat(_ed.getFullYear(), \"/\").concat(_i8 + 1)] = lastDayOfMonth(_cd4);\n            }\n          } else {\n            for (var _i9 = _bd.getMonth(); _i9 <= _ed.getMonth(); _i9++) {\n              var _cd5 = new Date(_bd.getFullYear(), _i9, 1);\n\n              _m[\"\".concat(_bd.getFullYear(), \"/\").concat(_i9 + 1)] = lastDayOfMonth(_cd5);\n            }\n          }\n\n          retval = _m;\n          break;\n\n        case /^weeks?$/i.test(scale):\n          retval = Math.ceil(diffMS / (7 * 24 * 60 * 60 * 1000));\n          break;\n\n        case /^(|week)days?$/i.test(scale):\n          retval = Math.ceil(diffMS / (24 * 60 * 60 * 1000));\n          break;\n\n        case /^hours?$/i.test(scale):\n          retval = Math.ceil(diffMS / (60 * 60 * 1000));\n          break;\n\n        case /^minutes?$/i.test(scale):\n          retval = Math.ceil(diffMS / (60 * 1000));\n          break;\n\n        case /^seconds?$/i.test(scale):\n          retval = Math.ceil(diffMS / 1000);\n          break;\n\n        default:\n          retval = diffMS;\n          break;\n      } //console.log( '!_diffDate:', retval )\n\n\n      return retval;\n    }\n    /*\r\n     * @private: Load all enabled events markuped on target element to the timeline object\r\n     */\n\n  }, {\n    key: \"_loadEvent\",\n    value: function _loadEvent() {\n      this._debug('_loadEvent');\n\n      var _that = this,\n          _elem = this._element,\n          _opts = this._config,\n          _container = $(_elem).find(Selector.TIMELINE_CONTAINER),\n          //_ruler_top    = $(_elem).find( Selector.TIMELINE_RULER_TOP ),\n      //_ruler_bottom = $(_elem).find( Selector.TIMELINE_RULER_BOTTOM ),\n      _event_list = $(_elem).find(Selector.DEFAULT_EVENTS),\n          _cnt = 0,\n          events = [],\n          lastEventId = 0;\n\n      _event_list.children().each(function () {\n        var _attr = $(this).attr('data-timeline-node');\n\n        if (typeof _attr !== 'undefined' && _attr !== false) {\n          _cnt++;\n        }\n      });\n\n      if (_event_list.length == 0 || _cnt == 0) {\n        this._debug('Enable event does not exist.');\n      } // Show loader\n\n\n      if (_opts.loader !== false) {\n        var _visible_width = _container.width(),\n            _visible_height = _container.height(); //    _margin_top     = ( _visible_height - ( _ruler_top.height() || 0 ) - ( _ruler_bottom.height() || 0 ) ) / 2\n        //console.log( _visible_width, _visible_height, _margin_top )\n\n\n        $(_elem).find(Selector.TIMELINE_CONTAINER).append(this._showLoader(_visible_width, _visible_height));\n      } //console.log( _opts )\n      // Register Event Data\n\n\n      _event_list.children().each(function () {\n        var _evt_params = _that._getPluggableParams($(this).attr('data-timeline-node')),\n            _one_event = {};\n\n        if (!_that.is_empty(_evt_params)) {\n          _one_event = _that._registerEventData(this, _evt_params);\n          events.push(_one_event);\n          lastEventId = Math.max(lastEventId, parseInt(_one_event.eventId, 10));\n        }\n      }); // Set event id with auto increment (:> イベントIDを自動採番\n\n\n      var cacheIds = []; // for checking duplication of id (:> IDの重複チェック用\n\n      events.forEach(function (_evt, _i, _this) {\n        var _chkId = parseInt(_this[_i].eventId, 10);\n\n        if (_chkId == 0 || cacheIds.includes(_chkId)) {\n          lastEventId++;\n          _this[_i].eventId = lastEventId;\n        } else {\n          _this[_i].eventId = _chkId;\n        }\n\n        cacheIds.push(_this[_i].eventId);\n      });\n      this._isCached = this._saveToCache(events);\n    }\n    /*\r\n     * @private: Show the loader when the timeline creation (:> タイムライン作成時にローダーを表示\r\n     */\n\n  }, {\n    key: \"_showLoader\",\n    value: function _showLoader(width, height, margin_top) {\n      margin_top = this.supplement(0, margin_top, this.validateNumeric);\n\n      var _opts = this._config,\n          _loader = $('<div></div>', {\n        id: 'jqtl-loader',\n        style: \"width:\".concat(width, \"px;height:\").concat(height, \"px;top:\").concat(margin_top, \"px;\")\n      });\n\n      if ($(_opts.loader).length == 0) {\n        height = height === 'auto' ? '240px' : height;\n\n        var _loading_text = LOADING_MESSAGE.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\s\\S]|^$/g).filter(Boolean);\n\n        _loading_text.forEach(function (str, idx) {\n          var _fountain_text = $('<div></div>', {\n            id: \"jqtl-loading_\".concat(idx + 1),\n            class: ClassName.LOADER_ITEM\n          }).text(str);\n\n          _loader.append(_fountain_text);\n        });\n      } else {\n        var _custom_loader = $(_opts.loader).clone().prop('hidden', false).css('display', 'block');\n\n        _loader.append(_custom_loader);\n      }\n\n      return _loader;\n    }\n    /*\r\n     * @private:  Hide the loader (:> ローダーを非表示\r\n     */\n\n  }, {\n    key: \"_hideLoader\",\n    value: function _hideLoader() {\n      $(this._element).find(Selector.LOADER).remove();\n    }\n    /*\r\n     * @private: Register one event data as object (:> イベントデータをオブジェクトとして登録する\r\n     */\n\n  }, {\n    key: \"_registerEventData\",\n    value: function _registerEventData(event_element, params) {\n      var _this6 = this;\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          new_event = _objectSpread({}, EventParams, {\n        uid: this.generateUniqueID(),\n        label: $(event_element).html()\n      }),\n          _relation = {},\n          _x,\n          _w,\n          _c; //, _pointSize\n      //console.log( '!_registerEventData:', _opts, params )\n\n\n      if (params.hasOwnProperty('start')) {\n        _x = this._getCoordinateX(params.start);\n        new_event.x = this.numRound(_x, 2);\n\n        if (params.hasOwnProperty('end')) {\n          _x = this._getCoordinateX(params.end);\n          _w = _x - new_event.x;\n          new_event.width = this.numRound(_w, 2);\n\n          if (_opts.eventMeta.display) {\n            if (this.is_empty(_opts.eventMeta.content) && !params.hasOwnProperty('rangeMeta')) {\n              //console.log( '!_registerEventData:', _opts.eventMeta.locale, _opts.eventMeta.format, _opts.scale, params )\n              new_event.rangeMeta += this.getLocaleString(params.start, _opts.eventMeta.scale, _opts.eventMeta.locale, _opts.eventMeta.format);\n              new_event.rangeMeta += \" - \".concat(this.getLocaleString(params.end, _opts.eventMeta.scale, _opts.eventMeta.locale, _opts.eventMeta.format));\n            } else {\n              new_event.rangeMeta = _opts.eventMeta.content;\n            }\n          }\n        } else {\n          new_event.width = 0;\n        } //console.log( 'getX:', _x, 'getW:', _w, event_element )\n\n\n        if (params.hasOwnProperty('row')) {\n          _c = Math.floor(params.row / 2);\n          new_event.y = (params.row - 1) * _opts.rowHeight + new_event.margin + _c;\n        }\n\n        Object.keys(new_event).forEach(function (_prop) {\n          switch (true) {\n            case /^eventId$/i.test(_prop):\n              if (params.hasOwnProperty('id') && _this6.is_empty(new_event.eventId)) {\n                new_event.eventId = parseInt(params.id, 10);\n              } else {\n                new_event.eventId = parseInt(params[_prop], 10) || 0;\n              }\n\n              break;\n\n            case /^(label|content)$/i.test(_prop):\n              if (params.hasOwnProperty(_prop) && !_this6.is_empty(params[_prop])) {\n                new_event[_prop] = params[_prop];\n              } // Override the children element to label or content setting\n\n\n              if ($(event_element).children(\".event-\".concat(_prop)).length > 0) {\n                new_event[_prop] = $(event_element).children(\".event-\".concat(_prop)).html();\n              } //console.log( '!_registerEventData:', _prop, params[_prop], new_event[_prop] )\n\n\n              break;\n\n            case /^relation$/i.test(_prop):\n              // For drawing the relation line\n              if (/^point(|er)$/i.test(_opts.type)) {\n                //let _pointSize  = this._getPointerSize( new_event.size, new_event.margin )\n                _relation.x = _this6.numRound(new_event.x, 2);\n                _relation.y = _this6.numRound(_props.rowSize * ((params.row || 1) - 1) + _props.rowSize / 2, 2); //console.log( '!_registerEventData:', params, new_event.x, new_event.y, _pointSize, _relation )\n\n                new_event[_prop] = _objectSpread({}, params[_prop], _relation);\n              }\n\n              break;\n\n            default:\n              if (params.hasOwnProperty(_prop) && !_this6.is_empty(params[_prop])) {\n                new_event[_prop] = params[_prop];\n              }\n\n              break;\n          }\n        });\n      } //console.log( '!_registerEventData:', new_event )\n\n\n      return new_event;\n    }\n    /*\r\n     * @private: Get the coordinate X on the timeline of any date (:> 任意の日付のタイムライン上のX座標（横軸座標）を取得する\r\n     */\n\n  }, {\n    key: \"_getCoordinateX\",\n    value: function _getCoordinateX(date) {\n      //let _opts  = this._config,\n      var _props = this._instanceProps,\n          _date = this.supplement(null, this._getPluggableDatetime(date)),\n          coordinate_x = 0;\n\n      if (_date) {\n        if (_date - _props.begin >= 0 && _props.end - _date >= 0) {\n          // When the given date is within the range of timeline begin and end (:> 指定された日付がタイムラインの開始と終了の範囲内にある場合\n          coordinate_x = Math.abs(_date - _props.begin) / _props.scale * _props.scaleSize;\n        } else {\n          // When the given date is out of timeline range (:> 指定された日付がタイムラインの範囲外にある場合\n          coordinate_x = (_date - _props.begin) / _props.scale * _props.scaleSize;\n        }\n      } else {\n        console.warn('Cannot parse date because invalid format or undefined.');\n      }\n\n      return coordinate_x;\n    }\n    /*\r\n     * @private: Cache the event data to the web storage (:> イベントデータをWEBストレージへキャッシュ\r\n     */\n\n  }, {\n    key: \"_saveToCache\",\n    value: function _saveToCache(data) {\n      var strageEngine = /^local(|Storage)$/i.test(this._config.storage) ? 'localStorage' : 'sessionStorage',\n          is_available = strageEngine in window && (strageEngine === 'localStorage' ? window.localStorage : window.sessionStorage) !== null;\n\n      if (is_available) {\n        if (strageEngine === 'localStorage') {\n          localStorage.setItem(this._selector, JSON.stringify(data));\n        } else {\n          sessionStorage.setItem(this._selector, JSON.stringify(data));\n        }\n\n        return true;\n      } else {\n        throw new TypeError(\"The storage named \\\"\".concat(strageEngine, \"\\\" can not be available.\"));\n      }\n    }\n    /*\r\n     * @private: Load the cached event data from the web storage (:> キャッシュされたイベントデータをWEBストレージから読み込む\r\n     */\n\n  }, {\n    key: \"_loadToCache\",\n    value: function _loadToCache() {\n      var strageEngine = /^local(|Storage)$/i.test(this._config.storage) ? 'localStorage' : 'sessionStorage',\n          is_available = strageEngine in window && (strageEngine === 'localStorage' ? window.localStorage : window.sessionStorage) !== null,\n          data = null;\n\n      if (is_available) {\n        if (strageEngine === 'localStorage') {\n          data = JSON.parse(localStorage.getItem(this._selector));\n        } else {\n          data = JSON.parse(sessionStorage.getItem(this._selector));\n        }\n      } else {\n        throw new TypeError(\"The storage named \\\"\".concat(strageEngine, \"\\\" can not be available.\"));\n      }\n\n      return data;\n    }\n    /*\r\n     * @private: Remove the cache data on the web storage (:> WEBストレージ上のキャッシュデータを削除する\r\n     */\n\n  }, {\n    key: \"_removeCache\",\n    value: function _removeCache() {\n      var strageEngine = /^local(|Storage)$/i.test(this._config.storage) ? 'localStorage' : 'sessionStorage',\n          is_available = strageEngine in window && (strageEngine === 'localStorage' ? window.localStorage : window.sessionStorage) !== null;\n\n      if (is_available) {\n        if (strageEngine === 'localStorage') {\n          localStorage.removeItem(this._selector);\n        } else {\n          sessionStorage.removeItem(this._selector);\n        }\n      } else {\n        throw new TypeError(\"The storage named \\\"\".concat(strageEngine, \"\\\" can not be available.\"));\n      }\n    }\n    /*\r\n     * @private: Controller method to place event data on timeline\r\n     */\n\n  }, {\n    key: \"_placeEvent\",\n    value: function _placeEvent() {\n      var _this7 = this;\n\n      this._debug('_placeEvent');\n\n      if (!this._isCached) {\n        return;\n      }\n\n      var _elem = this._element,\n          _opts = this._config,\n          _evt_container = $(_elem).find(Selector.TIMELINE_EVENTS),\n          _relation_lines = $(_elem).find(Selector.TIMELINE_RELATION_LINES),\n          events = this._loadToCache();\n\n      if (events.length > 0) {\n        _evt_container.empty();\n\n        events.forEach(function (_evt) {\n          var _evt_elem = _this7._createEventNode(_evt);\n\n          if (_evt_elem) {\n            _evt_container.append(_evt_elem);\n          }\n        });\n      }\n\n      if (/^point(|er)$/i.test(_opts.type)) {\n        this._drawRelationLine(events);\n      } // console.log( '!_placeEvent:', _opts )\n\n\n      this.sleep(1).then(function () {\n        _this7._hideLoader();\n\n        _evt_container.fadeIn('fast', function () {\n          _relation_lines.fadeIn('fast');\n        });\n      });\n    }\n    /*\r\n     * @private: Create an event element on the timeline (:> タイムライン上にイベント要素を作成する\r\n     */\n\n  }, {\n    key: \"_createEventNode\",\n    value: function _createEventNode(params) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _evt_elem = $('<div></div>', {\n        class: ClassName.TIMELINE_EVENT_NODE,\n        id: \"evt-\".concat(params.eventId),\n        css: {\n          left: \"\".concat(params.x, \"px\"),\n          top: \"\".concat(params.y, \"px\"),\n          width: \"\".concat(params.width, \"px\"),\n          height: \"\".concat(params.height, \"px\"),\n          color: this.hexToRgbA(params.color),\n          backgroundColor: this.hexToRgbA(params.bgColor)\n        },\n        html: \"<div class=\\\"\".concat(ClassName.TIMELINE_EVENT_LABEL, \"\\\">\").concat(params.label, \"</div>\")\n      }); //console.log( '!_createEventNode:', params )\n      // Whether this event is within the display range of the timeline (:> タイムライン表示範囲内のイベントかどうか\n      // For events excluded, set the width to -1 (:> 除外イベントは幅を -1 に設定する\n\n\n      if (params.x >= 0) {\n        // The event start datetime is over the start datetime of the timeline (:> イベント始点がタイムラインの始点以上\n        if (params.x <= _props.fullwidth) {\n          // The event start datetime is less than or equal to the timeline end datetime (:> イベントの始点がタイムラインの終点以下\n          if (params.x + params.width <= _props.fullwidth) {// The event end datetime is less than before the timeline end datetime (regular event) (:> イベント終点がタイムラインの終点以下（通常イベント）\n            // OK\n          } else {\n            // The event end datetime is after the timeline end datetime (event exceeded end datetime) (:> イベント終点がタイムラインの終点より後（終点超過イベント）\n            params.width = _props.fullwidth - params.x;\n          }\n        } else {\n          // The event start datetime is after the timeline end datetime (exclude event) (:> イベント始点がタイムラインの終点より後（除外イベント）\n          params.width = -1;\n        }\n      } else {\n        // The event start datetime is before the timeline start datetime (:> イベント始点がタイムラインの始点より前\n        if (/^point(|er)$/i.test(_opts.type)) {\n          // In the case of \"point\" type, that is an exclude event (:> ポインター型の場合は除外イベント\n          params.width = -1;\n        } else {\n          // The case of \"bar\" type\n          if (params.x + params.width <= 0) {\n            // The event end datetime is less than before the timeline start datetime (exclude event) (:> イベント終点がタイムラインの始点より前（除外イベント）\n            params.width = -1;\n          } else {\n            // The event end datetime is after the timeline start datetime (:> イベント終点がタイムラインの始点より後\n            if (params.x + params.width <= _props.fullwidth) {\n              // The event end datetime is less than or equal the timeline end datetime (event exceeded start datetime) (:> イベント終点がタイムラインの終点以下（始点超過イベント）\n              params.width = Math.abs(params.x + params.width);\n              params.x = 0;\n            } else {\n              // The event end datetime is after the timeline end datetime (event exceeded both start and end datetime) (:> イベント終点がタイムラインの終点より後（始点・終点ともに超過イベント）\n              params.width = _props.fullwidth;\n              params.x = 0;\n            }\n          }\n        }\n      } //console.log( 'x:', params.x, 'w:', params.width, 'x-end:', Math.abs( params.x ) + params.width, 'fw:', _props.fullwidth, 'ps:', params.size )\n\n\n      if (/^point(|er)$/i.test(_opts.type)) {\n        if (params.width < 0) {\n          return null;\n        }\n\n        var _pointSize = this._getPointerSize(params.size, params.margin),\n            _shiftX = this.numRound(params.x - _pointSize / 2, 2),\n            _shiftY = this.numRound(params.y + (params.height - _pointSize) / 2, 2); //console.log( '!_createEventNode:', params, _pointSize, _shiftX, _shiftY )\n\n\n        _evt_elem.addClass(ClassName.VIEWER_EVENT_TYPE_POINTER).css('border-color', params.bdColor).css('left', \"\".concat(_shiftX, \"px\")).css('top', \"\".concat(_shiftY, \"px\")).css('width', \"\".concat(_pointSize, \"px\")).css('height', \"\".concat(_pointSize, \"px\")).attr('data-base-size', _pointSize).attr('data-base-left', _shiftX).attr('data-base-top', _shiftY);\n      } else {\n        if (params.width < 1) {\n          return null;\n        }\n\n        _evt_elem.css('left', \"\".concat(params.x, \"px\")).css('width', \"\".concat(params.width, \"px\"));\n      }\n\n      _evt_elem.attr('data-uid', params.uid);\n\n      if (!this.is_empty(params.image)) {\n        if (/^point(|er)$/i.test(_opts.type)) {\n          _evt_elem.css('background-image', \"url(\".concat(params.image, \")\"));\n        } else {\n          var _imgSize = params.height - params.margin * 2;\n\n          _evt_elem.prepend(\"<img src=\\\"\".concat(params.image, \"\\\" class=\\\"\").concat(ClassName.TIMELINE_EVENT_THUMBNAIL, \"\\\" width=\\\"\").concat(_imgSize, \"\\\" height=\\\"\").concat(_imgSize, \"\\\" />\"));\n        }\n      }\n\n      if (/^bar$/i.test(_opts.type) && _opts.eventMeta.display) {\n        //console.log( '!_createEventNode:', params )\n        params.extend.meta = params.rangeMeta;\n      }\n\n      if (!this.is_empty(params.extend)) {\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = params.extend[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var _step4$value = _slicedToArray(_step4.value, 2),\n                _prop = _step4$value[0],\n                _val = _step4$value[1];\n\n            _evt_elem.attr(\"data-\".concat(_prop), _val);\n\n            if (_prop === 'toggle' && ['popover', 'tooltip'].includes(_val)) {\n              // for bootstrap's popover or tooltip\n              _evt_elem.attr('title', params.label);\n\n              if (!params.extend.hasOwnProperty('content')) {\n                _evt_elem.attr('data-content', params.content);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n      }\n\n      if (!this.is_empty(params.callback)) {\n        _evt_elem.attr('data-callback', params.callback);\n      }\n      /*\r\n      $(document).on( 'mouseenter', `#evt-${params.eventId}`, (e) => {\r\n          $(e.target).css( 'background-color', this.hexToRgbA( params.bgColor, 0.65 ) )\r\n      }).on( 'mouseleave', `#evt-${params.eventId}`, (e) => {\r\n          $(e.target).css( 'background-color', this.hexToRgbA( params.bgColor, 1 ) )\r\n      })\r\n      */\n\n\n      return _evt_elem;\n    }\n    /*\r\n     * @private: Retrieve the diameter size (pixel) of pointer (:> ポインタの直径サイズ（ピクセル値）を取得する\r\n     */\n\n  }, {\n    key: \"_getPointerSize\",\n    value: function _getPointerSize(key, margin) {\n      //let _opts  = this._config,\n      var _props = this._instanceProps,\n          _max = Math.min(_props.scaleSize, _props.rowSize) - margin * 2,\n          _size = null;\n\n      switch (true) {\n        case /^large$/i.test(key):\n          _size = Math.max(this.numRound(_max * 0.8, 1), MIN_POINTER_SIZE);\n          break;\n\n        case /^normal$/i.test(key):\n          _size = Math.max(this.numRound(_max / 2, 1), MIN_POINTER_SIZE);\n          break;\n\n        case /^small$/i.test(key):\n          _size = Math.max(this.numRound(_max / 4, 1), MIN_POINTER_SIZE);\n          break;\n\n        default:\n          _size = Math.max(parseInt(key, 10), MIN_POINTER_SIZE);\n      } //console.log( '!_getPointerSize:', _props, key, _max, _size )\n\n\n      return _size;\n    }\n    /*\r\n     * @private: Draw the relation lines (:> 連結線を描画する\r\n     */\n\n  }, {\n    key: \"_drawRelationLine\",\n    value: function _drawRelationLine(events) {\n      var _this8 = this;\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _canvas = $(this._element).find(Selector.TIMELINE_RELATION_LINES),\n          ctx_relations = _canvas[0].getContext('2d'),\n          drawLine = function drawLine(_sx, _sy, _ex, _ey, evt, _ba) {\n        var _curveType = {},\n            _radius = _this8.numRound(Math.min(_props.scaleSize, _props.rowSize) / 2, 2),\n            _subRadius = _this8.numRound(_this8._getPointerSize(evt.size, _opts.marginHeight) / 2, 2); // Defaults\n\n\n        ctx_relations.strokeStyle = EventParams.bdColor;\n        ctx_relations.lineWidth = 2.5;\n        ctx_relations.filter = 'url(#crisp)';\n\n        var _arr4 = Object.keys(evt.relation);\n\n        for (var _i10 = 0; _i10 < _arr4.length; _i10++) {\n          var _key = _arr4[_i10];\n\n          switch (true) {\n            case /^(|line)color$/i.test(_key):\n              ctx_relations.strokeStyle = evt.relation[_key];\n              break;\n\n            case /^(|line)size$/i.test(_key):\n              ctx_relations.lineWidth = parseInt(evt.relation[_key], 10) || 2.5;\n              break;\n\n            case /^curve$/i.test(_key):\n              if (/^(r|l)(t|b),?(r|l)?(t|b)?$/i.test(evt.relation[_key])) {\n                var _tmp = evt.relation[_key].split(',');\n\n                if (_tmp.length == 2) {\n                  _curveType.before = _tmp[0];\n                  _curveType.after = _tmp[1];\n                } else {\n                  _curveType[_ba] = _tmp[0];\n                }\n              } else if (typeof evt.relation[_key] === 'boolean' && evt.relation[_key] || typeof evt.relation[_key] === 'number' && Boolean(evt.relation[_key])) {\n                // Automatically set the necessary linearity type (:> 自動線形判定\n                //console.log( _sx, _sy, _ex, _ey, _radius, _ba, _subRadius )\n                if (_ba === 'before') {\n                  // before: targetEvent[ _ex, _ey ] <---- selfEvent[ _sx, _sy ]\n                  if (_sy > _ey) {\n                    // 連結点が自分より上にある\n                    if (_sx > _ex) {\n                      // 連結点が自分より左にある \"(_ex,_ey)└(_sx,_sy)\" as \"lb\"\n                      _curveType[_ba] = 'lb';\n                    } else if (_sx < _ex) {\n                      // 連結点が自分より右にある \"⊂￣\" as \"lb+lt\"\n                      _curveType[_ba] = 'lb+lt';\n                    } else {\n                      // 連結点が自分の直上 \"│\" to top\n                      _curveType[_ba] = null;\n                    }\n                  } else if (_sy < _ey) {\n                    // 連結点が自分より下にある\n                    if (_sx > _ex) {\n                      // 連結点が自分より左にある \"(_ex,_ey)┌(_sx,_sy)\" as \"lt\"\n                      _curveType[_ba] = 'lt';\n                    } else if (_sx < _ex) {\n                      // 連結点が自分より右にある \"⊂_\" as \"rt+rb\"\n                      _curveType[_ba] = 'lt+lb';\n                    } else {\n                      // 連結点が自分の直下 \"│\" to bottom\n                      _curveType[_ba] = null;\n                    }\n                  } else {\n                    // 連結点が自分と同じ水平上にある（左右どちらか） _sy == _ey; \"─\" to left or right\n                    _curveType[_ba] = null;\n                  }\n                } else if (_ba === 'after') {\n                  // after: selfEvent[ _sx, _sy ] ----> targetEvent[ _ex, _ey ]\n                  if (_sy < _ey) {\n                    // 連結点が自分の下にある\n                    if (_sx < _ex) {\n                      // 連結点が自分の右にある \"(_sx,_sy)┐(_ex,_ey)\" as \"rt\"\n                      _curveType[_ba] = 'rt';\n                    } else if (_sx > _ex) {\n                      // 連結点が自分より左にある \"_⊃\" as \"rt+rb\"\n                      _curveType[_ba] = 'rt+rb';\n                    } else {\n                      // 連結点が自分の直下 \"│\" to bottom\n                      _curveType[_ba] = null;\n                    }\n                  } else if (_sy > _ey) {\n                    // 連結点が自分より上にある\n                    if (_sx < _ex) {\n                      // 連結点が自分の右にある \"┘\" as \"rb\"\n                      _curveType[_ba] = 'rb';\n                    } else if (_sx > _ex) {\n                      // 連結点が自分より左にある \"￣⊃\" as \"rb+rt\"\n                      _curveType[_ba] = 'rb+rt';\n                    } else {\n                      // 連結点が自分の直上 \"│\" to top\n                      _curveType[_ba] = null;\n                    }\n                  } else {\n                    // 連結点が自分と同じ水平上にある（左右どちらか） _sy == _ey; \"─\" to left or right\n                    _curveType[_ba] = null;\n                  }\n                }\n              }\n\n              break;\n          }\n        }\n\n        if (Math.abs(_ey - _sy) > _props.rowSize) {\n          _ey += Math.floor(Math.abs(_ey - _sy) / _props.rowSize);\n        }\n\n        ctx_relations.beginPath();\n\n        if (!_this8.is_empty(_curveType)) {\n          // console.log( '!_drawLine:', _curveType, _sx, _sy, _ex, _ey, _radius )\n          switch (true) {\n            case /^lt$/i.test(_curveType[_ba]):\n              // \"(_ex,_ey)┌(_sx,_sy)\"\n              ctx_relations.moveTo(_sx, _sy);\n\n              if (Math.abs(_sx - _ex) > _radius) {\n                ctx_relations.lineTo(_ex - _radius, _sy); // \"─\"\n              }\n\n              if (Math.abs(_ey - _sy) > _radius) {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _sy + _radius); // \"┌\"\n\n                ctx_relations.lineTo(_ex, _ey); // \"│\"\n              } else {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _ey); // \"┌\"\n              }\n\n              break;\n\n            case /^lb$/i.test(_curveType[_ba]):\n              // \"(_ex,_ey)└(_sx,_sy)\"\n              ctx_relations.moveTo(_sx, _sy);\n\n              if (Math.abs(_sx - _ex) > _radius) {\n                ctx_relations.lineTo(_ex + _radius, _sy); // \"─\"\n              }\n\n              if (Math.abs(_sy - _ey) > _radius) {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _sy - _radius); // \"└\"\n\n                ctx_relations.lineTo(_ex, _ey); // \"│\"\n              } else {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _ey); // \"└\"\n              }\n\n              break;\n\n            case /^rt$/i.test(_curveType[_ba]):\n              // \"(_sx,_sy)┐(_ex,_ey)\"\n              ctx_relations.moveTo(_sx, _sy);\n\n              if (Math.abs(_ex - _sx) > _radius) {\n                ctx_relations.lineTo(_ex - _radius, _sy); // \"─\"\n              }\n\n              if (Math.abs(_ey - _sy) > _radius) {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _sy + _radius); // \"┐\"\n\n                ctx_relations.lineTo(_ex, _ey);\n              } else {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _ey); // \"┐\"\n              }\n\n              break;\n\n            case /^rb$/i.test(_curveType[_ba]):\n              // \"(_sx,_sy)┘(_ex,_ey)\"\n              ctx_relations.moveTo(_sx, _sy);\n\n              if (Math.abs(_ex - _sx) > _radius) {\n                ctx_relations.lineTo(_ex - _radius, _sy); // \"─\"\n              }\n\n              if (Math.abs(_sy - _ey) > _radius) {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _sy - _radius); // \"┘\"\n\n                ctx_relations.lineTo(_ex, _ey);\n              } else {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _ey); // \"┘\"\n              }\n\n              break;\n\n            case /^lt\\+lb$/i.test(_curveType[_ba]): // \"⊂＿\"\n\n            case /^lb\\+lt$/i.test(_curveType[_ba]):\n              // \"⊂￣\"\n              ctx_relations.moveTo(_sx, _sy); //ctx_relations.lineTo( _sx - _subRadius, _sy ) // \"─\"\n\n              ctx_relations.lineTo(_sx - _radius, _sy); // \"─\"\n              //ctx_relations.bezierCurveTo( _sx - _subRadius - _radius, _sy, _sx - _subRadius - _radius, _ey, _sx - _subRadius, _ey ) // \"⊂\"\n\n              ctx_relations.bezierCurveTo(_sx - _radius * 2, _sy, _sx - _radius * 2, _ey, _sx - _radius, _ey); // \"⊂\"\n\n              ctx_relations.lineTo(_ex, _ey); // \"─\"\n\n              break;\n\n            case /^rt\\+rb$/i.test(_curveType[_ba]): // \"＿⊃\"\n\n            case /^rb\\+rt$/i.test(_curveType[_ba]):\n              // \"￣⊃\"\n              ctx_relations.moveTo(_sx, _sy); //ctx_relations.lineTo( _sx + _subRadius, _sy ) // \"─\"\n\n              ctx_relations.lineTo(_sx + _radius, _sy); // \"─\"\n              //ctx_relations.bezierCurveTo( _sx + _subRadius + _radius, _sy, _sx + _subRadius + _radius, _ey, _sx + _subRadius, _ey ) // \"⊃\"\n\n              ctx_relations.bezierCurveTo(_sx + _radius * 2, _sy, _sx + _radius * 2, _ey, _sx + _radius, _ey); // \"⊃\"\n\n              ctx_relations.lineTo(_ex, _ey); // \"─\"\n\n              break;\n          }\n        } else {\n          ctx_relations.moveTo(_sx, _sy);\n          ctx_relations.lineTo(_ex, _ey);\n        } //ctx_relations.closePath()\n\n\n        ctx_relations.stroke();\n      };\n\n      ctx_relations.clearRect(0, 0, _canvas[0].width, _canvas[0].height); //console.log( '!_drawRelationLine:', _props, events, _canvas )\n\n      events.forEach(function (evt) {\n        var _rel = evt.relation,\n            _sx,\n            _sy,\n            _ex,\n            _ey,\n            _targetId,\n            _targetEvent;\n\n        if (_rel.hasOwnProperty('before')) {\n          // before: targetEvent[ _ex, _ey ] <---- selfEvent[ _sx, _sy ]\n          // (:> before: 自分を起点（ _sx, _sy ）として左方向の連結点（ _ex, _ey ）へ向かう描画方式\n          _sx = _rel.x;\n          _sy = _rel.y;\n          _targetId = parseInt(_rel.before, 10);\n\n          if (_targetId < 0) {\n            _ex = 0;\n            _ey = _sy;\n          } else {\n            _targetEvent = events.find(function (_evt) {\n              return parseInt(_evt.eventId, 10) == _targetId;\n            });\n\n            if (!_this8.is_empty(_targetEvent) && _targetEvent.relation) {\n              _ex = _targetEvent.relation.x < 0 ? 0 : _targetEvent.relation.x;\n              _ey = _targetEvent.relation.y;\n            }\n          }\n\n          if (_sx >= 0 && _sy >= 0 && _ex >= 0 && _ey >= 0) {\n            drawLine(_sx, _sy, _ex, _ey, evt, 'before');\n          }\n        }\n\n        if (_rel.hasOwnProperty('after')) {\n          // after: selfEvent[ _sx, _sy ] ----> targetEvent[ _ex, _ey ]\n          // (:> after: 自分を起点（ _sx, _sy ）として右方向の連結点（ _ex, _ey ）へ向かう描画方式\n          _sx = _rel.x;\n          _sy = _rel.y;\n          _targetId = parseInt(_rel.after, 10);\n\n          if (_targetId < 0) {\n            _ex = _props.fullwidth;\n            _ey = _sy;\n          } else {\n            _targetEvent = events.find(function (_evt) {\n              return parseInt(_evt.eventId, 10) == _targetId;\n            });\n\n            if (!_this8.is_empty(_targetEvent) && _targetEvent.relation) {\n              _ex = _targetEvent.relation.x > _props.fullwidth ? _props.fullwidth : _targetEvent.relation.x;\n              _ey = _targetEvent.relation.y;\n            }\n          }\n\n          if (_sx >= 0 && _sy >= 0 && _ex >= 0 && _ey >= 0) {\n            drawLine(_sx, _sy, _ex, _ey, evt, 'after');\n          }\n        }\n      });\n    }\n    /*\r\n     * @private: Retrieve the mapping data that placed current events\r\n     */\n\n  }, {\n    key: \"_mapPlacedEvents\",\n    value: function _mapPlacedEvents() {\n      var _that = this,\n          _tl_events = $(this._element).find(Selector.TIMELINE_EVENTS).children(),\n          _cache = this._loadToCache(),\n          _events = [];\n\n      if (!this._isCached || this.is_empty(_cache)) {\n        return _events;\n      }\n\n      _tl_events.each(function () {\n        var _uid = $(this).data('uid'),\n            _data = null;\n\n        if (_cache) {\n          _data = _cache.find(function (_evt) {\n            return _evt.uid === _uid;\n          }) || null;\n        } else {\n          _data = $(this).data();\n        }\n\n        if (!_that.is_empty(_data)) {\n          _events.push(_data);\n        }\n      }); //console.log( '!_mapPlacedEvents:', _events )\n\n\n      return _events;\n    }\n    /*\r\n     * @private: Event when focus or blur\r\n     */\n\n  }, {\n    key: \"_activeEvent\",\n    value: function _activeEvent(event) {\n      // console.log( '!_activeEvent:', event )\n      var _elem = event.target;\n\n      if ('focusin' === event.type) {\n        $(Selector.TIMELINE_EVENT_NODE).removeClass('active');\n        $(_elem).addClass('active');\n      } else if ('focusout' === event.type) {\n        $(_elem).removeClass('active');\n      }\n    }\n    /*\r\n     * @private: Event when hover on the pointer type event\r\n     */\n\n  }, {\n    key: \"_hoverPointer\",\n    value: function _hoverPointer(event) {\n      var _props = this._instanceProps,\n          _elem = event.target,\n          _base = {\n        left: $(_elem).data('baseLeft'),\n        top: $(_elem).data('baseTop'),\n        width: $(_elem).data('baseSize')\n      },\n          _x = _base.left,\n          _y = _base.top,\n          _w = _base.width,\n          _z = 5; //console.log( '!_hoverPointer:', _props )\n\n      if ('mouseenter' === event.type) {\n        _w = Math.max(this.numRound(_w * 1.2, 'ceil'), Math.min(_props.rowSize, _props.scaleSize));\n        _x = this.numRound(_x - (_w - _base.width) / 2, 2);\n        _y = this.numRound(_y - (_w - _base.width) / 2, 2);\n        _z = 9;\n        $(_elem).trigger(Event.FOCUSIN_EVENT);\n      } else {\n        $(_elem).trigger(Event.FOCUSOUT_EVENT);\n      }\n\n      $(_elem).css('left', \"\".concat(_x, \"px\")).css('top', \"\".concat(_y, \"px\")).css('width', \"\".concat(_w, \"px\")).css('height', \"\".concat(_w, \"px\")).css('z-index', _z);\n    }\n    /*\r\n     * @private: Echo the log of plugin for debugging\r\n     */\n\n  }, {\n    key: \"_debug\",\n    value: function _debug(message) {\n      var throwType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Notice';\n\n      if (!this._config.debug) {\n        return;\n      }\n\n      message = this.supplement(null, message);\n\n      if (message) {\n        var _msg = typeof $(this._element).data(DATA_KEY)[message] !== 'undefined' ? \"Called method \\\"\".concat(message, \"\\\".\") : message,\n            _sty = /^Called method \"/.test(_msg) ? 'font-weight:600;color:blue;' : '',\n            _rst = '';\n\n        if (window.console && window.console.log) {\n          if (throwType === 'Notice') {\n            window.console.log('%c%s%c', _sty, _msg, _rst);\n          } else {\n            throw new Error(\"\".concat(_msg));\n          }\n        }\n      }\n    } // Public\n\n    /*\r\n     * @public: This method is able to call only once after completed an initializing of the plugin\r\n     */\n\n  }, {\n    key: \"initialized\",\n    value: function initialized() {\n      var _message = this._isInitialized ? 'Skipped because method \"initialized\" already has been called once' : 'initialized';\n\n      this._debug(_message);\n\n      var _elem = this._element,\n          _opts = this._config,\n          _args = arguments.length <= 0 ? undefined : arguments[0],\n          callback = _args.length > 0 && typeof _args[0] === 'function' ? _args[0] : null,\n          userdata = _args.length > 1 ? _args.slice(1) : null; // console.log( '!initialized:', callback, userdata )\n\n\n      if (callback && !this._isInitialized) {\n        this._debug('Fired your callback function after initializing this plugin.');\n\n        callback(_elem, _opts, userdata);\n      }\n\n      this._isInitialized = true;\n    }\n    /*\r\n     * @public: Destroy the object to which the plugin is applied\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._debug('destroy');\n\n      $.removeData(this._element, DATA_KEY);\n      $(window, document, this._element).off(EVENT_KEY);\n      $(this._element).remove();\n\n      this._removeCache();\n\n      var _arr5 = Object.keys(this);\n\n      for (var _i11 = 0; _i11 < _arr5.length; _i11++) {\n        var _prop = _arr5[_i11];\n        this[_prop] = null;\n        delete this[_prop];\n      }\n    }\n    /*\r\n     * @public: This method has been deprecated since version 2.0.0\r\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      throw new ReferenceError('This method named \"render\" has been deprecated since version 2.0.0');\n    }\n    /*\r\n     * @public: Show hidden timeline\r\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      this._debug('show');\n\n      var _elem = this._element;\n\n      if (!this._isShown) {\n        $(_elem).removeClass(ClassName.HIDE);\n        this._isShown = true;\n      }\n    }\n    /*\r\n     * @public: Hide shown timeline\r\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this._debug('hide');\n\n      var _elem = this._element;\n\n      if (this._isShown) {\n        $(_elem).addClass(ClassName.HIDE);\n        this._isShown = false;\n      }\n    }\n    /*\r\n     * @public: \r\n     */\n\n  }, {\n    key: \"dateback\",\n    value: function dateback() {\n      this._debug('dateback');\n    }\n    /*\r\n     * @public: \r\n     */\n\n  }, {\n    key: \"dateforth\",\n    value: function dateforth() {\n      this._debug('dateforth');\n    }\n    /*\r\n     * @public: Move the display position of the timeline container to the specified position\r\n     */\n\n  }, {\n    key: \"alignment\",\n    value: function alignment(position) {\n      this._debug('alignment');\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _elem = this._element,\n          _tl_container = $(_elem).find(Selector.TIMELINE_CONTAINER),\n          _movX = 0;\n\n      position = this.is_array(position) ? position[0] : _opts.rangeAlign;\n\n      if (_props.fullwidth <= _elem.scrollWidth) {\n        return;\n      }\n\n      switch (true) {\n        case /^(left|begin)$/i.test(position):\n          _movX = 0;\n          break;\n\n        case /^center$/i.test(position):\n          _movX = (_tl_container[0].scrollWidth - _elem.scrollWidth) / 2 + 1;\n          break;\n\n        case /^(right|end)$/i.test(position):\n          _movX = _tl_container[0].scrollWidth - _elem.scrollWidth + 1;\n          break;\n\n        case /^latest$/i.test(position):\n          {\n            var events = this._mapPlacedEvents().sort(this.compareValues('x')),\n                lastEvent = events[events.length - 1];\n\n            _movX = !this.is_empty(lastEvent) ? lastEvent.x : 0; // console.log( events, lastEvent, _movX, _elem.scrollWidth / 2 )\n            // Centering\n\n            if (_elem.scrollWidth / 2 < _movX) {\n              _movX -= Math.ceil(_elem.scrollWidth / 2);\n            } else {\n              _movX = 0;\n            } // Focus target event\n\n\n            $(\"\".concat(Selector.TIMELINE_EVENT_NODE, \"[data-uid=\\\"\").concat(lastEvent.uid, \"\\\"]\")).trigger(Event.FOCUSIN_EVENT);\n            break;\n          }\n\n        case /^\\d{1,}$/.test(position):\n          {\n            var _events2 = this._mapPlacedEvents(),\n                targetEvent = {};\n\n            if (_events2.length > 0) {\n              targetEvent = _events2.find(function (evt) {\n                return evt.eventId == parseInt(position, 10);\n              });\n            }\n\n            _movX = !this.is_empty(targetEvent) ? targetEvent.x : 0; // Centering\n\n            if (Math.ceil(_elem.scrollWidth / 2) < _movX) {\n              _movX -= Math.ceil(_elem.scrollWidth / 2);\n            } else {\n              _movX = 0;\n            } // Focus target event\n\n\n            $(\"\".concat(Selector.TIMELINE_EVENT_NODE, \"[data-uid=\\\"\").concat(targetEvent.uid, \"\\\"]\")).trigger(Event.FOCUSIN_EVENT);\n            break;\n          }\n\n        case /^current(|ly)|now$/i.test(position):\n        default:\n          {\n            var _now = new Date().toString(),\n                _nowX = this.numRound(this._getCoordinateX(_now), 2);\n\n            if (_nowX >= 0) {\n              if (_tl_container[0].scrollWidth - _elem.scrollWidth + 1 < _nowX) {\n                _movX = _tl_container[0].scrollWidth - _elem.scrollWidth + 1;\n              } else {\n                _movX = _nowX;\n              }\n            } else {\n              _movX = 0;\n            }\n\n            break;\n          }\n      } //console.log( `!alignment::${position}:`, _props.fullwidth, _props.visibleWidth, _tl_container[0].scrollWidth, _tl_container[0].scrollLeft, _movX )\n\n\n      _tl_container.scrollLeft(_movX);\n    }\n    /*\r\n     * @public: This method has been deprecated since version 2.0.0\r\n     */\n\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      throw new ReferenceError('This method named \"getOptions\" has been deprecated since version 2.0.0');\n    }\n    /*\r\n     * @public: Add new events to the rendered timeline object\r\n     */\n\n  }, {\n    key: \"addEvent\",\n    value: function addEvent() {\n      var _this9 = this;\n\n      this._debug('addEvent');\n\n      var _args = arguments.length <= 0 ? undefined : arguments[0],\n          events = this.supplement(null, _args[0], this.validateArray),\n          callback = _args.length > 1 && typeof _args[1] === 'function' ? _args[1] : null,\n          userdata = _args.length > 2 ? _args.slice(2) : null,\n          _cacheEvents = this._loadToCache(),\n          lastEventId = 0,\n          add_done = false;\n\n      if (this.is_empty(events) || !this._isCompleted) {\n        return;\n      }\n\n      if (!this.is_empty(_cacheEvents)) {\n        _cacheEvents.sort(this.compareValues('eventId'));\n\n        lastEventId = parseInt(_cacheEvents[_cacheEvents.length - 1].eventId, 10);\n      } //console.log( '!addEvent::before:', _cacheEvents, lastEventId, callback, userdata )\n\n\n      events.forEach(function (evt) {\n        var _one_event = _this9._registerEventData('<div></div>', evt);\n\n        if (!_this9.is_empty(_one_event)) {\n          _one_event.eventId = Math.max(lastEventId + 1, parseInt(_one_event.eventId, 10));\n\n          _cacheEvents.push(_one_event);\n\n          lastEventId = parseInt(_one_event.eventId, 10);\n          add_done = true;\n        }\n      }); //console.log( '!addEvent::after:', _cacheEvents, lastEventId, callback, userdata )\n\n      if (!add_done) {\n        return;\n      }\n\n      this._saveToCache(_cacheEvents);\n\n      this._placeEvent();\n\n      if (callback) {\n        this._debug('Fired your callback function after replacing events.');\n\n        callback(this._element, this._config, userdata);\n      }\n    }\n    /*\r\n     * @public: Remove events from the currently timeline object\r\n     */\n\n  }, {\n    key: \"removeEvent\",\n    value: function removeEvent() {\n      var _this10 = this;\n\n      this._debug('removeEvent');\n\n      var _args = arguments.length <= 0 ? undefined : arguments[0],\n          targets = this.supplement(null, _args[0], this.validateArray),\n          callback = _args.length > 1 && typeof _args[1] === 'function' ? _args[1] : null,\n          userdata = _args.length > 2 ? _args.slice(2) : null,\n          _cacheEvents = this._loadToCache(),\n          condition = {},\n          remove_done = false;\n\n      if (this.is_empty(targets) || !this._isCompleted || this.is_empty(_cacheEvents)) {\n        return;\n      }\n\n      targets.forEach(function (cond) {\n        switch (true) {\n          case /^\\d{1,}$/.test(cond):\n            // By matching event ID\n            condition.type = 'eventId';\n            condition.value = parseInt(cond, 10);\n            break;\n\n          case /^(|\\d{1,}(-|\\/)\\d{1,2}(-|\\/)\\d{1,2}(|\\s\\d{1,2}:\\d{1,2}(|:\\d{1,2})))(|,\\d{1,}(-|\\/)\\d{1,2}(-|\\/)\\d{1,2}(|\\s\\d{1,2}:\\d{1,2}(|:\\d{1,2})))$/.test(cond):\n            {\n              // By matching range of datetime\n              var _tmp = cond.split(',');\n\n              condition.type = 'daterange';\n              condition.value = {};\n              condition.value['from'] = _this10.is_empty(_tmp[0]) ? null : new Date(_tmp[0]);\n              condition.value['to'] = _this10.is_empty(_tmp[1]) ? null : new Date(_tmp[1]);\n              break;\n            }\n\n          default:\n            // By matching regex string\n            condition.type = 'regex';\n            condition.value = new RegExp(cond);\n            break;\n        }\n\n        _cacheEvents.forEach(function (evt, _idx) {\n          switch (condition.type) {\n            case 'eventId':\n              if (parseInt(evt.eventId, 10) == condition.value) {\n                //console.log( `!removeEvent::${condition.type}:${condition.value}:`, _cacheEvents[_idx] )\n                _cacheEvents.splice(_idx, 1);\n\n                remove_done = true;\n              }\n\n              break;\n\n            case 'daterange':\n              {\n                //console.log( condition.value )\n                var _fromX = condition.value.from ? Math.ceil(_this10._getCoordinateX(condition.value.from.toString())) : 0,\n                    _toX = condition.value.to ? Math.floor(_this10._getCoordinateX(condition.value.to.toString())) : _fromX;\n\n                if (_fromX <= evt.x && evt.x <= _toX) {\n                  //console.log( `!removeEvent::${condition.type}:${condition.value.from} ~ ${condition.value.to}:`, _fromX, _toX, evt.x )\n                  _cacheEvents.splice(_idx, 1);\n\n                  remove_done = true;\n                }\n\n                break;\n              }\n\n            case 'regex':\n              //console.log( `!removeEvent::${condition.type}:${condition.value}:`, JSON.stringify( evt ) )\n              if (condition.value.test(JSON.stringify(evt))) {\n                _cacheEvents.splice(_idx, 1);\n\n                remove_done = true;\n              }\n\n              break;\n          }\n        });\n      }); //console.log( `!removeEvent::after:`, _cacheEvents )\n\n      if (!remove_done) {\n        return;\n      }\n\n      this._saveToCache(_cacheEvents);\n\n      this._placeEvent();\n\n      if (callback) {\n        this._debug('Fired your callback function after placing additional events.');\n\n        callback(this._element, this._config, userdata);\n      }\n    }\n    /*\r\n     * @public: Update events on the currently timeline object\r\n     */\n\n  }, {\n    key: \"updateEvent\",\n    value: function updateEvent() {\n      var _this11 = this;\n\n      this._debug('updateEvent');\n\n      var _args = arguments.length <= 0 ? undefined : arguments[0],\n          events = this.supplement(null, _args[0], this.validateArray),\n          callback = _args.length > 1 && typeof _args[1] === 'function' ? _args[1] : null,\n          userdata = _args.length > 2 ? _args.slice(2) : null,\n          _cacheEvents = this._loadToCache(),\n          update_done = false;\n\n      if (this.is_empty(events) || !this._isCompleted || this.is_empty(_cacheEvents)) {\n        return;\n      }\n\n      events.forEach(function (evt) {\n        var _upc_event = _this11._registerEventData('<div></div>', evt),\n            // Update Candidate\n        _old_index = null,\n            _old_event = _cacheEvents.find(function (_evt, _idx) {\n          _old_index = _idx;\n          return _evt.eventId == _upc_event.eventId;\n        }),\n            _new_event = {};\n\n        if (!_this11.is_empty(_old_event) && !_this11.is_empty(_upc_event)) {\n          if (_upc_event.hasOwnProperty('uid')) {\n            delete _upc_event.uid;\n          }\n\n          _new_event = Object.assign(_new_event, _old_event, _upc_event); //console.log( _new_event, _old_event, _upc_event, _old_index )\n\n          _cacheEvents[_old_index] = _new_event;\n          update_done = true;\n        }\n      });\n\n      if (!update_done) {\n        return;\n      }\n\n      this._saveToCache(_cacheEvents);\n\n      this._placeEvent();\n\n      if (callback) {\n        this._debug('Fired your callback function after updating events.');\n\n        callback(this._element, this._config, userdata);\n      }\n    }\n    /*\r\n     * @public: Reload the timeline with overridable any options\r\n     */\n\n  }, {\n    key: \"reload\",\n    value: function reload() {\n      this._debug('reload');\n    }\n    /*\r\n     * @public: The method that fires when an event on the timeline is clicked (:> タイムライン上のイベントがクリックされた時に発火\r\n     *\r\n     * Note: You can hook the custom processing with the callback specified in the event parameter. (:> イベントパラメータに指定したコールバックでカスタム処理をフックできます\r\n     */\n\n  }, {\n    key: \"openEvent\",\n    value: function openEvent(event) {\n      this._debug('openEvent');\n\n      var _that = this,\n          _opts = this._config,\n          _cached = this._isCached,\n          _selector = this._selector,\n          _self = event.target,\n          $viewer = $(document).find(Selector.EVENT_VIEW),\n          //eventId   = parseInt( $(_self).attr( 'id' ).replace( 'evt-', '' ), 10 ),\n      uid = $(_self).data('uid'),\n          //meta      = this.supplement( null, $(_self).data( 'meta' ) ),\n      callback = this.supplement(null, $(_self).data('callback')); //console.log( '!openEvent:', _self, $viewer, eventId, uid, meta, callback )\n\n\n      if ($viewer.length > 0) {\n        $viewer.each(function () {\n          var _cacheEvents = null,\n              _eventData = null,\n              _label = $('<div></div>', {\n            class: ClassName.VIEWER_EVENT_TITLE\n          }),\n              _content = $('<div></div>', {\n            class: ClassName.VIEWER_EVENT_CONTENT\n          }),\n              _meta = $('<div></div>', {\n            class: ClassName.VIEWER_EVENT_META\n          }),\n              _image = $('<div></div>', {\n            class: ClassName.VIEWER_EVENT_IMAGE_WRAPPER\n          });\n\n          if (_cached && 'sessionStorage' in window && window.sessionStorage !== null) {\n            _cacheEvents = JSON.parse(sessionStorage.getItem(_selector));\n            _eventData = _cacheEvents.find(function (event) {\n              return event.uid === uid;\n            });\n          } //console.log( '!openEvent:', $(this), $(_self).html(), _eventData.label )\n\n\n          $(this).empty(); // Initialize Viewer\n\n          if (!_that.is_empty(_eventData.image)) {\n            _image.append(\"<img src=\\\"\".concat(_eventData.image, \"\\\" class=\\\"\").concat(ClassName.VIEWER_EVENT_IMAGE, \"\\\" />\"));\n\n            $(this).append(_image);\n          }\n\n          if (!_that.is_empty(_eventData.label)) {\n            _label.html(_eventData.label);\n\n            $(this).append(_label);\n          }\n\n          if (!_that.is_empty(_eventData.content)) {\n            _content.html(_eventData.content);\n\n            $(this).append(_content);\n          }\n\n          if (!_that.is_empty(_eventData.rangeMeta)) {\n            _meta.html(_eventData.rangeMeta);\n\n            $(this).append(_meta);\n          }\n        });\n      }\n\n      if (callback) {\n        if (_opts.debug) {\n          this._debug(\"The callback \\\"\".concat(callback, \"\\\" was called by the \\\"openEvent\\\" method.\"));\n        }\n\n        try {\n          Function.call(null, \"return \".concat(callback))();\n        } catch (e) {\n          throw new TypeError(e);\n        }\n      }\n    }\n    /* ----------------------------------------------------------------------------------------------------------------\r\n     * Utility Api\r\n     * ----------------------------------------------------------------------------------------------------------------\r\n     */\n\n    /*\r\n     * Determine empty that like PHP (:> PHPライクな空判定メソッド\r\n     *\r\n     * @param mixed value (required)\r\n     *\r\n     * @return bool\r\n     */\n\n  }, {\n    key: \"is_empty\",\n    value: function is_empty(value) {\n      if (value == null) {\n        // typeof null -> object : for hack a bug of ECMAScript\n        // Refer: https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/typeof\n        return true;\n      }\n\n      switch (_typeof(value)) {\n        case 'object':\n          if (Array.isArray(value)) {\n            // When object is array:\n            return value.length === 0;\n          } else {\n            // When object is not array:\n            if (Object.keys(value).length > 0 || Object.getOwnPropertySymbols(value).length > 0) {\n              return false;\n            } else if (value.valueOf().length !== undefined) {\n              return value.valueOf().length === 0;\n            } else if (_typeof(value.valueOf()) !== 'object') {\n              return this.is_empty(value.valueOf());\n            } else {\n              return true;\n            }\n          }\n\n        case 'string':\n          return value === '';\n\n        case 'number':\n          return value == 0;\n\n        case 'boolean':\n          return !value;\n\n        case 'undefined':\n        case 'null':\n          return true;\n\n        case 'symbol': // Since ECMAScript6\n\n        case 'function':\n        default:\n          return false;\n      }\n    }\n    /*\r\n     * Determine whether variable is an array (:> 変数が配列かどうかを調べる\r\n     *\r\n     * @param mixed val (required)\r\n     *\r\n     * @return bool\r\n     */\n\n  }, {\n    key: \"is_array\",\n    value: function is_array(val) {\n      return Object.prototype.toString.call(val) === '[object Array]';\n    }\n    /*\r\n     * Determine whether the object is iterable (:> オブジェクトが反復可能かどうか調べる\r\n     *\r\n     * @param object obj (required)\r\n     *\r\n     * @return bool\r\n     */\n\n  }, {\n    key: \"is_iterable\",\n    value: function is_iterable(obj) {\n      return obj && typeof obj[Symbol.iterator] === 'function';\n    }\n    /*\r\n     * Add an @@iterator method to non-iterable object (:> 反復不能なオブジェクトにイテレータメソッドを追加する\r\n     *\r\n     * @param object obj (required)\r\n     *\r\n     * @return object\r\n     */\n\n  }, {\n    key: \"toIterableObject\",\n    value: function toIterableObject(obj) {\n      if (this.is_iterable(obj)) {\n        return obj;\n      }\n\n      obj[Symbol.iterator] = function () {\n        var index = 0;\n        return {\n          next: function next() {\n            if (obj.length <= index) {\n              return {\n                done: true\n              };\n            } else {\n              return {\n                value: obj[index++]\n              };\n            }\n          }\n        };\n      };\n\n      return obj;\n    }\n    /*\r\n     * Await until next process at specific millisec (:> 指定ミリ秒でスリープ\r\n     *\r\n     * @param int msec (optional; defaults to 1)\r\n     *\r\n     * @return void\r\n     */\n\n  }, {\n    key: \"sleep\",\n    value: function sleep() {\n      var msec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return new Promise(function (resolve) {\n        setTimeout(resolve, msec);\n      });\n    }\n    /*\r\n     * Supplemental method for validating arguments in local scope (:> ローカルスコープ内で引数を検証するための補助メソッド\r\n     *\r\n     * @param mixed default_value (required)\r\n     * @param mixed opt_arg (optional)\r\n     * @param mixed opt_callback (optional; function or string of function to call)\r\n     *\r\n     * @return mixed\r\n     */\n\n  }, {\n    key: \"supplement\",\n    value: function supplement(default_value, opt_arg, opt_callback) {\n      if (opt_arg === undefined) {\n        return default_value;\n      }\n\n      if (opt_callback === undefined) {\n        return opt_arg;\n      }\n\n      return opt_callback(default_value, opt_arg);\n    }\n    /*\r\n     * Generate the pluggable unique id (:> プラガブルな一意のIDを生成する\r\n     *\r\n     * @param int digit (optional)\r\n     *\r\n     * @return string\r\n     */\n\n  }, {\n    key: \"generateUniqueID\",\n    value: function generateUniqueID() {\n      var digit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n      return new Date().getTime().toString(16) + Math.floor(digit * Math.random()).toString(16);\n    }\n    /*\r\n     * Round a number with specific digit (:> 桁指定して数値を丸める\r\n     *\r\n     * @param numeric number (required)\r\n     * @param int digit (optional)\r\n     * @param string round_type (optional; defaults to \"round\")\r\n     *\r\n     * @return numeric\r\n     */\n\n  }, {\n    key: \"numRound\",\n    value: function numRound(number, digit) {\n      var round_type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'round';\n      digit = this.supplement(0, digit, this.validateNumeric);\n\n      var _pow = Math.pow(10, digit);\n\n      switch (true) {\n        case /^ceil$/i.test(round_type):\n          return Math.ceil(number * _pow) / _pow;\n\n        case /^floor$/i.test(round_type):\n          return Math.floor(number * _pow) / _pow;\n\n        case /^round$/i.test(round_type):\n        default:\n          return Math.round(number * _pow) / _pow;\n      }\n    }\n    /*\r\n     * Convert hex of color code to rgba (:> カラーコードのHEX値をRGBA値へ変換する\r\n     *\r\n     * @param string hex (required)\r\n     * @param float alpha (optional; defaults to 1)\r\n     *\r\n     * @return string\r\n     */\n\n  }, {\n    key: \"hexToRgbA\",\n    value: function hexToRgbA(hex) {\n      var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n      var _c;\n\n      if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n        _c = hex.substring(1).split('');\n\n        if (_c.length == 3) {\n          _c = [_c[0], _c[0], _c[1], _c[1], _c[2], _c[2]];\n        }\n\n        _c = \"0x\".concat(_c.join(''));\n        return \"rgba(\".concat([_c >> 16 & 255, _c >> 8 & 255, _c & 255].join(','), \",\").concat(alpha, \")\");\n      } // throw new Error( 'Bad Hex' )\n\n\n      return hex;\n    }\n    /*\r\n     * Get the correct datetime with remapping to that if the year is 0 - 99 (:> 年が0～99の場合に再マッピングして正確な日時を取得する\r\n     *\r\n     * @param string datetime_str (required)\r\n     *\r\n     * @return Date Object, or null if failed\r\n     */\n\n  }, {\n    key: \"getCorrectDatetime\",\n    value: function getCorrectDatetime(datetime_str) {\n      var normalizeDate = function normalizeDate(dateString) {\n        return dateString.replace(/-/g, '/');\n      }; // For Safari, IE\n\n\n      if (isNaN(Date.parse(normalizeDate(datetime_str)))) {\n        console.warn(\"\\\"\".concat(datetime_str, \"\\\" Cannot parse date because invalid format.\"));\n        return null;\n      }\n\n      var _tempDate = new Date(normalizeDate(datetime_str)),\n          _chk_date = datetime_str.split(/-|\\//);\n\n      if (parseInt(_chk_date[0], 10) < 100) {\n        // Remapping if year is 0-99\n        _tempDate.setFullYear(parseInt(_chk_date[0], 10));\n      }\n\n      return _tempDate;\n    }\n    /*\r\n     * Method to get week number as extension of Date object (:> Dateオブジェクトで週番号を取得する拡張メソッド\r\n     *\r\n     * @param string date_str (required)\r\n     *\r\n     * @return int\r\n     */\n\n  }, {\n    key: \"getWeek\",\n    value: function getWeek(date_str) {\n      var targetDate = new Date(date_str),\n          _onejan = new Date(targetDate.getFullYear(), 0, 1),\n          _millisecInDay = 24 * 60 * 60 * 1000;\n\n      return Math.ceil(((targetDate - _onejan) / _millisecInDay + _onejan.getDay() + 1) / 7);\n    }\n    /*\r\n     * Retrieve one higher scale (:> 一つ上のスケールを取得する\r\n     *\r\n     * @param string scale (required)\r\n     *\r\n     * @return string higher_scale\r\n     */\n\n  }, {\n    key: \"getHigherScale\",\n    value: function getHigherScale(scale) {\n      var higher_scale = scale;\n\n      switch (true) {\n        case /^millisec(|ond)s?$/i.test(scale):\n          higher_scale = 'second';\n          break;\n\n        case /^seconds?$/i.test(scale):\n          higher_scale = 'minute';\n          break;\n\n        case /^minutes?$/i.test(scale):\n          higher_scale = 'hour';\n          break;\n\n        case /^quarter-?(|hour)$/i.test(scale):\n        case /^half-?(|hour)$/i.test(scale):\n        case /^hours?$/i.test(scale):\n          higher_scale = 'day';\n          break;\n\n        case /^days?$/i.test(scale):\n        case /^weeks?$/i.test(scale):\n          higher_scale = 'month';\n          break;\n\n        case /^months?$/i.test(scale):\n          higher_scale = 'year';\n          break;\n\n        case /^years?$/i.test(scale):\n          higher_scale = 'lustrum';\n          break;\n\n        case /^lustrum$/i.test(scale):\n          higher_scale = 'decade';\n          break;\n\n        case /^dec(ade|ennium)$/i.test(scale):\n          higher_scale = 'century';\n          break;\n\n        case /^century$/i.test(scale):\n          higher_scale = 'millennium';\n          break;\n\n        case /^millenniums?|millennia$/i.test(scale):\n        default:\n          break;\n      }\n\n      return higher_scale;\n    }\n    /*\r\n     * Retrieve the date string of specified locale (:> 指定されたロケールの日付文字列を取得する\r\n     *\r\n     * @param string date_seed (required)\r\n     * @param string scale (required)\r\n     * @param string locales (optional)\r\n     * @param object options (optional)\r\n     *\r\n     * @return string locale_string\r\n     */\n\n  }, {\n    key: \"getLocaleString\",\n    value: function getLocaleString(date_seed, scale) {\n      var locales = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en-US';\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      function toLocaleStringSupportsLocales() {\n        try {\n          new Date().toLocaleString('i');\n        } catch (e) {\n          return e.name === \"RangeError\";\n        }\n\n        return false;\n      }\n\n      var is_toLocalString = toLocaleStringSupportsLocales(),\n          locale_string = '',\n          _options = {},\n          getOrdinal = function getOrdinal(n) {\n        var s = ['th', 'st', 'nd', 'rd'],\n            v = n % 100;\n        return n + (s[(v - 20) % 10] || s[v] || s[0]);\n      },\n          getZerofill = function getZerofill(num) {\n        var digit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n\n        var strDuplicate = function strDuplicate(n, str) {\n          return Array(n + 1).join(str);\n        },\n            zero = strDuplicate(digit - 1, '0');\n\n        return String(num).length == digit ? String(num) : (zero + num).substr(num * -1);\n      },\n          _prop,\n          _temp;\n\n      for (_prop in options) {\n        if (_prop === 'timeZone' || _prop === 'hour12') {\n          _options[_prop] = options[_prop];\n        }\n      } //console.log( '!2', date_seed, scale, locales, options[scale], is_toLocalString )\n\n\n      switch (true) {\n        case /^millenniums?|millennia$/i.test(scale):\n        case /^century$/i.test(scale):\n        case /^dec(ade|ennium)$/i.test(scale):\n        case /^lustrum$/i.test(scale):\n          if (options.hasOwnProperty(scale) && options[scale] === 'ordinal') {\n            locale_string = getOrdinal(date_seed);\n          } else {\n            locale_string = date_seed;\n          }\n\n          break;\n\n        case /^years?$/i.test(scale):\n          if (is_toLocalString && options.hasOwnProperty(scale)) {\n            if (['numeric', '2-digit'].includes(options[scale])) {\n              _options.year = options[scale];\n              locale_string = this.getCorrectDatetime(date_seed).toLocaleString(locales, _options);\n            } else if ('zerofill' === options[scale]) {\n              locale_string = getZerofill(date_seed);\n            }\n          }\n\n          locale_string = this.is_empty(locale_string) ? this.getCorrectDatetime(date_seed).getFullYear() : locale_string;\n          break;\n\n        case /^months?$/i.test(scale):\n          if (is_toLocalString && options.hasOwnProperty(scale)) {\n            if (['numeric', '2-digit', 'narrow', 'short', 'long'].includes(options[scale])) {\n              _options.month = options[scale];\n              locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n            }\n          } //locale_string = new Date( date_seed ).getMonth() + 1\n\n\n          locale_string = this.is_empty(locale_string) ? new Date(date_seed).getMonth() + 1 : locale_string;\n          break;\n\n        case /^weeks?$/i.test(scale):\n          _temp = date_seed.split(',');\n\n          if (options.hasOwnProperty(scale) && options[scale] === 'ordinal') {\n            locale_string = getOrdinal(_temp);\n          } else {\n            locale_string = _temp[1];\n          }\n\n          break;\n\n        case /^weekdays?$/i.test(scale):\n          _temp = date_seed.split(',');\n\n          if (is_toLocalString) {\n            _options.weekday = options.hasOwnProperty('weekday') ? options.weekday : 'narrow';\n            locale_string = new Date(_temp[0]).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( _temp[0] ).toLocaleString( locales, _options )\n          } else {\n            var _weekday = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n            locale_string = _weekday[_temp[1]];\n          }\n\n          break;\n\n        case /^days?$/i.test(scale):\n          if (is_toLocalString) {\n            _options.day = options.hasOwnProperty('day') ? options.day : 'numeric';\n            locales = options.hasOwnProperty('day') ? locales : 'en-US';\n            locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n          } else {\n            locale_string = new Date(date_seed).getDate(); //locale_string = this.getCorrectDatetime( date_seed ).getDate()\n          }\n\n          break;\n\n        case /^hours?$/i.test(scale):\n        case /^(half|quarter)-?hours?$/i.test(scale):\n          // console.log( '!getLocaleString:', date_seed )\n          if (typeof date_seed === 'string') {\n            var _parts = date_seed.split(':');\n\n            if (_parts.length == 1) {\n              date_seed = \"\".concat(date_seed, \":00:00\");\n            } else if (_parts.length == 2) {\n              date_seed = \"\".concat(date_seed, \":00\");\n            }\n          }\n\n          if (is_toLocalString) {\n            _options.hour = options.hasOwnProperty('hour') ? options.hour : 'numeric';\n\n            if (options.hasOwnProperty('minute')) {\n              _options.minute = options.hasOwnProperty('minute') ? options.minute : 'numeric';\n            }\n\n            locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n          } else {\n            locale_string = new Date(date_seed).getHours(); //locale_string = this.getCorrectDatetime( date_seed ).getHours()\n          }\n\n          break;\n\n        case /^minutes?$/i.test(scale):\n          if (is_toLocalString) {\n            _options.minute = options.hasOwnProperty('minute') ? options.minute : 'numeric';\n\n            if (options.hasOwnProperty('hour')) {\n              _options.hour = options.hasOwnProperty('hour') ? options.hour : 'numeric';\n            }\n\n            locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n          } else {\n            locale_string = new Date(date_seed).getMinutes(); //locale_string = this.getCorrectDatetime( date_seed ).getMinutes()\n          }\n\n          break;\n\n        case /^seconds?$/i.test(scale):\n          if (is_toLocalString) {\n            _options.second = options.hasOwnProperty('second') ? options.second : 'numeric';\n\n            if (options.hasOwnProperty('hour')) {\n              _options.hour = options.hasOwnProperty('hour') ? options.hour : 'numeric';\n            }\n\n            if (options.hasOwnProperty('minute')) {\n              _options.minute = options.hasOwnProperty('minute') ? options.minute : 'numeric';\n            }\n\n            locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n          } else {\n            locale_string = new Date(date_seed).getSeconds(); //locale_string = this.getCorrectDatetime( date_seed ).getSeconds()\n          }\n\n          break;\n\n        case /^millisec(|ond)s?$/i.test(scale):\n        default:\n          locale_string = new Date(date_seed); //locale_string = this.getCorrectDatetime( date_seed )\n\n          break;\n      }\n\n      return locale_string;\n    }\n    /*\r\n     * Get the rendering width of the given string (:> 指定された文字列のレンダリング幅を取得する\r\n     *\r\n     * @param string str (required)\r\n     *\r\n     * @return int\r\n     */\n\n  }, {\n    key: \"strWidth\",\n    value: function strWidth(str) {\n      var _str_ruler = $('<span id=\"jqtl-str-ruler\"></span>'),\n          _width = 0;\n\n      if ($('#jqtl-str-ruler').length == 0) {\n        $('body').append(_str_ruler);\n      }\n\n      _width = $('#jqtl-str-ruler').text(str).get(0).offsetWidth;\n      $('#jqtl-str-ruler').empty();\n      return _width;\n    }\n    /*\r\n     * Sort an array by value of specific property (Note: destructive method) (:> 指定プロパティの値で配列をソートする（注:破壊的メソッド）\r\n     * Usage: Object.sort( this.compareValues( property, order ) )\r\n     *\r\n     * @param string key (required)\r\n     * @param string order (optional; defaults to 'asc')\r\n     *\r\n     * @return object\r\n     */\n\n  }, {\n    key: \"compareValues\",\n    value: function compareValues(key) {\n      var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'asc';\n      return function (a, b) {\n        if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n          return 0;\n        }\n\n        var varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];\n        var varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];\n        var comparison = 0;\n\n        if (varA > varB) {\n          comparison = 1;\n        } else if (varA < varB) {\n          comparison = -1;\n        }\n\n        return order === 'desc' ? comparison * -1 : comparison;\n      };\n    }\n    /*\r\n     * Validators\r\n     */\n\n  }, {\n    key: \"validateString\",\n    value: function validateString(def, val) {\n      return typeof val === 'string' && val !== '' ? val : def;\n    }\n  }, {\n    key: \"validateNumeric\",\n    value: function validateNumeric(def, val) {\n      return typeof val === 'number' ? Number(val) : def;\n    }\n  }, {\n    key: \"validateBoolean\",\n    value: function validateBoolean(def, val) {\n      return typeof val === 'boolean' || _typeof(val) === 'object' && val !== null && typeof val.valueOf() === 'boolean' ? val : def;\n    }\n  }, {\n    key: \"validateObject\",\n    value: function validateObject(def, val) {\n      return _typeof(val) === 'object' ? val : def;\n    }\n  }, {\n    key: \"validateArray\",\n    value: function validateArray(def, val) {\n      return Object.prototype.toString.call(val) === '[object Array]' ? val : def;\n    } // Static\n\n  }], [{\n    key: \"_jQueryInterface\",\n    value: function _jQueryInterface(config) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      return this.each(function () {\n        var data = $(this).data(DATA_KEY);\n\n        var _config = _objectSpread({}, Default, $(this).data(), _typeof(config) === 'object' && config ? config : {}); //console.log( '!_jQueryInterface:', data, config, args )\n\n\n        if (!data) {\n          // Apply the plugin and store the instance in data (:> プラグインを適用する\n          data = new Timeline(this, _config);\n          $(this).data(DATA_KEY, data);\n        }\n\n        if (typeof config === 'string' && config.charAt(0) != '_') {\n          if (typeof data[config] === 'undefined') {\n            // Call no method\n            throw new ReferenceError(\"No method named \\\"\".concat(config, \"\\\"\"));\n          } // Call public method (:> （インスタンスがpublicメソッドを持っている場合）メソッドを呼び出す\n\n\n          data[config](args);\n        } else {\n          if (!data._isInitialized) {\n            data._init();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"VERSION\",\n    get: function get() {\n      return VERSION;\n    }\n  }, {\n    key: \"Default\",\n    get: function get() {\n      return Default;\n    }\n  }]);\n\n  return Timeline;\n}(); // class end\n\n/*\r\n * jQuery\r\n */\n\n\n$.fn[NAME] = Timeline._jQueryInterface;\n$.fn[NAME].Constructor = Timeline;\n\n$.fn[NAME].noConflict = function () {\n  $.fn[NAME] = JQUERY_NO_CONFLICT;\n  return Timeline._jQueryInterface;\n};\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}