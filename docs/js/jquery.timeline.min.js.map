{"version":3,"sources":["bundle.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_construct","Parent","args","Class","Reflect","construct","sham","Proxy","Date","prototype","toString","isNativeReflectConstruct","push","apply","instance","Function","bind","_setPrototypeOf","arguments","Object","setPrototypeOf","__proto__","_toConsumableArray","arr","Array","isArray","arr2","_arrayWithoutHoles","iter","Symbol","iterator","from","_iterableToArray","TypeError","_nonIterableSpread","_typeof","obj","constructor","_slicedToArray","_arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","next","done","value","err","_iterableToArrayLimit","_nonIterableRest","_objectSpread","target","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","defineProperty","configurable","writable","_defineProperties","props","descriptor","NAME","DATA_KEY","EVENT_KEY","PREFIX","JQUERY_NO_CONFLICT","$","fn","Default","type","scale","startDatetime","endDatetime","headline","display","title","range","locale","format","hour12","footer","content","sidebar","sticky","overlay","list","rows","rowHeight","width","height","minGridSize","marginHeight","ruler","top","lines","fontSize","color","background","rangeAlign","loader","hideScrollbar","eventMeta","storage","reloadCacheKeep","zoom","wrapScale","debug","LimitScaleGrids","millennium","century","decade","lustrum","year","month","week","day","hour","quarterHour","halfHour","minute","second","EventParams","uid","eventId","x","y","start","end","row","bgColor","bdColor","label","image","margin","rangeMeta","size","extend","remote","relation","callback","Event","INITIALIZED","HIDE","SHOW","CLICK_EVENT","FOCUSIN_EVENT","FOCUSOUT_EVENT","MOUSEENTER_POINTER","MOUSELEAVE_POINTER","ZOOMIN_SCALE","ClassName","TIMELINE_CONTAINER","TIMELINE_MAIN","TIMELINE_HEADLINE","TIMELINE_HEADLINE_WRAPPER","HEADLINE_TITLE","RANGE_META","RANGE_SPAN","TIMELINE_EVENT_CONTAINER","TIMELINE_BACKGROUND_GRID","TIMELINE_RELATION_LINES","TIMELINE_EVENTS","TIMELINE_EVENT_NODE","TIMELINE_EVENT_LABEL","TIMELINE_EVENT_THUMBNAIL","TIMELINE_RULER_LINES","TIMELINE_RULER_ITEM","TIMELINE_SIDEBAR","TIMELINE_SIDEBAR_MARGIN","TIMELINE_SIDEBAR_ITEM","TIMELINE_FOOTER","TIMELINE_FOOTER_CONTENT","VIEWER_EVENT_TITLE","VIEWER_EVENT_CONTENT","VIEWER_EVENT_META","VIEWER_EVENT_IMAGE_WRAPPER","VIEWER_EVENT_IMAGE","VIEWER_EVENT_TYPE_POINTER","HIDE_SCROLLBAR","RULER_ITEM_ALIGN_LEFT","STICKY_LEFT","OVERLAY","ALIGN_SELF_RIGHT","LOADER_ITEM","Selector","EVENT_NODE","EVENT_VIEW","RULER_TOP","RULER_BOTTOM","TIMELINE_RULER_TOP","TIMELINE_RULER_BOTTOM","LOADER","DEFAULT_EVENTS","Timeline","element","config","Constructor","_classCallCheck","this","_config","_getConfig","_element","_selector","_isInitialized","_isCached","_isCompleted","_isShown","_instanceProps","protoProps","staticProps","_len2","_key3","each","data","charAt","ReferenceError","_init","get","filteredKey","test","_this2","_debug","_elem","tagName","id","className","replace","toLowerCase","showLoader","_calcVars","_verifyMaxRenderableRange","RangeError","_renderView","afterInitEvent","trigger","off","_loadEvent","_placeEvent","document","on","event","openEvent","_activeEvent","_hoverPointer","zoomScale","alignment","_this3","_opts","_props","begin","supplement","_getPluggableDatetime","scaleSize","validateNumeric","_getPluggableRows","rowSize","_temp","_verifyScale","_values","values","_averageDays","numRound","reduce","v","_baseDaysOfScale","_totalWidth","days","grids","variableScale","fullwidth","Math","ceil","_prop","fullheight","visibleWidth","visibleHeight","is_empty","round_type","_date","getFirstDate","dateObj","_tmpDate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","is_remapping","_ms","_higherScale","getHigherScale","getCorrectDatetime","setTime","getTime","_filterScaleKeyName","getLastDate","setFullYear","String","substr","str_like_params","params","JSON","parse","stringify","hasOwnProperty","console","warn","fixed_rows","_diffDate","_tl_container","class","style","_tl_main","info","css","addClass","prepend","_createHeadline","append","_createEventContainer","_createRuler","bottom","parseInt","find","_createSideIndex","_createFooter","_display","validateBoolean","_title","_range","_locale","_format","_begin","_end","_tl_headline","_wrapper","_meta","toLocaleString","pos_y","is_dotted","_this4","_actualHeight","_container","_events_bg","_events_lines","_events_body","_cy","ctx_grid","getContext","drawVerticalLine","pos_x","strokeStyle","lineWidth","beginPath","setLineDash","moveTo","lineTo","closePath","stroke","_pos_y","fillStyle","fillRect","_i2","_pos_y2","_bc","_sy","_arr2","_i3","_key","_i4","position","_this5","ruler_line","def","val","line_height","font_size","text_color","ruler_opts","_fullwidth","_fullheight","_ruler","_ruler_bg","_ruler_body","_finalLines","ctx_ruler","canvas","some","line_scale","idx","_line_y","_line_grids","_grid_x","_correction","_filterVariableScale","_arr3","_i5","_getGridsPerScale","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","_val","return","_createRulerContent","target_scale","scales","retObj","_arr4","_i6","_dt","_days","grid_size","_newKey","split","getWeek","getDay","_scopes","_scale_grids","_sep","_tmp","_y","_mil","_cen","_dec","_lus","_m","_wd","_w","_h","_min","weekday","datetime","_scope","toIterableObject","validateString","validateObject","_ruler_lines","_arr5","_i7","_item_width","_line","_ruler_string","getLocaleString","_data_ruler_item","attr","html","strWidth","_sticky","_overlay","_sbList","_margin","_list","clone","_item","_content","_tl_footer","date1","date2","absval","_dt1","_dt2","diffMS","retval","lastDayOfMonth","isLeapYear","sum","setMonth","abs","_bd","_ed","_dy","_cd","_i8","_cd2","_i9","_cd3","_i10","_cd4","_i11","_cd5","_that","_event_list","_cnt","events","lastEventId","children","_attr","_evt_params","_getPluggableParams","_one_event","_registerEventData","max","cacheIds","_evt","_this","_chkId","includes","_saveToCache","event_element","_x","_c","_this6","new_event","generateUniqueID","_relation","_getCoordinateX","floor","date","coordinate_x","strageEngine","window","localStorage","sessionStorage","setItem","getItem","removeItem","_this7","_evt_container","_relation_lines","_loadToCache","empty","_evt_elem","_createEventNode","_drawRelationLine","sleep","then","hideLoader","fadeIn","left","hexToRgbA","backgroundColor","_pointSize","_getPointerSize","_shiftX","_shiftY","_imgSize","meta","_arr6","_i12","_max","min","_size","_this8","_canvas","ctx_relations","drawLine","_sx","_ex","_ey","evt","_ba","_curveType","_radius","_arr7","_i13","before","after","Boolean","quadraticCurveTo","bezierCurveTo","clearRect","_targetId","_targetEvent","_rel","_tl_events","_cache","_events","_uid","_data","removeClass","_base","_z","message","throwType","_msg","_sty","log","_message","_args","userdata","slice","removeData","remove","_removeCache","_arr8","_i14","_len","_key2","_movX","duration","scrollWidth","_mapPlacedEvents","sort","compareValues","lastEvent","_events2","targetEvent","_now","_nowX","scrollLeft","animate","_this9","validateArray","_cacheEvents","add_done","_this10","targets","condition","remove_done","cond","RegExp","_idx","splice","_fromX","_toX","to","_this11","update_done","_upc_event","_old_index","_old_event","_new_event","assign","_this12","_upc_options","$default_evt","_old_options","_new_options","mergeDeep","_renewEvents","Y","_self","$viewer","_eventData","_label","_image","ruler_item","scaleMap","years","lower","minGrids","_getZoomScale2","begin_date","end_date","base_year","base_month","week_num","base_day","_ruler_item$split2","date_seed","min_grids","_date_seed$split2","_date_seed$split4","_date_seed$split6","getZoomScale","to_scale","zoom_options","_originMinGridSize","_wrap","originMinGridSize","reload","_loader","match","str","_fountain_text","text","_custom_loader","prop","valueOf","item","output","is_Object","_arr9","_i15","is_iterable","index","msec","Promise","resolve","setTimeout","default_value","opt_arg","opt_callback","digit","random","number","_pow","pow","round","hex","alpha","substring","join","datetime_str","_checkDate","_ymd","_his","_parts","_chk_str","_parts2","_chk_str$split2","getDateObject","isNaN","date_str","targetDate","_str","_onejan","higher_scale","locales","options","_num","is_toLocalString","name","toLocaleStringSupportsLocales","locale_string","_options","getOrdinal","s","parseDatetime","_date_str$split2","num","zero","getZerofill","_date_seed$split8","_width","_str_ruler","offsetWidth","order","b","varA","toUpperCase","varB","comparison","Number","_jQueryInterface","noConflict"],"mappings":"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","file":"jquery.timeline.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nfunction isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n//import '@babel/polyfill'\n\n/*!\r\n * jQuery Timeline\r\n * ------------------------\r\n * Version: 2.0.0a1\r\n * Author: Ka2 (https://ka2.org/)\r\n * Repository: https://github.com/ka215/jquery.timeline/tree/develop\r\n * Lisenced: MIT\r\n */\n\n/* ----------------------------------------------------------------------------------------------------------------\r\n * Constants\r\n * ----------------------------------------------------------------------------------------------------------------\r\n */\nvar NAME = \"Timeline\";\nvar VERSION = \"2.0.0a1\";\nvar DATA_KEY = \"jq.timeline\";\nvar EVENT_KEY = \".\".concat(DATA_KEY);\nvar PREFIX = \"jqtl-\";\nvar LOADING_MESSAGE = \"Loading...\";\nvar MIN_POINTER_SIZE = 12; //const DATA_API_KEY       = \".data-api\"\n\nvar JQUERY_NO_CONFLICT = $.fn[NAME];\n/*\r\n * Defaults of plugin options\r\n */\n\nvar Default = {\n  type: \"bar\",\n  // View type of timeline event is either \"bar\" or \"point\"\n  scale: \"day\",\n  // Timetable's minimum level scale is either \"year\", \"month\", \"week\", \"day\", \"hour\", \"minute\"; Enhanced since v2.0.0\n  startDatetime: \"currently\",\n  // Beginning date time of timetable on the timeline. format is ( \"^d{4}(/|-)d{2}(/|-)d{2}\\sd{2}:d{2}:d{2}$\" ) or \"currently\"\n  endDatetime: \"auto\",\n  // Ending date time of timetable on the timeline. format is ( \"^d{4}(/|-)d{2}(/|-)d{2}\\sd{2}:d{2}:d{2}$\" ) or \"auto\"; Added new since v2.0.0\n  // datetimePrefix : \"\", // --> Deprecated since v2.0.0\n  // showHeadline : true, // --> Deprecated since v2.0.0\n  headline: {\n    // Content in the headline; Added new since v2.0.0\n    display: true,\n    // Whether to display headline is instead of former showHeadline\n    title: \"\",\n    range: true,\n    // Hide if false\n    locale: \"en-US\",\n    // This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\n    format: {\n      hour12: false // This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\n\n    }\n  },\n  footer: {\n    // Content in the footer; Added new since v2.0.0\n    display: true,\n    // Whether to display footer\n    content: \"\",\n    range: false,\n    // Visible if true\n    locale: \"en-US\",\n    // This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\n    format: {\n      hour12: false // This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\n\n    }\n  },\n\n  /* datetimeFormat  : { // --> Deprecated since v2.0.0\r\n      full        : \"j M Y\", // or \"Y/m/d\" etc.\r\n      year        : \"Y\",\r\n      month       : \"M Y\", // or \"F\" etc.\r\n      day         : \"D, j M\", // or \"j\" etc.\r\n      years       : \"Y\", \r\n      months      : \"F\", \r\n      days        : \"j\",\r\n      meta        : \"Y/m/d H:i\", // start datetime in meta of Event Detail; or \"g:i A, D F j, Y\"\r\n      metato      : \"\" // --> Deprecated since v2.0.0\r\n  }, */\n  // minuteInterval : 30, // --> Deprecated since v2.0.0\n  // zerofillYear   : false, // --> Deprecated since v2.0.0\n  range: 3,\n  // Override the scale range of the timeline to be rendered when endDatetime is undefined or \"auto\"; Enhanced since v2.0.0\n  sidebar: {\n    // Settings of sidebar; Added new since v2.0.0\n    sticky: false,\n    overlay: false,\n    list: []\n  },\n  rows: \"auto\",\n  // Rows of timeline event area. defaults to \"auto\"; Enhanced since v2.0.0\n  rowHeight: 48,\n  // Height of one row\n  width: \"auto\",\n  // Fixed width (pixel) of timeline view. defaults to \"auto\"; Added new since v2.0.0\n  height: \"auto\",\n  // Fixed height (pixel) of timeline view. defaults to \"auto\" ( rows * rowHeight )\n  // minGridPer   : 2, // --> Deprecated since v2.0.0\n  minGridSize: 30,\n  // Override value of minimum size (pixel) of timeline grid; Enhanced since v2.0.0\n  marginHeight: 2,\n  // Margin (pixel) top and bottom of events on the timeline; Added new since v2.0.0\n  ruler: {\n    // Settings of ruler; Added new since v2.0.0\n    top: {\n      // Can define the ruler position to top or bottom and both\n      lines: [],\n      // defaults to this.option.scale; c.g. [ 'year', 'month', 'day', 'weekday' ]\n      height: 30,\n      fontSize: 14,\n      color: \"#777777\",\n      background: \"#FFFFFF\",\n      locale: \"en-US\",\n      // This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\n      format: {\n        hour12: false // This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\n\n      }\n    }\n  },\n  rangeAlign: \"latest\",\n  // Possible values are \"left\", \"center\", \"right\", \"current\", \"latest\" and specific event id\n  // naviIcon     : { // --> Deprecated since v2.0.0\n  //    left      : `${PREFIX}circle-left`,\n  //    right     : `${PREFIX}circle-right`\n  // },\n  loader: \"default\",\n  // Custom loader definition, possible values are \"default\", false and selector of loader element; Added new since v2.0.0\n  hideScrollbar: false,\n  // Whether or not to display the scroll bar displayed when the width of the timeline overflows (even if it is set to non-display, it will not function depending on the browser); Added new since v2.0.0\n  eventMeta: {\n    // Display meta of range on event node when the timeline type is \"bar\"; Added new since v2.0.0\n    display: false,\n    scale: \"day\",\n    locale: \"en-US\",\n    // This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\n    format: {\n      hour12: false\n    },\n    // This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\n    content: \"\" // This is value for if you want to show custom content on the meta\n\n  },\n  // showPointer  : true, // --> Deprecated since v1.0.6\n  // i18n         : {}, // --> Deprecated since v1.0.6\n  // langsDir     : \"./langs/\", // --> Deprecated since v1.0.6\n  // httpLanguage : false, // --> Deprecated since v1.0.6\n  // duration     : 150, // duration of animate as each transition effects; Added v1.0.6 --> Deprecated since v2.0.0\n  storage: \"session\",\n  // Specification of Web storage to cache event data, defaults to sessionStorage; Added new since v2.0.0\n  reloadCacheKeep: true,\n  // Whether to load cached events during reloading, the cache is discarded if false\n  zoom: false,\n  // Whether to use the ability to zoom the scale of the timeline by double clicking on any scale on the ruler; Added new since v2.0.0\n  wrapScale: true,\n  // wrap scale when zoom\n  // engine       : \"canvas\", // Choose dependent module to core as rendering engine. It'll be \"canvas\" or \"d3.js\"; Maybe add in future version\n  debug: false\n  /*\r\n   * Define the limited grid number per scale of timeline\r\n   */\n\n};\nvar LimitScaleGrids = {\n  millennium: 100,\n  // = 100 : 100000 years\n  century: 100 * 5,\n  // = 500 : 50000 years\n  decade: 10 * 50,\n  // = 500 : 5000 years\n  lustrum: 5 * 100,\n  // = 500 : 2500 years\n  year: 500,\n  // = 500 : 500 years\n  month: 12 * 45,\n  // = 540 : 45 years\n  week: 53 * 10,\n  // = 530 : 10 years\n  day: 366,\n  // = 366 : 1 year\n  hour: 24 * 30,\n  // = 720 : 30 days\n  quarterHour: 24 * 4 * 7.5,\n  // = 720 : 7.5 days\n  halfHour: 24 * 2 * 15,\n  // = 720 : 15 days\n  minute: 60 * 12,\n  // = 720 : 12 hours\n  second: 60 * 15 // = 900 : 15 minutes\n\n  /*\r\n   * Defaults of event parameters on timeline\r\n   */\n\n};\nvar EventParams = {\n  uid: '',\n  // for cache only\n  eventId: '',\n  x: 0,\n  // for cache only\n  y: Default.marginHeight,\n  // for cache only\n  width: Default.minGridSize,\n  // for cache only\n  height: Default.rowHeight - Default.marginHeight * 2,\n  // for cache only\n  start: '',\n  // for cache only\n  end: '',\n  // for cache only\n  row: 1,\n  // for cache only\n  bgColor: '#E7E7E7',\n  color: '#343A40',\n  bdColor: '#6C757D',\n  label: '',\n  content: '',\n  image: '',\n  margin: Default.marginHeight,\n  rangeMeta: '',\n  size: 'normal',\n  // diameter of pointer\n  extend: {},\n  remote: false,\n  relation: {\n    /*\r\n    before    : \r\n    after     : \r\n    linesize  : \r\n    linecolor : \r\n    curve     : \r\n    */\n  },\n  callback: function callback() {}\n};\n/*\r\n * Binding Custom Events\r\n */\n\nvar Event = {\n  INITIALIZED: \"initialized\".concat(EVENT_KEY),\n  HIDE: \"hide\".concat(EVENT_KEY),\n  SHOW: \"show\".concat(EVENT_KEY),\n  CLICK_EVENT: \"click.open\".concat(EVENT_KEY),\n  FOCUSIN_EVENT: \"focusin.event\".concat(EVENT_KEY),\n  FOCUSOUT_EVENT: \"focusout.event\".concat(EVENT_KEY),\n  MOUSEENTER_POINTER: \"mouseenter.pointer\".concat(EVENT_KEY),\n  MOUSELEAVE_POINTER: \"mouseleave.pointer\".concat(EVENT_KEY),\n  ZOOMIN_SCALE: \"dblclick.zoom\".concat(EVENT_KEY)\n  /*\r\n   * Class name of the timeline elements created by the plugin\r\n   */\n\n};\nvar ClassName = {\n  TIMELINE_CONTAINER: \"\".concat(PREFIX, \"container\"),\n  TIMELINE_MAIN: \"\".concat(PREFIX, \"main\"),\n  TIMELINE_HEADLINE: \"\".concat(PREFIX, \"headline\"),\n  TIMELINE_HEADLINE_WRAPPER: \"\".concat(PREFIX, \"headline-wrapper\"),\n  HEADLINE_TITLE: \"\".concat(PREFIX, \"timeline-title\"),\n  RANGE_META: \"\".concat(PREFIX, \"range-meta\"),\n  RANGE_SPAN: \"\".concat(PREFIX, \"range-span\"),\n  TIMELINE_EVENT_CONTAINER: \"\".concat(PREFIX, \"event-container\"),\n  TIMELINE_BACKGROUND_GRID: \"\".concat(PREFIX, \"bg-grid\"),\n  TIMELINE_RELATION_LINES: \"\".concat(PREFIX, \"relation-lines\"),\n  TIMELINE_EVENTS: \"\".concat(PREFIX, \"events\"),\n  TIMELINE_EVENT_NODE: \"\".concat(PREFIX, \"event-node\"),\n  TIMELINE_EVENT_LABEL: \"\".concat(PREFIX, \"event-label\"),\n  TIMELINE_EVENT_THUMBNAIL: \"\".concat(PREFIX, \"event-thumbnail\"),\n  TIMELINE_RULER_LINES: \"\".concat(PREFIX, \"ruler-line-rows\"),\n  TIMELINE_RULER_ITEM: \"\".concat(PREFIX, \"ruler-line-item\"),\n  TIMELINE_SIDEBAR: \"\".concat(PREFIX, \"side-index\"),\n  TIMELINE_SIDEBAR_MARGIN: \"\".concat(PREFIX, \"side-index-margin\"),\n  TIMELINE_SIDEBAR_ITEM: \"\".concat(PREFIX, \"side-index-item\"),\n  TIMELINE_FOOTER: \"\".concat(PREFIX, \"footer\"),\n  TIMELINE_FOOTER_CONTENT: \"\".concat(PREFIX, \"footer-content\"),\n  VIEWER_EVENT_TITLE: \"\".concat(PREFIX, \"event-title\"),\n  VIEWER_EVENT_CONTENT: \"\".concat(PREFIX, \"event-content\"),\n  VIEWER_EVENT_META: \"\".concat(PREFIX, \"event-meta\"),\n  VIEWER_EVENT_IMAGE_WRAPPER: \"\".concat(PREFIX, \"event-image-wrapper\"),\n  VIEWER_EVENT_IMAGE: \"\".concat(PREFIX, \"event-image\"),\n  VIEWER_EVENT_TYPE_POINTER: \"\".concat(PREFIX, \"event-type-pointer\"),\n  HIDE_SCROLLBAR: \"\".concat(PREFIX, \"hide-scrollbar\"),\n  HIDE: \"\".concat(PREFIX, \"hide\"),\n  RULER_ITEM_ALIGN_LEFT: \"\".concat(PREFIX, \"rli-left\"),\n  STICKY_LEFT: \"\".concat(PREFIX, \"sticky-left\"),\n  OVERLAY: \"\".concat(PREFIX, \"overlay\"),\n  ALIGN_SELF_RIGHT: \"\".concat(PREFIX, \"align-self-right\"),\n  LOADER_ITEM: \"\".concat(PREFIX, \"loading\")\n  /*\r\n   * Selectors assigned on the timeline element\r\n   */\n\n};\nvar Selector = {\n  EVENT_NODE: \".\".concat(PREFIX, \"event-node\"),\n  EVENT_VIEW: \".timeline-event-view, .\".concat(PREFIX, \"event-view\"),\n  RULER_TOP: \".\".concat(PREFIX, \"ruler-top\"),\n  RULER_BOTTOM: \".\".concat(PREFIX, \"ruler-bottom\"),\n  TIMELINE_CONTAINER: \".\".concat(ClassName.TIMELINE_CONTAINER),\n  TIMELINE_RULER_TOP: \".\".concat(PREFIX, \"ruler-top\"),\n  TIMELINE_RULER_BOTTOM: \".\".concat(PREFIX, \"ruler-bottom\"),\n  TIMELINE_RULER_ITEM: \".\".concat(ClassName.TIMELINE_RULER_ITEM),\n  TIMELINE_RELATION_LINES: \".\".concat(ClassName.TIMELINE_RELATION_LINES),\n  TIMELINE_EVENTS: \".\".concat(ClassName.TIMELINE_EVENTS),\n  TIMELINE_SIDEBAR: \".\".concat(ClassName.TIMELINE_SIDEBAR),\n  TIMELINE_SIDEBAR_ITEM: \".\".concat(ClassName.TIMELINE_SIDEBAR_ITEM),\n  TIMELINE_EVENT_NODE: \".\".concat(ClassName.TIMELINE_EVENT_NODE),\n  VIEWER_EVENT_TYPE_POINTER: \".\".concat(ClassName.VIEWER_EVENT_TYPE_POINTER),\n  LOADER: \"#\".concat(PREFIX, \"loader\"),\n  DEFAULT_EVENTS: \".timeline-events\"\n  /* ----------------------------------------------------------------------------------------------------------------\r\n   * Plugin Core Class\r\n   * ----------------------------------------------------------------------------------------------------------------\r\n   */\n\n};\n\nvar Timeline =\n/*#__PURE__*/\nfunction () {\n  function Timeline(element, config) {\n    _classCallCheck(this, Timeline);\n\n    this._config = this._getConfig(config);\n    this._element = element;\n    this._selector = null;\n    this._isInitialized = false;\n    this._isCached = false;\n    this._isCompleted = false;\n    this._isShown = false;\n    this._instanceProps = {};\n  } // Getters\n\n\n  _createClass(Timeline, [{\n    key: \"_getConfig\",\n    // Private\n\n    /*\r\n     * @private: Define the default options of this plugin\r\n     */\n    value: function _getConfig(config) {\n      config = _objectSpread({}, Default, config);\n      return config;\n    }\n    /*\r\n     * @private: Filter the scale key name for LimitScaleGrids\r\n     */\n\n  }, {\n    key: \"_filterScaleKeyName\",\n    value: function _filterScaleKeyName(key) {\n      var filteredKey = null;\n\n      switch (true) {\n        case /^quarter-?(|hour)$/i.test(key):\n          filteredKey = 'quarterHour';\n          break;\n\n        case /^half-?(|hour)$/i.test(key):\n          filteredKey = 'halfHour';\n          break;\n\n        default:\n          filteredKey = key;\n      }\n\n      return filteredKey;\n    }\n    /*\r\n     * @private: Initialize the plugin\r\n     */\n\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      var _this2 = this;\n\n      this._debug('_init');\n\n      var _elem = this._element,\n          _selector = \"\".concat(_elem.tagName).concat(_elem.id ? \"#\".concat(_elem.id) : '').concat(_elem.className ? \".\".concat(_elem.className.replace(/\\s/g, '.')) : '');\n\n      this._selector = _selector.toLowerCase();\n\n      if (this._isInitialized || this._isCompleted) {\n        return;\n      }\n\n      this.showLoader();\n\n      this._calcVars();\n\n      if (!this._verifyMaxRenderableRange()) {\n        throw new RangeError(\"Timeline display period exceeds maximum renderable range.\");\n      } //    this.sleep( 2400 ).then(() => {\n\n\n      if (!this._isInitialized) {\n        this._renderView();\n\n        var afterInitEvent = $.Event(Event.INITIALIZED, {\n          _elem: _elem\n        });\n        $(_elem).trigger(afterInitEvent);\n        $(_elem).off(Event.INITIALIZED);\n      }\n\n      if (!this._isCached) {\n        this._loadEvent();\n      }\n\n      if (this._isCached) {\n        this._placeEvent();\n      } // Assign events for the timeline\n\n\n      $(document).on(Event.CLICK_EVENT, \"\".concat(this._selector, \" \").concat(Selector.EVENT_NODE), function (event) {\n        return _this2.openEvent(event);\n      });\n      $(_elem).on(Event.FOCUSIN_EVENT, Selector.TIMELINE_EVENT_NODE, function (event) {\n        return _this2._activeEvent(event);\n      });\n      $(_elem).on(Event.FOCUSOUT_EVENT, Selector.TIMELINE_EVENT_NODE, function (event) {\n        return _this2._activeEvent(event);\n      });\n\n      if (/^point(|er)$/i.test(this._config.type)) {\n        $(_elem).on(Event.MOUSEENTER_POINTER, Selector.VIEWER_EVENT_TYPE_POINTER, function (event) {\n          return _this2._hoverPointer(event);\n        });\n        $(_elem).on(Event.MOUSELEAVE_POINTER, Selector.VIEWER_EVENT_TYPE_POINTER, function (event) {\n          return _this2._hoverPointer(event);\n        });\n      }\n\n      if (this._config.zoom) {\n        $(_elem).on(Event.ZOOMIN_SCALE, Selector.TIMELINE_RULER_ITEM, function (event) {\n          return _this2.zoomScale(event);\n        });\n      }\n\n      this._isCompleted = true;\n      this.alignment(); //    }) // /sleep\n    }\n    /*\r\n     * @private: Calculate each properties of the timeline instance\r\n     */\n\n  }, {\n    key: \"_calcVars\",\n    value: function _calcVars() {\n      var _this3 = this;\n\n      var _opts = this._config,\n          _props = {};\n      _props.begin = this.supplement(null, this._getPluggableDatetime(_opts.startDatetime, 'first'));\n      _props.end = this.supplement(null, this._getPluggableDatetime(_opts.endDatetime, 'last'));\n      _props.scaleSize = this.supplement(null, _opts.minGridSize, this.validateNumeric);\n      _props.rows = this._getPluggableRows();\n      _props.rowSize = this.supplement(null, _opts.rowHeight, this.validateNumeric);\n      _props.width = this.supplement(null, _opts.width, this.validateNumeric);\n      _props.height = this.supplement(null, _opts.height, this.validateNumeric);\n      this._instanceProps = _props; // pre-cache\n\n      if (/^(year|month)s?$/i.test(_opts.scale)) {\n        // For scales where the value of quantity per unit is variable length (:> 単位あたりの量の値が可変長であるスケールの場合\n        var _temp = this._verifyScale(_opts.scale),\n            _values = Object.values(_temp),\n            _averageDays = this.numRound(_values.reduce(function (a, v) {\n          return a + v;\n        }, 0) / _values.length, 4),\n            // Average days within the range\n        _baseDaysOfScale = /^years?$/i.test(_opts.scale) ? 365 : 30,\n            _totalWidth = 0; //console.log( '!', _opts.scale, _temp, _vals )\n\n\n        _values.forEach(function (days) {\n          _totalWidth += _this3.numRound(days * _props.scaleSize / _baseDaysOfScale, 2);\n        });\n\n        _props.scale = _averageDays * (24 * 60 * 60 * 1000);\n        _props.grids = _values.length;\n        _props.variableScale = _temp;\n        _props.fullwidth = _totalWidth;\n      } else {\n        // In case of fixed length scale (:> 固定長スケールの場合\n        _props.scale = this._verifyScale(_opts.scale);\n        _props.grids = Math.ceil((_props.end - _props.begin) / _props.scale);\n        _props.variableScale = null;\n        _props.fullwidth = _props.grids * _props.scaleSize;\n      }\n\n      _props.fullheight = _props.rows * _props.rowSize; // Define visible size according to full size of timeline (:> タイムラインのフルサイズに準じた可視サイズを定義\n\n      _props.visibleWidth = _props.width > 0 ? \"\".concat(_props.width <= _props.fullwidth ? _props.width : _props.fullwidth, \"px\") : '100%';\n      _props.visibleHeight = _props.height > 0 ? \"\".concat(_props.height <= _props.fullheight ? _props.height : _props.fullheight, \"px\") : 'auto';\n\n      for (var _prop in _props) {\n        if (_prop === 'width' || _prop === 'height' || _prop === 'variableScale') {\n          continue;\n        }\n\n        if (this.is_empty(_props[_prop])) {\n          throw new TypeError(\"Property \\\"\".concat(_prop, \"\\\" cannot set because undefined or invalid variable.\"));\n        }\n      }\n\n      if (_props.fullwidth < 2 || _props.fullheight < 2) {\n        throw new TypeError(\"The range of the timeline to be rendered is incorrect.\");\n      }\n\n      this._instanceProps = _props;\n    }\n    /*\r\n     * @private: Retrieve the pluggable datetime as milliseconds from specified keyword (:> 指定キーから作成されたプラガブルな日時をミリ秒単位で取得する\r\n     */\n\n  }, {\n    key: \"_getPluggableDatetime\",\n    value: function _getPluggableDatetime(key) {\n      var round_type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      var _opts = this._config,\n          _date = null,\n          getFirstDate = function getFirstDate(dateObj, scale) {\n        var _tmpDate;\n\n        switch (true) {\n          case /^millenniums?|millennia$/i.test(scale):\n          case /^century$/i.test(scale):\n          case /^dec(ade|ennium)$/i.test(scale):\n          case /^lustrum$/i.test(scale):\n          case /^years?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), 0, 1);\n            break;\n\n          case /^months?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), 1);\n            break;\n\n          case /^(week|day)s?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate());\n            break;\n\n          case /^(|half|quarter)-?hours?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours());\n            break;\n\n          case /^minutes?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes());\n            break;\n\n          case /^seconds?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes(), dateObj.getSeconds());\n            break;\n        }\n\n        return _tmpDate;\n      },\n          getLastDate = function getLastDate(dateObj, scale) {\n        var _tmpDate;\n\n        switch (true) {\n          case /^millenniums?|millennia$/i.test(scale):\n          case /^century$/i.test(scale):\n          case /^dec(ade|ennium)$/i.test(scale):\n          case /^lustrum$/i.test(scale):\n          case /^years?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear() + 1, 0, 1);\n            break;\n\n          case /^months?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth() + 1, 1);\n            break;\n\n          case /^(week|day)s?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate() + 1);\n            break;\n\n          case /^(|half|quarter)-?hours?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours() + 1);\n            break;\n\n          case /^minutes?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes() + 1);\n            break;\n\n          case /^seconds?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes(), dateObj.getSeconds() + 1);\n            break;\n        }\n\n        return new Date(_tmpDate.getTime() - 1);\n      },\n\n      /*\r\n      parseDatetime = ( datetime_str ) => {\r\n      //console.log( '!!!:', datetime_str, /^\\d{1,2}(|\\/\\d{1,2}(|\\/\\d{1,2}))(| \\d{1,2}(|:\\d{1,2}(|:\\d{1,2})))$/i.test( datetime_str ) )\r\n        if ( /^\\d{1,2}(|\\/\\d{1,2}(|\\/\\d{1,2}))(| \\d{1,2}(|:\\d{1,2}(|:\\d{1,2})))$/i.test( datetime_str ) ) {\r\n            let [ _ymd, _his ] = datetime_str.split(' '),\r\n                _parts         = _ymd.split('/')\r\n            \r\n            if ( _parts[1] ) {\r\n                _parts[1] = parseInt( _parts[1], 10 ) - 1\r\n            }\r\n            if ( _his ) {\r\n                _parts.push( ..._his.split(':') )\r\n            }\r\n      //console.log( '!_getPluggableDatetime::parseDatetime:', datetime_str, _ymd, _his, _parts, _date )\r\n            return new Date( new Date( ..._parts ).setFullYear( parseInt( _parts[0], 10 ) ) )\r\n        } else {\r\n            return new Date( datetime_str.toString() )\r\n        }\r\n      },*/\n      is_remapping = /^\\d{1,2}(|(-|\\/).+)$/.test(key.toString()); //console.log( '!_getPluggableDatetime:', key, round_type, is_remapping )\n\n\n      switch (true) {\n        case /^current(|ly)$/i.test(key):\n          _date = new Date(); //console.log( '!_getPluggableDatetime::currently:', _opts.scale, this.getHigherScale( _opts.scale ), key, _date.getTime() )\n\n          break;\n\n        case /^auto$/i.test(key):\n          {\n            var _ms = null,\n                _higherScale = this.getHigherScale(_opts.scale);\n\n            if (/^current(|ly)$/i.test(_opts.startDatetime)) {\n              _date = new Date(); //if ( /^(year|month)s?$/i.test( _opts.scale ) ) {\n\n              _date = getFirstDate(_date, _opts.scale); //}\n            } else {\n              _date = this.getCorrectDatetime(_opts.startDatetime);\n            }\n\n            if (_opts.range || _opts.range > 0) {\n              if (/^years?$/i.test(_higherScale)) {\n                _ms = 365.25 * 24 * 60 * 60 * 1000;\n              } else if (/^months?$/i.test(_higherScale)) {\n                _ms = 30.44 * 24 * 60 * 60 * 1000;\n              } else {\n                _ms = this._verifyScale(_higherScale);\n              }\n\n              _date.setTime(_date.getTime() + _ms * _opts.range);\n            } else {\n              if (/^years?$/i.test(_opts.scale)) {\n                _ms = 365.25 * 24 * 60 * 60 * 1000;\n              } else if (/^months?$/i.test(_opts.scale)) {\n                _ms = 30.44 * 24 * 60 * 60 * 1000;\n              } else {\n                _ms = this._verifyScale(_opts.scale);\n              }\n\n              _date.setTime(_date.getTime() + _ms * LimitScaleGrids[this._filterScaleKeyName(_opts.scale)]);\n            } // console.log( '!_getPluggableDatetime::auto:', _opts.scale, this.getHigherScale( _opts.scale ), key, _date.getTime() )\n\n\n            break;\n          }\n\n        default:\n          _date = this.getCorrectDatetime(key);\n          break;\n      }\n      /*\r\n      if ( isNaN( _date ) || this.is_empty( _date ) ) {\r\n      console.log( '!_getPluggableDatetime::NaN:', key )\r\n          _date = parseDatetime( key )\r\n      } else\r\n      */\n\n\n      if (!is_remapping) {\n        is_remapping = _date.getFullYear() < 100;\n      }\n\n      if (!this.is_empty(round_type)) {\n        if ('first' === round_type) {\n          //console.log( '!_getPluggableDatetime::first:before:', key, _date, is_remapping )\n          _date = getFirstDate(_date, _opts.scale); //console.log( '!_getPluggableDatetime::first:after:', key, _date, is_remapping )\n        } else if ('last' === round_type) {\n          //console.log( '!_getPluggableDatetime::last:before:', key, _date, is_remapping )\n          _date = getLastDate(_date, _opts.scale); //console.log( '!_getPluggableDatetime::last:after:', key, _date, is_remapping )\n        }\n      }\n\n      if (is_remapping) {\n        _date.setFullYear(String(_date.getFullYear()).substr(-2));\n      } //console.log( '!_getPluggableDatetime::return:', _date )\n\n\n      return _date.getTime();\n    }\n    /*\r\n     * @private: Retrieve the pluggable parameter as an object (:> プラガブルなパラメータオブジェクトを取得する\r\n     */\n\n  }, {\n    key: \"_getPluggableParams\",\n    value: function _getPluggableParams(str_like_params) {\n      var params = {};\n\n      if (typeof str_like_params === 'string' && str_like_params) {\n        try {\n          params = JSON.parse(JSON.stringify(new Function(\"return \".concat(str_like_params))()));\n\n          if (params.hasOwnProperty('extend')) {\n            params.extend = JSON.parse(JSON.stringify(new Function(\"return \".concat(params.extend))()));\n          }\n        } catch (e) {\n          console.warn('Can not parse to object therefor invalid param.');\n        }\n      }\n\n      return params;\n    }\n    /*\r\n     * @private: Retrieve the pluggable rows of the timeline (:> プラガブルなタイムラインの行数を取得する\r\n     */\n\n  }, {\n    key: \"_getPluggableRows\",\n    value: function _getPluggableRows() {\n      var _opts = this._config,\n          fixed_rows = this.supplement('auto', _opts.rows, this.validateNumeric);\n\n      if (fixed_rows === 'auto') {\n        fixed_rows = _opts.sidebar.list.length;\n      }\n\n      return fixed_rows > 0 ? fixed_rows : 1;\n    }\n    /*\r\n     * @private: Verify the allowed scale, then retrieve that scale's millisecond if allowed (:> 許容スケールかを確認し、許可時はそのスケールのミリ秒を取得する\r\n     */\n\n  }, {\n    key: \"_verifyScale\",\n    value: function _verifyScale(scale) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _ms = -1;\n\n      if (typeof scale === 'undefined' || typeof scale !== 'string') {\n        return false;\n      }\n\n      switch (true) {\n        case /^millisec(|ond)s?$/i.test(scale):\n          // Millisecond (:> ミリ秒\n          _ms = 1;\n          break;\n\n        case /^seconds?$/i.test(scale):\n          // Second (:> 秒\n          _ms = 1000;\n          break;\n\n        case /^minutes?$/i.test(scale):\n          // Minute (:> 分\n          _ms = 60 * 1000;\n          break;\n\n        case /^quarter-?(|hour)$/i.test(scale):\n          // Quarter of an hour (:> 15分\n          _ms = 15 * 60 * 1000;\n          break;\n\n        case /^half-?(|hour)$/i.test(scale):\n          // Half an hour (:> 30分\n          _ms = 30 * 60 * 1000;\n          break;\n\n        case /^hours?$/i.test(scale):\n          // Hour (:> 時（時間）\n          _ms = 60 * 60 * 1000;\n          break;\n\n        case /^days?$/i.test(scale):\n          // Day (:> 日\n          _ms = 24 * 60 * 60 * 1000;\n          break;\n\n        case /^weeks?$/i.test(scale):\n          // Week (:> 週\n          _ms = 7 * 24 * 60 * 60 * 1000;\n          break;\n\n        case /^months?$/i.test(scale):\n          // Month (is the variable length scale) (:> 月（可変長スケール）\n          //console.log( '!_verifyScale::month:', this._instanceProps, _opts.scale )\n          if (/^(year|month)s?$/i.test(_opts.scale)) {\n            return this._diffDate(_props.begin, _props.end, scale);\n          } else {\n            _ms = 30.44 * 24 * 60 * 60 * 1000;\n            break;\n          }\n\n        case /^years?$/i.test(scale):\n          // Year (is the variable length scale) (:> 年（可変長スケール）\n          if (/^(year|month)s?$/i.test(_opts.scale)) {\n            return this._diffDate(_props.begin, _props.end, scale);\n          } else {\n            _ms = 365.25 * 24 * 60 * 60 * 1000;\n            break;\n          }\n\n        case /^lustrum$/i.test(scale):\n          // Lustrum (is the variable length scale, but currently does not support) (:> 五年紀 (可変長スケールだが現在サポートしてない)\n          // 5y = 1826 or 1827; 1826 * 24 * 60 * 60 = 15766400, 1827 * 24 * 60 * 60 = 157852800 | avg.= 157788000\n          //_ms = ( ( 3.1536 * Math.pow( 10, 8 ) ) / 2 ) * 1000 // <--- Useless by info of wikipedia\n          _ms = 157788000 * 1000;\n          break;\n\n        case /^dec(ade|ennium)$/i.test(scale):\n          // Decade (is the variable length scale, but currently does not support) (:> 十年紀 (可変長スケールだが現在サポートしてない)\n          // 10y = 3652 or 3653; 3652 * 24 * 60 * 60 = 315532800, 3653 * 24 * 60 * 60 = 157852800 | avg. = 315576000\n          // _ms = ( 3.1536 * Math.pow( 10, 8 ) ) * 1000 // <--- Useless by info of wikipedia\n          _ms = 315576000 * 1000;\n          break;\n\n        case /^century$/i.test(scale):\n          // Century (:> 世紀（百年紀）\n          // 100y = 36525; 36525 * 24 * 60 * 60 = 3155760000\n          _ms = 3155760000 * 1000;\n          break;\n\n        case /^millenniums?|millennia$/i.test(scale):\n          // Millennium (:> 千年紀\n          // 100y = 365250\n          //_ms = ( 3.1536 * Math.pow( 10, 10 ) ) * 1000\n          _ms = 3155760000 * 10 * 1000;\n          break;\n\n        default:\n          console.warn('Specified an invalid scale.');\n          _ms = -1;\n      }\n\n      return _ms > 0 ? _ms : false;\n    }\n    /*\r\n     * @private: Verify the display period of the timeline does not exceed the maximum renderable range (:> タイムラインの表示期間が最大描画可能範囲を超過していないか検証する\r\n     */\n\n  }, {\n    key: \"_verifyMaxRenderableRange\",\n    value: function _verifyMaxRenderableRange() {\n      // console.log( this._instanceProps.grids, '/', LimitScaleGrids[this._filterScaleKeyName( this._config.scale )] )\n      return this._instanceProps.grids <= LimitScaleGrids[this._filterScaleKeyName(this._config.scale)];\n    }\n    /*\r\n     * @private: Render the view of timeline container\r\n     */\n\n  }, {\n    key: \"_renderView\",\n    value: function _renderView() {\n      this._debug('_renderView');\n\n      var _elem = this._element,\n          _opts = this._config,\n          _props = this._instanceProps,\n          _tl_container = $('<div></div>', {\n        class: ClassName.TIMELINE_CONTAINER,\n        style: \"width: \".concat(_props.visibleWidth, \"; height: \").concat(_props.visibleHeight, \";\")\n      }),\n          _tl_main = $('<div></div>', {\n        class: ClassName.TIMELINE_MAIN\n      }); //console.log( _elem, _opts, _props )\n\n\n      if ($(_elem).length == 0) {\n        throw new TypeError('Does not exist the element to render a timeline container.');\n      }\n\n      if (_opts.debug) {\n        console.info(\"Timeline:{ fullWidth: \".concat(_props.fullwidth, \"px,\"), \"fullHeight: \".concat(_props.fullheight, \"px,\"), \"viewWidth: \".concat(_props.visibleWidth), \"viewHeight: \".concat(_props.visibleHeight, \" }\"));\n      }\n\n      $(_elem).css('position', 'relative'); // initialize; not .empty()\n\n      if (_opts.hideScrollbar) {\n        _tl_container.addClass(ClassName.HIDE_SCROLLBAR);\n      } // Create the timeline headline (:> タイムラインの見出しを生成\n\n\n      $(_elem).prepend(this._createHeadline()); // Create the timeline event container (:> タイムラインのイベントコンテナを生成\n\n      _tl_main.append(this._createEventContainer()); // Create the timeline ruler (:> タイムラインの目盛を生成\n\n\n      if (!this.is_empty(_opts.ruler.top)) {\n        _tl_main.prepend(this._createRuler('top'));\n      }\n\n      if (!this.is_empty(_opts.ruler.bottom)) {\n        _tl_main.append(this._createRuler('bottom'));\n      } // Create the timeline side index (:> タイムラインのサイドインデックスを生成\n\n\n      var margin = {\n        top: parseInt(_tl_main.find(Selector.RULER_TOP).height(), 10) - 1,\n        bottom: parseInt(_tl_main.find(Selector.RULER_BOTTOM).height(), 10) - 1\n      };\n\n      if (_opts.sidebar.list.length > 0) {\n        _tl_container.prepend(this._createSideIndex(margin));\n      } // Append the timeline container in the timeline element (:> タイムライン要素にタイムラインコンテナを追加\n\n\n      _tl_container.append(_tl_main);\n\n      $(_elem).append(_tl_container); // Create the timeline footer (:> タイムラインのフッタを生成\n\n      $(_elem).append(this._createFooter());\n      this._isShown = true;\n    }\n    /*\r\n     * @private: Create the headline of the timeline (:> タイムラインの見出しを作成する\r\n     */\n\n  }, {\n    key: \"_createHeadline\",\n    value: function _createHeadline() {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _display = this.supplement(Default.headline.display, _opts.headline.display, this.validateBoolean),\n          _title = this.supplement(null, _opts.headline.title),\n          _range = this.supplement(Default.headline.range, _opts.headline.range, this.validateBoolean),\n          _locale = this.supplement(Default.headline.locale, _opts.headline.locale),\n          _format = this.supplement(Default.headline.format, _opts.headline.format),\n          _begin = this.supplement(null, _props.begin),\n          _end = this.supplement(null, _props.end),\n          _tl_headline = $('<div></div>', {\n        class: ClassName.TIMELINE_HEADLINE\n      }),\n          _wrapper = $('<div></div>', {\n        class: ClassName.TIMELINE_HEADLINE_WRAPPER\n      }); // console.log( '!_createHeadline:', _opts )\n\n\n      if (_title) {\n        _wrapper.append(\"<h3 class=\\\"\".concat(ClassName.HEADLINE_TITLE, \"\\\">\").concat(_opts.headline.title, \"</h3>\"));\n      }\n\n      if (_range) {\n        if (_begin && _end) {\n          var _meta = \"\".concat(new Date(_begin).toLocaleString(_locale, _format), \"<span class=\\\"\").concat(ClassName.RANGE_SPAN, \"\\\"></span>\").concat(new Date(_end).toLocaleString(_locale, _format)); //let _meta = this.getCorrectDatetime( _begin ).toLocaleString( _locale, _format ) +'<span class=\"jqtl-range-span\"></span>'+ this.getCorrectDatetime( _end ).toLocaleString( _locale, _format )\n\n\n          _wrapper.append(\"<div class=\\\"\".concat(ClassName.RANGE_META, \"\\\">\").concat(_meta, \"</div>\"));\n        }\n      }\n\n      if (!_display) {\n        _tl_headline.addClass(ClassName.HIDE);\n      }\n\n      return _tl_headline.append(_wrapper);\n    }\n    /*\r\n     * @private: Create the event container of the timeline (:> タイムラインのイベントコンテナを作成する\r\n     */\n\n  }, {\n    key: \"_createEventContainer\",\n    value: function _createEventContainer() {\n      var _this4 = this;\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _actualHeight = _props.fullheight + Math.ceil(_props.rows / 2),\n          _container = $('<div></div>', {\n        class: ClassName.TIMELINE_EVENT_CONTAINER,\n        style: \"height:\".concat(_actualHeight, \"px;\")\n      }),\n          _events_bg = $(\"<canvas width=\\\"\".concat(_props.fullwidth - 1, \"\\\" height=\\\"\").concat(_actualHeight, \"\\\" class=\\\"\").concat(ClassName.TIMELINE_BACKGROUND_GRID, \"\\\"></canvas>\")),\n          _events_lines = $(\"<canvas width=\\\"\".concat(_props.fullwidth - 1, \"\\\" height=\\\"\").concat(_actualHeight, \"\\\" class=\\\"\").concat(ClassName.TIMELINE_RELATION_LINES, \"\\\"></canvas>\")),\n          _events_body = $('<div></div>', {\n        class: ClassName.TIMELINE_EVENTS\n      }),\n          _cy = 0,\n          ctx_grid = _events_bg[0].getContext('2d'),\n          drawRowRect = function drawRowRect(pos_y, color) {\n        color = _this4.supplement('#FFFFFF', color); // console.log( 0, pos_y, _fullwidth, _size_row, color )\n\n        ctx_grid.fillStyle = color;\n        ctx_grid.fillRect(0, pos_y + 0.5, _props.fullwidth, _props.rowSize + 1.5);\n        ctx_grid.stroke();\n      },\n          drawHorizontalLine = function drawHorizontalLine(pos_y, is_dotted) {\n        is_dotted = _this4.supplement(false, is_dotted); // console.log( pos_y, is_dotted )\n\n        ctx_grid.strokeStyle = 'rgba( 51, 51, 51, 0.1 )';\n        ctx_grid.lineWidth = 1;\n        ctx_grid.filter = 'url(#crisp)';\n        ctx_grid.beginPath();\n\n        if (is_dotted) {\n          ctx_grid.setLineDash([1, 2]);\n        } else {\n          ctx_grid.setLineDash([]);\n        }\n\n        ctx_grid.moveTo(0, pos_y + 0.5);\n        ctx_grid.lineTo(_props.fullwidth, pos_y + 0.5);\n        ctx_grid.closePath();\n        ctx_grid.stroke();\n      },\n          drawVerticalLine = function drawVerticalLine(pos_x, is_dotted) {\n        is_dotted = _this4.supplement(false, is_dotted); // console.log( pos_x, is_dotted )\n\n        ctx_grid.strokeStyle = 'rgba( 51, 51, 51, 0.025 )';\n        ctx_grid.lineWidth = 1;\n        ctx_grid.filter = 'url(#crisp)';\n        ctx_grid.beginPath();\n\n        if (is_dotted) {\n          ctx_grid.setLineDash([1, 2]);\n        } else {\n          ctx_grid.setLineDash([]);\n        }\n\n        ctx_grid.moveTo(pos_x - 0.5, 0);\n        ctx_grid.lineTo(pos_x - 0.5, _props.fullheight);\n        ctx_grid.closePath();\n        ctx_grid.stroke();\n      };\n\n      _cy = 0;\n\n      for (var i = 0; i < _props.rows; i++) {\n        _cy += i % 2 == 0 ? 1 : 0;\n\n        var _pos_y = i * _props.rowSize + _cy;\n\n        drawRowRect(_pos_y, i % 2 == 0 ? '#FEFEFE' : '#F8F8F8');\n      }\n\n      _cy = 0;\n\n      for (var _i2 = 1; _i2 < _props.rows; _i2++) {\n        _cy += _i2 % 2 == 0 ? 1 : 0;\n\n        var _pos_y2 = _i2 * _props.rowSize + _cy;\n\n        drawHorizontalLine(_pos_y2, true);\n      }\n\n      if (/^(year|month)s?$/i.test(_opts.scale)) {\n        // For scales where the value of quantity per unit is variable length (:> 単位あたりの量の値が可変長であるスケールの場合\n        var _bc = /^years?$/i.test(_opts.scale) ? 365 : 30,\n            _sy = 0;\n\n        var _arr2 = Object.keys(_props.variableScale);\n\n        for (var _i3 = 0; _i3 < _arr2.length; _i3++) {\n          var _key = _arr2[_i3];\n          _sy += this.numRound(_props.variableScale[_key] * _props.scaleSize / _bc, 2);\n          drawVerticalLine(_sy, false);\n        }\n      } else {\n        // In case of fixed length scale (:> 固定長スケールの場合\n        for (var _i4 = 1; _i4 < _props.grids; _i4++) {\n          drawVerticalLine(_i4 * _props.scaleSize, false);\n        }\n      }\n\n      return _container.append(_events_bg).append(_events_lines).append(_events_body);\n    }\n    /*\r\n     * @private: Create the ruler of the timeline (:> タイムラインの目盛を作成する\r\n     */\n\n  }, {\n    key: \"_createRuler\",\n    value: function _createRuler(position) {\n      var _this5 = this;\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          ruler_line = this.supplement([_opts.scale], _opts.ruler[position].lines, function (def, val) {\n        return Array.isArray(val) && val.length > 0 ? val : def;\n      }),\n          line_height = this.supplement(Default.ruler.top.height, _opts.ruler[position].height),\n          font_size = this.supplement(Default.ruler.top.fontSize, _opts.ruler[position].fontSize),\n          text_color = this.supplement(Default.ruler.top.color, _opts.ruler[position].color),\n          background = this.supplement(Default.ruler.top.background, _opts.ruler[position].background),\n          locale = this.supplement(Default.ruler.top.locale, _opts.ruler[position].locale),\n          format = this.supplement(Default.ruler.top.format, _opts.ruler[position].format),\n          ruler_opts = {\n        lines: ruler_line,\n        height: line_height,\n        fontSize: font_size,\n        color: text_color,\n        background: background,\n        locale: locale,\n        format: format\n      },\n          _fullwidth = _props.fullwidth - 1,\n          _fullheight = ruler_line.length * line_height,\n          _ruler = $('<div></div>', {\n        class: \"\".concat(PREFIX, \"ruler-\").concat(position),\n        style: \"height:\".concat(_fullheight, \"px;\")\n      }),\n          _ruler_bg = $(\"<canvas class=\\\"\".concat(PREFIX, \"ruler-bg-\").concat(position, \"\\\" width=\\\"\").concat(_fullwidth, \"\\\" height=\\\"\").concat(_fullheight, \"\\\"></canvas>\")),\n          _ruler_body = $('<div></div>', {\n        class: \"\".concat(PREFIX, \"ruler-content-\").concat(position)\n      }),\n          _finalLines = 0,\n          ctx_ruler = _ruler_bg[0].getContext('2d'); //console.log( grids, size_per_grid, scale, begin, min_scale, ruler, position, ruler_line, line_height, ctx_ruler.canvas.width, ctx_ruler.canvas.height )\n      // Draw background of ruler\n\n\n      ctx_ruler.fillStyle = background;\n      ctx_ruler.fillRect(0, 0, ctx_ruler.canvas.width, ctx_ruler.canvas.height); // Draw stroke of ruler\n\n      ctx_ruler.strokeStyle = 'rgba( 51, 51, 51, 0.1 )';\n      ctx_ruler.lineWidth = 1;\n      ctx_ruler.filter = 'url(#crisp)';\n      ruler_line.some(function (line_scale, idx) {\n        if (/^(quarter|half)-?(|hour)$/i.test(line_scale)) {\n          return true; // break\n        }\n\n        ctx_ruler.beginPath(); // Draw rows\n        //let _line_x = position === 'top' ? 0 : ctx_ruler.canvas.width,\n\n        var _line_y = position === 'top' ? line_height * (idx + 1) - 0.5 : line_height * idx + 0.5;\n\n        ctx_ruler.moveTo(0, _line_y);\n        ctx_ruler.lineTo(ctx_ruler.canvas.width, _line_y); // Draw cols\n\n        var _line_grids = null,\n            _grid_x = 0,\n            _correction = -1.5;\n\n        if (/^(year|month)s?$/i.test(_opts.scale)) {\n          // For scales where the value of quantity per unit is variable length (:> 単位あたりの量の値が可変長であるスケールの場合\n          _line_grids = _this5._filterVariableScale(line_scale);\n\n          var _arr3 = Object.keys(_line_grids);\n\n          for (var _i5 = 0; _i5 < _arr3.length; _i5++) {\n            var _key = _arr3[_i5];\n            _grid_x += _this5.numRound(_line_grids[_key], 2);\n            ctx_ruler.moveTo(_grid_x + _correction, position === 'top' ? _line_y - line_height : _line_y);\n            ctx_ruler.lineTo(_grid_x + _correction, position === 'top' ? _line_y : _line_y + line_height);\n          }\n        } else {\n          // In case of fixed length scale (:> 固定長スケールの場合\n          _line_grids = _this5._getGridsPerScale(line_scale);\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = _line_grids[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var _val = _step.value;\n\n              if (_this5.is_empty(_val) || _val >= _props.grids) {\n                break;\n              }\n\n              var _grid_width = _val * _props.scaleSize;\n\n              _grid_x += _grid_width;\n\n              if (Math.ceil(_grid_x) - _correction >= ctx_ruler.canvas.width) {\n                break;\n              }\n\n              ctx_ruler.moveTo(_grid_x + _correction, position === 'top' ? _line_y - line_height : _line_y);\n              ctx_ruler.lineTo(_grid_x + _correction, position === 'top' ? _line_y : _line_y + line_height);\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n\n        ctx_ruler.closePath();\n        ctx_ruler.stroke();\n\n        _ruler_body.append(_this5._createRulerContent(_line_grids, line_scale, ruler_opts));\n\n        _finalLines++;\n      });\n\n      if (ruler_line.length != _finalLines) {\n        _ruler.css('height', \"\".concat(_finalLines * line_height, \"px\"));\n      }\n\n      return _ruler.append(_ruler_bg).append(_ruler_body);\n    }\n    /*\r\n     * @private: Filter to aggregate the grid width of the variable length scale (:> 可変長スケールのグリッド幅を集約するフィルタ\r\n     */\n\n  }, {\n    key: \"_filterVariableScale\",\n    value: function _filterVariableScale(target_scale) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _bc = /^years?$/i.test(_opts.scale) ? 365 : 30,\n          scales = _props.variableScale,\n          retObj = {};\n\n      var _arr4 = Object.keys(scales);\n\n      for (var _i6 = 0; _i6 < _arr4.length; _i6++) {\n        var _dt = _arr4[_i6];\n\n        var _days = scales[_dt],\n            grid_size = this.numRound(_days * _props.scaleSize / _bc, 2),\n            _newKey = null,\n            _arr = void 0,\n            _temp = void 0; //console.log( '!_filterVariableScale:', _dt, this.getCorrectDatetime( _dt ).getFullYear(), _days )\n\n\n        switch (true) {\n          case /^millenniums?|millennia$/i.test(target_scale):\n            _newKey = Math.ceil(this.getCorrectDatetime(_dt).getFullYear() / 1000);\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^century$/i.test(target_scale):\n            _newKey = Math.ceil(this.getCorrectDatetime(_dt).getFullYear() / 100);\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^dec(ade|ennium)$/i.test(target_scale):\n            _newKey = Math.ceil(this.getCorrectDatetime(_dt).getFullYear() / 10);\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^lustrum$/i.test(target_scale):\n            _newKey = Math.ceil(this.getCorrectDatetime(_dt).getFullYear() / 5);\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^years?$/i.test(target_scale):\n            _newKey = \"\".concat(this.getCorrectDatetime(_dt).getFullYear());\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^months?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1)] = grid_size;\n            break;\n\n          case /^weeks?$/i.test(target_scale):\n            _arr = _dt.split(',');\n            _temp = this.getWeek(_arr[0]);\n            retObj[\"\".concat(this.getCorrectDatetime(_arr[0]).getFullYear(), \",\").concat(_temp)] = grid_size;\n            break;\n\n          case /^weekdays?$/i.test(target_scale):\n            _arr = _dt.split(',');\n            _temp = this.getCorrectDatetime(_arr[0]).getDay();\n            retObj[\"\".concat(this.getCorrectDatetime(_arr[0]).getFullYear(), \"/\").concat(this.getCorrectDatetime(_arr[0]).getMonth() + 1, \"/1,\").concat(_temp)] = grid_size;\n            break;\n\n          case /^days?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1, \"/1\")] = grid_size;\n            break;\n\n          case /^hours?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1, \"/1 0\")] = grid_size;\n            break;\n\n          case /^minutes?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1, \"/1 0:00\")] = grid_size;\n            break;\n\n          case /^seconds?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1, \"/1 0:00:00\")] = grid_size;\n            break;\n\n          default:\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1)] = grid_size;\n            break;\n        }\n      }\n\n      return retObj;\n    }\n    /*\r\n     * @private: Get the grid number per scale (for fixed length scale) (:> スケールごとのグリッド数を取得する（固定長スケール用）\r\n     */\n\n  }, {\n    key: \"_getGridsPerScale\",\n    value: function _getGridsPerScale(target_scale) {\n      //let _opts        = this._config,\n      var _props = this._instanceProps,\n          _scopes = [],\n          _scale_grids = {},\n          _sep = '/';\n\n      for (var i = 0; i < _props.grids; i++) {\n        var _tmp = new Date(_props.begin + i * _props.scale),\n            //let _tmp = this.getCorrectDatetime( _props.begin + ( i * _props.scale ) ),\n        _y = _tmp.getFullYear(),\n            _mil = Math.ceil(_y / 1000),\n            _cen = Math.ceil(_y / 100),\n            _dec = Math.ceil(_y / 10),\n            _lus = Math.ceil(_y / 5),\n            _m = _tmp.getMonth() + 1,\n            _wd = _tmp.getDay(),\n            // 0 = Sun, ... 6 = Sat\n        _d = _tmp.getDate(),\n            _w = this.getWeek(\"\".concat(_y, \"/\").concat(_m, \"/\").concat(_d)),\n            _h = _tmp.getHours(),\n            _min = _tmp.getMinutes(),\n            _s = _tmp.getSeconds(); //console.log( '!!:', _tmp, `y: ${_y}`, `mil: ${_mil}`, `cen: ${_cen}`, `dec: ${_dec}`, `lus: ${_lus}` )\n\n\n        _scopes.push({\n          millennium: _mil,\n          century: _cen,\n          decade: _dec,\n          lustrum: _lus,\n          year: _y,\n          month: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep, \"1\"),\n          week: \"\".concat(_y, \",\").concat(_w),\n          weekday: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d, \",\").concat(_wd),\n          day: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d),\n          hour: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d, \" \").concat(_h),\n          minute: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d, \" \").concat(_h, \":\").concat(_min),\n          second: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d, \" \").concat(_h, \":\").concat(_min, \":\").concat(_s),\n          datetime: _tmp.toString()\n        });\n      }\n\n      _scopes.forEach(function (_scope) {\n        //console.log( _scope[target_scale], idx );\n        if (!_scale_grids[_scope[target_scale]]) {\n          _scale_grids[_scope[target_scale]] = 1;\n        } else {\n          _scale_grids[_scope[target_scale]]++;\n        }\n      }); //console.log( '!_getGridsPerScale:', target_scale, _scale_grids )\n\n\n      return this.toIterableObject(_scale_grids);\n    }\n    /*\r\n     * @private: Create the content of ruler of the timeline (:> タイムラインの目盛本文を作成する\r\n     */\n\n  }, {\n    key: \"_createRulerContent\",\n    value: function _createRulerContent(_line_grids, line_scale, ruler) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          line_height = this.supplement(Default.ruler.top.height, ruler.height),\n          font_size = this.supplement(Default.ruler.top.fontSize, ruler.fontSize),\n          text_color = this.supplement(Default.ruler.top.color, ruler.color),\n          locale = this.supplement(Default.ruler.top.locale, ruler.locale, this.validateString),\n          format = this.supplement(Default.ruler.top.format, ruler.format, this.validateObject),\n          _ruler_lines = $('<div></div>', {\n        class: ClassName.TIMELINE_RULER_LINES,\n        style: \"width:100%;height:\".concat(line_height, \"px;\")\n      });\n\n      var _arr5 = Object.keys(_line_grids);\n\n      for (var _i7 = 0; _i7 < _arr5.length; _i7++) {\n        var _key = _arr5[_i7];\n\n        var _item_width = /^(year|month)s?$/i.test(_opts.scale) ? _line_grids[_key] : _line_grids[_key] * _props.scaleSize,\n            _line = $('<div></div>', {\n          class: ClassName.TIMELINE_RULER_ITEM,\n          style: \"width:\".concat(_item_width, \"px;height:\").concat(line_height, \"px;line-height:\").concat(line_height, \"px;font-size:\").concat(font_size, \"px;color:\").concat(text_color, \";\")\n        }),\n            _ruler_string = this.getLocaleString(_key, line_scale, locale, format),\n            _data_ruler_item = ''; //console.log( '!_createRulerContent:', _key, _line_grids[_key], line_scale, locale, format, _item_width, _ruler_string )\n\n\n        _data_ruler_item = \"\".concat(line_scale, \"-\").concat(_data_ruler_item === '' ? String(_key) : _data_ruler_item);\n\n        _line.attr('data-ruler-item', _data_ruler_item).html(_ruler_string);\n\n        if (_item_width > this.strWidth(_ruler_string)) {\n          // Adjust position of ruler item string\n          //console.log( _item_width, _ruler_string, _ruler_string.length, this.strWidth( _ruler_string ), $(this._element).width() )\n          if (_item_width > $(this._element).width()) {\n            _line.addClass(ClassName.RULER_ITEM_ALIGN_LEFT);\n          }\n        }\n\n        _ruler_lines.append(_line).attr('data-ruler-scope', line_scale);\n      }\n\n      return _ruler_lines;\n    }\n    /*\r\n     * @private: Create the side indexes of the timeline (:> タイムラインのサイド・インデックスを作成する\r\n     */\n\n  }, {\n    key: \"_createSideIndex\",\n    value: function _createSideIndex(margin) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _sticky = this.supplement(Default.sidebar.sticky, _opts.sidebar.sticky),\n          _overlay = this.supplement(Default.sidebar.overlay, _opts.sidebar.overlay),\n          _sbList = this.supplement(Default.sidebar.list, _opts.sidebar.list),\n          _wrapper = $('<div></div>', {\n        class: ClassName.TIMELINE_SIDEBAR\n      }),\n          _margin = $('<div></div>', {\n        class: ClassName.TIMELINE_SIDEBAR_MARGIN\n      }),\n          _list = $('<div></div>', {\n        class: ClassName.TIMELINE_SIDEBAR_ITEM\n      }),\n          _c = 0.5;\n\n      if (_sticky) {\n        _wrapper.addClass(ClassName.STICKY_LEFT);\n      }\n\n      if (_overlay) {\n        _list.addClass(ClassName.OVERLAY);\n      } //_wrapper.css( 'margin-top', margin.top + 'px' ).css( 'margin-bottom', margin.bottom + 'px' )\n\n\n      if (margin.top > 0) {\n        _wrapper.prepend(_margin.clone().css('height', \"\".concat(margin.top + 1, \"px\")));\n      }\n\n      for (var i = 0; i < _props.rows; i++) {\n        var _item = _list.clone().html(_sbList[i]);\n\n        _wrapper.append(_item);\n      }\n\n      _wrapper.find(Selector.TIMELINE_SIDEBAR_ITEM).css('height', \"\".concat(_props.rowSize + _c, \"px\")).css('line-height', \"\".concat(_props.rowSize + _c, \"px\"));\n\n      if (margin.bottom > 0) {\n        _wrapper.append(_margin.clone().css('height', \"\".concat(margin.bottom + 1, \"px\")));\n      }\n\n      return _wrapper;\n    }\n    /*\r\n     * @private: Create the footer of the timeline (:> タイムラインのフッターを作成する\r\n     */\n\n  }, {\n    key: \"_createFooter\",\n    value: function _createFooter() {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _display = this.supplement(Default.footer.display, _opts.footer.display),\n          _content = this.supplement(null, _opts.footer.content),\n          _range = this.supplement(Default.footer.range, _opts.footer.range),\n          _scale = this.supplement(Default.footer.scale, _opts.footer.scale),\n          _locale = this.supplement(Default.footer.locale, _opts.footer.locale),\n          _format = this.supplement(Default.footer.format, _opts.footer.format),\n          _begin = this.supplement(null, _props.begin),\n          _end = this.supplement(null, _props.end),\n          _tl_footer = $('<div></div>', {\n        class: ClassName.TIMELINE_FOOTER\n      });\n\n      if (_range) {\n        if (_begin && _end) {\n          var _meta = \"\".concat(new Date(_begin).toLocaleString(_locale, _format), \"<span class=\\\"\").concat(ClassName.RANGE_SPAN, \"\\\"></span>\").concat(new Date(_end).toLocaleString(_locale, _format)); //let _meta = this.getCorrectDatetime( _begin ).toLocaleString( _locale, _format ) +'<span class=\"jqtl-range-span\"></span>'+ this.getCorrectDatetime( _end ).toLocaleString( _locale, _format )\n\n\n          _tl_footer.append(\"<div class=\\\"\".concat(ClassName.RANGE_META, \" \").concat(ClassName.ALIGN_SELF_RIGHT, \"\\\">\").concat(_meta, \"</div>\"));\n        }\n      }\n\n      if (_content) {\n        _tl_footer.append(\"<div class=\\\"\".concat(ClassName.TIMELINE_FOOTER_CONTENT, \"\\\">\").concat(_content, \"</div>\"));\n      }\n\n      if (!_display) {\n        _tl_footer.addClass(ClassName.HIDE);\n      }\n\n      return _tl_footer;\n    }\n    /*\r\n     * @private: Acquire the difference between two dates with the specified scale value (:> 2つの日付の差分を指定したスケール値で取得する\r\n     */\n\n  }, {\n    key: \"_diffDate\",\n    value: function _diffDate(date1, date2) {\n      var scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'millisecond';\n      var absval = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      //let _opts  = this._config,\n      var _dt1 = this.supplement(null, date1),\n          _dt2 = this.supplement(null, date2),\n          diffMS = 0,\n          retval = false,\n          lastDayOfMonth = function lastDayOfMonth(dateObj) {\n        var _tmp = new Date(dateObj.getFullYear(), dateObj.getMonth() + 1, 1);\n\n        _tmp.setTime(_tmp.getTime() - 1);\n\n        return _tmp.getDate();\n      },\n          isLeapYear = function isLeapYear(dateObj) {\n        var _tmp = new Date(dateObj.getFullYear(), 0, 1),\n            sum = 0;\n\n        for (var i = 0; i < 12; i++) {\n          _tmp.setMonth(i);\n\n          sum += lastDayOfMonth(_tmp);\n        }\n\n        return sum == 365 ? false : true;\n      };\n\n      if (!_dt1 || !_dt2) {\n        console.warn('Cannot parse date because invalid format or undefined.');\n        return false;\n      }\n\n      diffMS = _dt2 - _dt1;\n\n      if (absval) {\n        diffMS = Math.abs(diffMS);\n      }\n\n      var _bd = new Date(_dt1),\n          _ed = new Date(_dt2),\n          _dy = _ed.getFullYear() - _bd.getFullYear(),\n          _m = {};\n\n      switch (true) {\n        case /^years?$/i.test(scale):\n          if (_dy > 0) {\n            for (var i = 0; i <= _dy; i++) {\n              var _cd = new Date(_bd.getFullYear() + i, 0, 1);\n\n              _m[\"\".concat(_bd.getFullYear() + i)] = isLeapYear(_cd) ? 366 : 365;\n            }\n          } else {\n            _m[\"\".concat(_bd.getFullYear())] = isLeapYear(_bd) ? 366 : 365;\n          }\n\n          retval = _m;\n          break;\n\n        case /^months?$/i.test(scale):\n          if (_dy > 0) {\n            for (var _i8 = _bd.getMonth(); _i8 < 12; _i8++) {\n              var _cd2 = new Date(_bd.getFullYear(), _i8, 1);\n\n              _m[\"\".concat(_bd.getFullYear(), \"/\").concat(_i8 + 1)] = lastDayOfMonth(_cd2);\n            }\n\n            if (_dy > 1) {\n              for (var y = 1; y < _dy; y++) {\n                for (var _i9 = 0; _i9 < 12; _i9++) {\n                  var _cd3 = new Date(_bd.getFullYear() + y, _i9, 1);\n\n                  _m[\"\".concat(_bd.getFullYear() + y, \"/\").concat(_i9 + 1)] = lastDayOfMonth(_cd3);\n                }\n              }\n            }\n\n            for (var _i10 = 0; _i10 <= _ed.getMonth(); _i10++) {\n              var _cd4 = new Date(_ed.getFullYear(), _i10, 1);\n\n              _m[\"\".concat(_ed.getFullYear(), \"/\").concat(_i10 + 1)] = lastDayOfMonth(_cd4);\n            }\n          } else {\n            for (var _i11 = _bd.getMonth(); _i11 <= _ed.getMonth(); _i11++) {\n              var _cd5 = new Date(_bd.getFullYear(), _i11, 1);\n\n              _m[\"\".concat(_bd.getFullYear(), \"/\").concat(_i11 + 1)] = lastDayOfMonth(_cd5);\n            }\n          }\n\n          retval = _m;\n          break;\n\n        case /^weeks?$/i.test(scale):\n          retval = Math.ceil(diffMS / (7 * 24 * 60 * 60 * 1000));\n          break;\n\n        case /^(|week)days?$/i.test(scale):\n          retval = Math.ceil(diffMS / (24 * 60 * 60 * 1000));\n          break;\n\n        case /^hours?$/i.test(scale):\n          retval = Math.ceil(diffMS / (60 * 60 * 1000));\n          break;\n\n        case /^minutes?$/i.test(scale):\n          retval = Math.ceil(diffMS / (60 * 1000));\n          break;\n\n        case /^seconds?$/i.test(scale):\n          retval = Math.ceil(diffMS / 1000);\n          break;\n\n        default:\n          retval = diffMS;\n          break;\n      } //console.log( '!_diffDate:', retval )\n\n\n      return retval;\n    }\n    /*\r\n     * @private: Load all enabled events markupped on target element to the timeline object (:> 対象要素にマークアップされたすべての有効なイベントをタイムラインにロードする\r\n     */\n\n  }, {\n    key: \"_loadEvent\",\n    value: function _loadEvent() {\n      this._debug('_loadEvent');\n\n      var _that = this,\n          _elem = this._element,\n          _event_list = $(_elem).find(Selector.DEFAULT_EVENTS),\n          _cnt = 0,\n          events = [],\n          lastEventId = 0;\n\n      _event_list.children().each(function () {\n        var _attr = $(this).attr('data-timeline-node');\n\n        if (typeof _attr !== 'undefined' && _attr !== false) {\n          _cnt++;\n        }\n      });\n\n      if (_event_list.length == 0 || _cnt == 0) {\n        this._debug('Enable event does not exist.');\n      } // Register Event Data\n\n\n      _event_list.children().each(function () {\n        var _evt_params = _that._getPluggableParams($(this).attr('data-timeline-node')),\n            _one_event = {};\n\n        if (!_that.is_empty(_evt_params)) {\n          _one_event = _that._registerEventData(this, _evt_params);\n          events.push(_one_event);\n          lastEventId = Math.max(lastEventId, parseInt(_one_event.eventId, 10));\n        }\n      }); // Set event id with auto increment (:> イベントIDを自動採番\n\n\n      var cacheIds = []; // for checking duplication of id (:> IDの重複チェック用\n\n      events.forEach(function (_evt, _i, _this) {\n        var _chkId = parseInt(_this[_i].eventId, 10);\n\n        if (_chkId == 0 || cacheIds.includes(_chkId)) {\n          lastEventId++;\n          _this[_i].eventId = lastEventId;\n        } else {\n          _this[_i].eventId = _chkId;\n        }\n\n        cacheIds.push(_this[_i].eventId);\n      });\n      this._isCached = this._saveToCache(events);\n    }\n    /*\r\n     * @private: Register one event data as object (:> イベントデータをオブジェクトとして登録する\r\n     */\n\n  }, {\n    key: \"_registerEventData\",\n    value: function _registerEventData(event_element, params) {\n      var _this6 = this;\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          new_event = _objectSpread({}, EventParams, {\n        uid: this.generateUniqueID(),\n        label: $(event_element).html()\n      }),\n          _relation = {},\n          _x,\n          _w,\n          _c; //, _pointSize\n      //console.log( '!_registerEventData:', _opts, params )\n\n\n      if (params.hasOwnProperty('start') && !this.is_empty(params.start)) {\n        _x = this._getCoordinateX(params.start);\n        new_event.x = this.numRound(_x, 2);\n\n        if (params.hasOwnProperty('end') && !this.is_empty(params.end)) {\n          _x = this._getCoordinateX(params.end);\n          _w = _x - new_event.x;\n          new_event.width = this.numRound(_w, 2);\n\n          if (_opts.eventMeta.display) {\n            if (this.is_empty(_opts.eventMeta.content) && !params.hasOwnProperty('rangeMeta')) {\n              //console.log( '!_registerEventData:', _opts.eventMeta.locale, _opts.eventMeta.format, _opts.scale, params )\n              new_event.rangeMeta += this.getLocaleString(params.start, _opts.eventMeta.scale, _opts.eventMeta.locale, _opts.eventMeta.format);\n              new_event.rangeMeta += \" - \".concat(this.getLocaleString(params.end, _opts.eventMeta.scale, _opts.eventMeta.locale, _opts.eventMeta.format));\n            } else {\n              new_event.rangeMeta = _opts.eventMeta.content;\n            }\n          }\n        } else {\n          new_event.width = 0;\n        } //console.log( 'getX:', _x, 'getW:', _w, event_element )\n\n\n        if (params.hasOwnProperty('row')) {\n          _c = Math.floor(params.row / 2);\n          new_event.y = (params.row - 1) * _opts.rowHeight + new_event.margin + _c;\n        }\n\n        Object.keys(new_event).forEach(function (_prop) {\n          switch (true) {\n            case /^eventId$/i.test(_prop):\n              if (params.hasOwnProperty('id') && _this6.is_empty(new_event.eventId)) {\n                new_event.eventId = parseInt(params.id, 10);\n              } else {\n                new_event.eventId = parseInt(params[_prop], 10) || 0;\n              }\n\n              break;\n\n            case /^(label|content)$/i.test(_prop):\n              if (params.hasOwnProperty(_prop) && !_this6.is_empty(params[_prop])) {\n                new_event[_prop] = params[_prop];\n              } // Override the children element to label or content setting\n\n\n              if ($(event_element).children(\".event-\".concat(_prop)).length > 0) {\n                new_event[_prop] = $(event_element).children(\".event-\".concat(_prop)).html();\n              } //console.log( '!_registerEventData:', _prop, params[_prop], new_event[_prop] )\n\n\n              break;\n\n            case /^relation$/i.test(_prop):\n              // For drawing the relation line\n              if (/^point(|er)$/i.test(_opts.type)) {\n                //let _pointSize  = this._getPointerSize( new_event.size, new_event.margin )\n                _relation.x = _this6.numRound(new_event.x, 2);\n                _relation.y = _this6.numRound(_props.rowSize * ((params.row || 1) - 1) + _props.rowSize / 2, 2); //console.log( '!_registerEventData:', params, new_event.x, new_event.y, _pointSize, _relation )\n\n                new_event[_prop] = _objectSpread({}, params[_prop], _relation);\n              }\n\n              break;\n\n            default:\n              if (params.hasOwnProperty(_prop) && !_this6.is_empty(params[_prop])) {\n                new_event[_prop] = params[_prop];\n              }\n\n              break;\n          }\n        });\n      } //console.log( '!_registerEventData:', new_event )\n\n\n      return new_event;\n    }\n    /*\r\n     * @private: Get the coordinate X on the timeline of any date (:> 任意の日付のタイムライン上のX座標（横軸座標）を取得する\r\n     */\n\n  }, {\n    key: \"_getCoordinateX\",\n    value: function _getCoordinateX(date) {\n      //let _opts  = this._config,\n      var _props = this._instanceProps,\n          _date = this.supplement(null, this._getPluggableDatetime(date)),\n          coordinate_x = 0;\n\n      if (_date) {\n        if (_date - _props.begin >= 0 && _props.end - _date >= 0) {\n          // When the given date is within the range of timeline begin and end (:> 指定された日付がタイムラインの開始と終了の範囲内にある場合\n          coordinate_x = Math.abs(_date - _props.begin) / _props.scale * _props.scaleSize;\n        } else {\n          // When the given date is out of timeline range (:> 指定された日付がタイムラインの範囲外にある場合\n          coordinate_x = (_date - _props.begin) / _props.scale * _props.scaleSize;\n        }\n      } else {\n        console.warn('Cannot parse date because invalid format or undefined.');\n      }\n\n      return coordinate_x;\n    }\n    /*\r\n     * @private: Cache the event data to the web storage (:> イベントデータをWEBストレージへキャッシュ\r\n     */\n\n  }, {\n    key: \"_saveToCache\",\n    value: function _saveToCache(data) {\n      var strageEngine = /^local(|Storage)$/i.test(this._config.storage) ? 'localStorage' : 'sessionStorage',\n          is_available = strageEngine in window && (strageEngine === 'localStorage' ? window.localStorage : window.sessionStorage) !== null;\n\n      if (is_available) {\n        if (strageEngine === 'localStorage') {\n          localStorage.setItem(this._selector, JSON.stringify(data));\n        } else {\n          sessionStorage.setItem(this._selector, JSON.stringify(data));\n        }\n\n        return true;\n      } else {\n        throw new TypeError(\"The storage named \\\"\".concat(strageEngine, \"\\\" can not be available.\"));\n      }\n    }\n    /*\r\n     * @private: Load the cached event data from the web storage (:> キャッシュされたイベントデータをWEBストレージから読み込む\r\n     */\n\n  }, {\n    key: \"_loadToCache\",\n    value: function _loadToCache() {\n      var strageEngine = /^local(|Storage)$/i.test(this._config.storage) ? 'localStorage' : 'sessionStorage',\n          is_available = strageEngine in window && (strageEngine === 'localStorage' ? window.localStorage : window.sessionStorage) !== null,\n          data = null;\n\n      if (is_available) {\n        if (strageEngine === 'localStorage') {\n          data = JSON.parse(localStorage.getItem(this._selector));\n        } else {\n          data = JSON.parse(sessionStorage.getItem(this._selector));\n        }\n      } else {\n        throw new TypeError(\"The storage named \\\"\".concat(strageEngine, \"\\\" can not be available.\"));\n      }\n\n      return data;\n    }\n    /*\r\n     * @private: Remove the cache data on the web storage (:> WEBストレージ上のキャッシュデータを削除する\r\n     */\n\n  }, {\n    key: \"_removeCache\",\n    value: function _removeCache() {\n      var strageEngine = /^local(|Storage)$/i.test(this._config.storage) ? 'localStorage' : 'sessionStorage',\n          is_available = strageEngine in window && (strageEngine === 'localStorage' ? window.localStorage : window.sessionStorage) !== null;\n\n      if (is_available) {\n        if (strageEngine === 'localStorage') {\n          localStorage.removeItem(this._selector);\n        } else {\n          sessionStorage.removeItem(this._selector);\n        }\n      } else {\n        throw new TypeError(\"The storage named \\\"\".concat(strageEngine, \"\\\" can not be available.\"));\n      }\n    }\n    /*\r\n     * @private: Controller method to place event data on timeline\r\n     */\n\n  }, {\n    key: \"_placeEvent\",\n    value: function _placeEvent() {\n      var _this7 = this;\n\n      this._debug('_placeEvent');\n\n      if (!this._isCached) {\n        return;\n      }\n\n      var _elem = this._element,\n          _opts = this._config,\n          _evt_container = $(_elem).find(Selector.TIMELINE_EVENTS),\n          _relation_lines = $(_elem).find(Selector.TIMELINE_RELATION_LINES),\n          events = this._loadToCache();\n\n      if (events.length > 0) {\n        _evt_container.empty();\n\n        events.forEach(function (_evt) {\n          var _evt_elem = _this7._createEventNode(_evt);\n\n          if (_evt_elem) {\n            _evt_container.append(_evt_elem);\n          }\n        });\n      }\n\n      if (/^point(|er)$/i.test(_opts.type)) {\n        this._drawRelationLine(events);\n      } // console.log( '!_placeEvent:', _opts )\n\n\n      this.sleep(1).then(function () {\n        _this7.hideLoader();\n\n        _evt_container.fadeIn('fast', function () {\n          _relation_lines.fadeIn('fast');\n        });\n      });\n    }\n    /*\r\n     * @private: Create an event element on the timeline (:> タイムライン上にイベント要素を作成する\r\n     */\n\n  }, {\n    key: \"_createEventNode\",\n    value: function _createEventNode(params) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _evt_elem = $('<div></div>', {\n        class: ClassName.TIMELINE_EVENT_NODE,\n        id: \"evt-\".concat(params.eventId),\n        css: {\n          left: \"\".concat(params.x, \"px\"),\n          top: \"\".concat(params.y, \"px\"),\n          width: \"\".concat(params.width, \"px\"),\n          height: \"\".concat(params.height, \"px\"),\n          color: this.hexToRgbA(params.color),\n          backgroundColor: this.hexToRgbA(params.bgColor)\n        },\n        html: \"<div class=\\\"\".concat(ClassName.TIMELINE_EVENT_LABEL, \"\\\">\").concat(params.label, \"</div>\")\n      }); //console.log( '!_createEventNode:', params )\n      // Whether this event is within the display range of the timeline (:> タイムライン表示範囲内のイベントかどうか\n      // For events excluded, set the width to -1 (:> 除外イベントは幅を -1 に設定する\n\n\n      if (params.x >= 0) {\n        // The event start datetime is over the start datetime of the timeline (:> イベント始点がタイムラインの始点以上\n        if (params.x <= _props.fullwidth) {\n          // The event start datetime is less than or equal to the timeline end datetime (:> イベントの始点がタイムラインの終点以下\n          if (params.x + params.width <= _props.fullwidth) {// The event end datetime is less than before the timeline end datetime (regular event) (:> イベント終点がタイムラインの終点以下（通常イベント）\n            // OK\n          } else {\n            // The event end datetime is after the timeline end datetime (event exceeded end datetime) (:> イベント終点がタイムラインの終点より後（終点超過イベント）\n            params.width = _props.fullwidth - params.x;\n          }\n        } else {\n          // The event start datetime is after the timeline end datetime (exclude event) (:> イベント始点がタイムラインの終点より後（除外イベント）\n          params.width = -1;\n        }\n      } else {\n        // The event start datetime is before the timeline start datetime (:> イベント始点がタイムラインの始点より前\n        if (/^point(|er)$/i.test(_opts.type)) {\n          // In the case of \"point\" type, that is an exclude event (:> ポインター型の場合は除外イベント\n          params.width = -1;\n        } else {\n          // The case of \"bar\" type\n          if (params.x + params.width <= 0) {\n            // The event end datetime is less than before the timeline start datetime (exclude event) (:> イベント終点がタイムラインの始点より前（除外イベント）\n            params.width = -1;\n          } else {\n            // The event end datetime is after the timeline start datetime (:> イベント終点がタイムラインの始点より後\n            if (params.x + params.width <= _props.fullwidth) {\n              // The event end datetime is less than or equal the timeline end datetime (event exceeded start datetime) (:> イベント終点がタイムラインの終点以下（始点超過イベント）\n              params.width = Math.abs(params.x + params.width);\n              params.x = 0;\n            } else {\n              // The event end datetime is after the timeline end datetime (event exceeded both start and end datetime) (:> イベント終点がタイムラインの終点より後（始点・終点ともに超過イベント）\n              params.width = _props.fullwidth;\n              params.x = 0;\n            }\n          }\n        }\n      } //console.log( 'x:', params.x, 'w:', params.width, 'x-end:', Math.abs( params.x ) + params.width, 'fw:', _props.fullwidth, 'ps:', params.size )\n\n\n      if (/^point(|er)$/i.test(_opts.type)) {\n        if (params.width < 0) {\n          return null;\n        }\n\n        var _pointSize = this._getPointerSize(params.size, params.margin),\n            _shiftX = this.numRound(params.x - _pointSize / 2, 2),\n            _shiftY = this.numRound(params.y + (params.height - _pointSize) / 2, 2); //console.log( '!_createEventNode:', params, _pointSize, _shiftX, _shiftY )\n\n\n        _evt_elem.addClass(ClassName.VIEWER_EVENT_TYPE_POINTER).css('border-color', params.bdColor).css('left', \"\".concat(_shiftX, \"px\")).css('top', \"\".concat(_shiftY, \"px\")).css('width', \"\".concat(_pointSize, \"px\")).css('height', \"\".concat(_pointSize, \"px\")).attr('data-base-size', _pointSize).attr('data-base-left', _shiftX).attr('data-base-top', _shiftY);\n      } else {\n        if (params.width < 1) {\n          return null;\n        }\n\n        _evt_elem.css('left', \"\".concat(params.x, \"px\")).css('width', \"\".concat(params.width, \"px\"));\n      }\n\n      _evt_elem.attr('data-uid', params.uid);\n\n      if (!this.is_empty(params.image)) {\n        if (/^point(|er)$/i.test(_opts.type)) {\n          _evt_elem.css('background-image', \"url(\".concat(params.image, \")\"));\n        } else {\n          var _imgSize = params.height - params.margin * 2;\n\n          _evt_elem.prepend(\"<img src=\\\"\".concat(params.image, \"\\\" class=\\\"\").concat(ClassName.TIMELINE_EVENT_THUMBNAIL, \"\\\" width=\\\"\").concat(_imgSize, \"\\\" height=\\\"\").concat(_imgSize, \"\\\" />\"));\n        }\n      }\n\n      if (/^bar$/i.test(_opts.type) && _opts.eventMeta.display) {\n        //console.log( '!_createEventNode:', params )\n        params.extend.meta = params.rangeMeta;\n      }\n\n      if (!this.is_empty(params.extend)) {\n        var _arr6 = Object.keys(params.extend);\n\n        for (var _i12 = 0; _i12 < _arr6.length; _i12++) {\n          var _prop = _arr6[_i12];\n\n          _evt_elem.attr(\"data-\".concat(_prop), params.extend[_prop]);\n\n          if (_prop === 'toggle' && ['popover', 'tooltip'].includes(params.extend[_prop])) {\n            // for bootstrap's popover or tooltip\n            _evt_elem.attr('title', params.label);\n\n            if (!params.extend.hasOwnProperty('content')) {\n              _evt_elem.attr('data-content', params.content);\n            }\n          }\n        }\n      }\n\n      if (!this.is_empty(params.callback)) {\n        _evt_elem.attr('data-callback', params.callback);\n      }\n\n      return _evt_elem;\n    }\n    /*\r\n     * @private: Retrieve the diameter size (pixel) of pointer (:> ポインタの直径サイズ（ピクセル値）を取得する\r\n     */\n\n  }, {\n    key: \"_getPointerSize\",\n    value: function _getPointerSize(key, margin) {\n      //let _opts  = this._config,\n      var _props = this._instanceProps,\n          _max = Math.min(_props.scaleSize, _props.rowSize) - margin * 2,\n          _size = null;\n\n      switch (true) {\n        case /^large$/i.test(key):\n          _size = Math.max(this.numRound(_max * 0.8, 1), MIN_POINTER_SIZE);\n          break;\n\n        case /^normal$/i.test(key):\n          _size = Math.max(this.numRound(_max / 2, 1), MIN_POINTER_SIZE);\n          break;\n\n        case /^small$/i.test(key):\n          _size = Math.max(this.numRound(_max / 4, 1), MIN_POINTER_SIZE);\n          break;\n\n        default:\n          _size = Math.max(parseInt(key, 10), MIN_POINTER_SIZE);\n      } //console.log( '!_getPointerSize:', _props, key, _max, _size )\n\n\n      return _size;\n    }\n    /*\r\n     * @private: Draw the relation lines (:> 連結線を描画する\r\n     */\n\n  }, {\n    key: \"_drawRelationLine\",\n    value: function _drawRelationLine(events) {\n      var _this8 = this;\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _canvas = $(this._element).find(Selector.TIMELINE_RELATION_LINES),\n          ctx_relations = _canvas[0].getContext('2d'),\n          drawLine = function drawLine(_sx, _sy, _ex, _ey, evt, _ba) {\n        var _curveType = {},\n            _radius = _this8.numRound(Math.min(_props.scaleSize, _props.rowSize) / 2, 2),\n            _subRadius = _this8.numRound(_this8._getPointerSize(evt.size, _opts.marginHeight) / 2, 2); // Defaults\n\n\n        ctx_relations.strokeStyle = EventParams.bdColor;\n        ctx_relations.lineWidth = 2.5;\n        ctx_relations.filter = 'url(#crisp)';\n\n        var _arr7 = Object.keys(evt.relation);\n\n        for (var _i13 = 0; _i13 < _arr7.length; _i13++) {\n          var _key = _arr7[_i13];\n\n          switch (true) {\n            case /^(|line)color$/i.test(_key):\n              ctx_relations.strokeStyle = evt.relation[_key];\n              break;\n\n            case /^(|line)size$/i.test(_key):\n              ctx_relations.lineWidth = parseInt(evt.relation[_key], 10) || 2.5;\n              break;\n\n            case /^curve$/i.test(_key):\n              if (/^(r|l)(t|b),?(r|l)?(t|b)?$/i.test(evt.relation[_key])) {\n                var _tmp = evt.relation[_key].split(',');\n\n                if (_tmp.length == 2) {\n                  _curveType.before = _tmp[0];\n                  _curveType.after = _tmp[1];\n                } else {\n                  _curveType[_ba] = _tmp[0];\n                }\n              } else if (typeof evt.relation[_key] === 'boolean' && evt.relation[_key] || typeof evt.relation[_key] === 'number' && Boolean(evt.relation[_key])) {\n                // Automatically set the necessary linearity type (:> 自動線形判定\n                //console.log( _sx, _sy, _ex, _ey, _radius, _ba, _subRadius )\n                if (_ba === 'before') {\n                  // before: targetEvent[ _ex, _ey ] <---- selfEvent[ _sx, _sy ]\n                  if (_sy > _ey) {\n                    // 連結点が自分より上にある\n                    if (_sx > _ex) {\n                      // 連結点が自分より左にある \"(_ex,_ey)└(_sx,_sy)\" as \"lb\"\n                      _curveType[_ba] = 'lb';\n                    } else if (_sx < _ex) {\n                      // 連結点が自分より右にある \"⊂￣\" as \"lb+lt\"\n                      _curveType[_ba] = 'lb+lt';\n                    } else {\n                      // 連結点が自分の直上 \"│\" to top\n                      _curveType[_ba] = null;\n                    }\n                  } else if (_sy < _ey) {\n                    // 連結点が自分より下にある\n                    if (_sx > _ex) {\n                      // 連結点が自分より左にある \"(_ex,_ey)┌(_sx,_sy)\" as \"lt\"\n                      _curveType[_ba] = 'lt';\n                    } else if (_sx < _ex) {\n                      // 連結点が自分より右にある \"⊂_\" as \"rt+rb\"\n                      _curveType[_ba] = 'lt+lb';\n                    } else {\n                      // 連結点が自分の直下 \"│\" to bottom\n                      _curveType[_ba] = null;\n                    }\n                  } else {\n                    // 連結点が自分と同じ水平上にある（左右どちらか） _sy == _ey; \"─\" to left or right\n                    _curveType[_ba] = null;\n                  }\n                } else if (_ba === 'after') {\n                  // after: selfEvent[ _sx, _sy ] ----> targetEvent[ _ex, _ey ]\n                  if (_sy < _ey) {\n                    // Relational endpoint is located \"under\" self (:> 連結点が自分の下にある\n                    if (_sx < _ex) {\n                      // Then relational endpoint is located \"right\" self (:> 連結点が自分の右にある \"(_sx,_sy)┐(_ex,_ey)\" as \"rt\"\n                      _curveType[_ba] = 'rt';\n                    } else if (_sx > _ex) {\n                      // Then relational endpoint is located \"left\" self (:> 連結点が自分より左にある \"_⊃\" as \"rt+rb\"\n                      _curveType[_ba] = 'rt+rb';\n                    } else {\n                      // Relational endpoint is located \"just under\" self (:> 連結点が自分の直下 \"│\" to bottom\n                      _curveType[_ba] = null;\n                    }\n                  } else if (_sy > _ey) {\n                    // Relational endpoint is located \"above\" self (:> 連結点が自分より上にある\n                    if (_sx < _ex) {\n                      // Then relational endpoint is located \"right\" self (:> 連結点が自分の右にある \"┘\" as \"rb\"\n                      _curveType[_ba] = 'rb';\n                    } else if (_sx > _ex) {\n                      // Then relational endpoint is located \"left\" self (:> 連結点が自分より左にある \"￣⊃\" as \"rb+rt\"\n                      _curveType[_ba] = 'rb+rt';\n                    } else {\n                      // Relational endpoint is located \"just under\" self (:> 連結点が自分の直上 \"│\" to top\n                      _curveType[_ba] = null;\n                    }\n                  } else {\n                    // 連結点が自分と同じ水平上にある（左右どちらか） _sy == _ey; \"─\" to left or right\n                    _curveType[_ba] = null;\n                  }\n                }\n              }\n\n              break;\n          }\n        }\n\n        if (Math.abs(_ey - _sy) > _props.rowSize) {\n          _ey += Math.floor(Math.abs(_ey - _sy) / _props.rowSize);\n        }\n\n        ctx_relations.beginPath();\n\n        if (!_this8.is_empty(_curveType)) {\n          // console.log( '!_drawLine:', _curveType, _sx, _sy, _ex, _ey, _radius )\n          switch (true) {\n            case /^lt$/i.test(_curveType[_ba]):\n              // \"(_ex,_ey)┌(_sx,_sy)\"\n              ctx_relations.moveTo(_sx, _sy);\n\n              if (Math.abs(_sx - _ex) > _radius) {\n                ctx_relations.lineTo(_ex - _radius, _sy); // \"─\"\n              }\n\n              if (Math.abs(_ey - _sy) > _radius) {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _sy + _radius); // \"┌\"\n\n                ctx_relations.lineTo(_ex, _ey); // \"│\"\n              } else {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _ey); // \"┌\"\n              }\n\n              break;\n\n            case /^lb$/i.test(_curveType[_ba]):\n              // \"(_ex,_ey)└(_sx,_sy)\"\n              ctx_relations.moveTo(_sx, _sy);\n\n              if (Math.abs(_sx - _ex) > _radius) {\n                ctx_relations.lineTo(_ex + _radius, _sy); // \"─\"\n              }\n\n              if (Math.abs(_sy - _ey) > _radius) {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _sy - _radius); // \"└\"\n\n                ctx_relations.lineTo(_ex, _ey); // \"│\"\n              } else {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _ey); // \"└\"\n              }\n\n              break;\n\n            case /^rt$/i.test(_curveType[_ba]):\n              // \"(_sx,_sy)┐(_ex,_ey)\"\n              ctx_relations.moveTo(_sx, _sy);\n\n              if (Math.abs(_ex - _sx) > _radius) {\n                ctx_relations.lineTo(_ex - _radius, _sy); // \"─\"\n              }\n\n              if (Math.abs(_ey - _sy) > _radius) {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _sy + _radius); // \"┐\"\n\n                ctx_relations.lineTo(_ex, _ey);\n              } else {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _ey); // \"┐\"\n              }\n\n              break;\n\n            case /^rb$/i.test(_curveType[_ba]):\n              // \"(_sx,_sy)┘(_ex,_ey)\"\n              ctx_relations.moveTo(_sx, _sy);\n\n              if (Math.abs(_ex - _sx) > _radius) {\n                ctx_relations.lineTo(_ex - _radius, _sy); // \"─\"\n              }\n\n              if (Math.abs(_sy - _ey) > _radius) {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _sy - _radius); // \"┘\"\n\n                ctx_relations.lineTo(_ex, _ey);\n              } else {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _ey); // \"┘\"\n              }\n\n              break;\n\n            case /^lt\\+lb$/i.test(_curveType[_ba]): // \"⊂＿\"\n\n            case /^lb\\+lt$/i.test(_curveType[_ba]):\n              // \"⊂￣\"\n              ctx_relations.moveTo(_sx, _sy); //ctx_relations.lineTo( _sx - _subRadius, _sy ) // \"─\"\n\n              ctx_relations.lineTo(_sx - _radius, _sy); // \"─\"\n              //ctx_relations.bezierCurveTo( _sx - _subRadius - _radius, _sy, _sx - _subRadius - _radius, _ey, _sx - _subRadius, _ey ) // \"⊂\"\n\n              ctx_relations.bezierCurveTo(_sx - _radius * 2, _sy, _sx - _radius * 2, _ey, _sx - _radius, _ey); // \"⊂\"\n\n              ctx_relations.lineTo(_ex, _ey); // \"─\"\n\n              break;\n\n            case /^rt\\+rb$/i.test(_curveType[_ba]): // \"＿⊃\"\n\n            case /^rb\\+rt$/i.test(_curveType[_ba]):\n              // \"￣⊃\"\n              ctx_relations.moveTo(_sx, _sy); //ctx_relations.lineTo( _sx + _subRadius, _sy ) // \"─\"\n\n              ctx_relations.lineTo(_sx + _radius, _sy); // \"─\"\n              //ctx_relations.bezierCurveTo( _sx + _subRadius + _radius, _sy, _sx + _subRadius + _radius, _ey, _sx + _subRadius, _ey ) // \"⊃\"\n\n              ctx_relations.bezierCurveTo(_sx + _radius * 2, _sy, _sx + _radius * 2, _ey, _sx + _radius, _ey); // \"⊃\"\n\n              ctx_relations.lineTo(_ex, _ey); // \"─\"\n\n              break;\n          }\n        } else {\n          ctx_relations.moveTo(_sx, _sy);\n          ctx_relations.lineTo(_ex, _ey);\n        } //ctx_relations.closePath()\n\n\n        ctx_relations.stroke();\n      };\n\n      ctx_relations.clearRect(0, 0, _canvas[0].width, _canvas[0].height); //console.log( '!_drawRelationLine:', _props, events, _canvas )\n\n      events.forEach(function (evt) {\n        var _rel = evt.relation,\n            _sx,\n            _sy,\n            _ex,\n            _ey,\n            _targetId,\n            _targetEvent;\n\n        if (_rel.hasOwnProperty('before')) {\n          // before: targetEvent[ _ex, _ey ] <---- selfEvent[ _sx, _sy ]\n          // (:> before: 自分を起点（ _sx, _sy ）として左方向の連結点（ _ex, _ey ）へ向かう描画方式\n          _sx = _rel.x;\n          _sy = _rel.y;\n          _targetId = parseInt(_rel.before, 10);\n\n          if (_targetId < 0) {\n            _ex = 0;\n            _ey = _sy;\n          } else {\n            _targetEvent = events.find(function (_evt) {\n              return parseInt(_evt.eventId, 10) == _targetId;\n            });\n\n            if (!_this8.is_empty(_targetEvent) && _targetEvent.relation) {\n              _ex = _targetEvent.relation.x < 0 ? 0 : _targetEvent.relation.x;\n              _ey = _targetEvent.relation.y;\n            }\n          }\n\n          if (_sx >= 0 && _sy >= 0 && _ex >= 0 && _ey >= 0) {\n            drawLine(_sx, _sy, _ex, _ey, evt, 'before');\n          }\n        }\n\n        if (_rel.hasOwnProperty('after')) {\n          // after: selfEvent[ _sx, _sy ] ----> targetEvent[ _ex, _ey ]\n          // (:> after: 自分を起点（ _sx, _sy ）として右方向の連結点（ _ex, _ey ）へ向かう描画方式\n          _sx = _rel.x;\n          _sy = _rel.y;\n          _targetId = parseInt(_rel.after, 10);\n\n          if (_targetId < 0) {\n            _ex = _props.fullwidth;\n            _ey = _sy;\n          } else {\n            _targetEvent = events.find(function (_evt) {\n              return parseInt(_evt.eventId, 10) == _targetId;\n            });\n\n            if (!_this8.is_empty(_targetEvent) && _targetEvent.relation) {\n              _ex = _targetEvent.relation.x > _props.fullwidth ? _props.fullwidth : _targetEvent.relation.x;\n              _ey = _targetEvent.relation.y;\n            }\n          }\n\n          if (_sx >= 0 && _sy >= 0 && _ex >= 0 && _ey >= 0) {\n            drawLine(_sx, _sy, _ex, _ey, evt, 'after');\n          }\n        }\n      });\n    }\n    /*\r\n     * @private: Retrieve the mapping data that placed current events\r\n     */\n\n  }, {\n    key: \"_mapPlacedEvents\",\n    value: function _mapPlacedEvents() {\n      var _that = this,\n          _tl_events = $(this._element).find(Selector.TIMELINE_EVENTS).children(),\n          _cache = this._loadToCache(),\n          _events = [];\n\n      if (!this._isCached || this.is_empty(_cache)) {\n        return _events;\n      }\n\n      _tl_events.each(function () {\n        var _uid = $(this).data('uid'),\n            _data = null;\n\n        if (_cache) {\n          _data = _cache.find(function (_evt) {\n            return _evt.uid === _uid;\n          }) || null;\n        } else {\n          _data = $(this).data();\n        }\n\n        if (!_that.is_empty(_data)) {\n          _events.push(_data);\n        }\n      }); //console.log( '!_mapPlacedEvents:', _events )\n\n\n      return _events;\n    }\n    /*\r\n     * @private: Event when focus or blur\r\n     */\n\n  }, {\n    key: \"_activeEvent\",\n    value: function _activeEvent(event) {\n      // console.log( '!_activeEvent:', event )\n      var _elem = event.target;\n\n      if ('focusin' === event.type) {\n        $(Selector.TIMELINE_EVENT_NODE).removeClass('active');\n        $(_elem).addClass('active');\n      } else if ('focusout' === event.type) {\n        $(_elem).removeClass('active');\n      }\n    }\n    /*\r\n     * @private: Event when hover on the pointer type event\r\n     */\n\n  }, {\n    key: \"_hoverPointer\",\n    value: function _hoverPointer(event) {\n      var _props = this._instanceProps,\n          _elem = event.target,\n          _base = {\n        left: $(_elem).data('baseLeft'),\n        top: $(_elem).data('baseTop'),\n        width: $(_elem).data('baseSize')\n      },\n          _x = _base.left,\n          _y = _base.top,\n          _w = _base.width,\n          _z = 5; //console.log( '!_hoverPointer:', _props )\n\n      if ('mouseenter' === event.type) {\n        _w = Math.max(this.numRound(_w * 1.2, 'ceil'), Math.min(_props.rowSize, _props.scaleSize));\n        _x = this.numRound(_x - (_w - _base.width) / 2, 2);\n        _y = this.numRound(_y - (_w - _base.width) / 2, 2);\n        _z = 9;\n        $(_elem).trigger(Event.FOCUSIN_EVENT);\n      } else {\n        $(_elem).trigger(Event.FOCUSOUT_EVENT);\n      }\n\n      $(_elem).css('left', \"\".concat(_x, \"px\")).css('top', \"\".concat(_y, \"px\")).css('width', \"\".concat(_w, \"px\")).css('height', \"\".concat(_w, \"px\")).css('z-index', _z);\n    }\n    /*\r\n     * @private: Echo the log of plugin for debugging\r\n     */\n\n  }, {\n    key: \"_debug\",\n    value: function _debug(message) {\n      var throwType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Notice';\n\n      if (!this._config.debug) {\n        return;\n      }\n\n      message = this.supplement(null, message);\n\n      if (message) {\n        var _msg = typeof $(this._element).data(DATA_KEY)[message] !== 'undefined' ? \"Called method \\\"\".concat(message, \"\\\".\") : message,\n            _sty = /^Called method \"/.test(_msg) ? 'font-weight:600;color:blue;' : '',\n            _rst = '';\n\n        if (window.console && window.console.log) {\n          if (throwType === 'Notice') {\n            window.console.log('%c%s%c', _sty, _msg, _rst);\n          } else {\n            throw new Error(\"\".concat(_msg));\n          }\n        }\n      }\n    } // Public\n\n    /*\r\n     * @public: This method is able to call only once after completed an initializing of the plugin\r\n     */\n\n  }, {\n    key: \"initialized\",\n    value: function initialized() {\n      var _message = this._isInitialized ? 'Skipped because method \"initialized\" already has been called once' : 'initialized';\n\n      this._debug(_message);\n\n      var _elem = this._element,\n          _opts = this._config,\n          _args = arguments.length <= 0 ? undefined : arguments[0],\n          callback = _args.length > 0 && typeof _args[0] === 'function' ? _args[0] : null,\n          userdata = _args.length > 1 ? _args.slice(1) : null; // console.log( '!initialized:', callback, userdata )\n\n\n      if (callback && !this._isInitialized) {\n        this._debug('Fired your callback function after initializing this plugin.');\n\n        callback(_elem, _opts, userdata);\n      }\n\n      this._isInitialized = true;\n    }\n    /*\r\n     * @public: Destroy the object to which the plugin is applied\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._debug('destroy');\n\n      $.removeData(this._element, DATA_KEY);\n      $(window, document, this._element).off(EVENT_KEY);\n      $(this._element).remove();\n\n      this._removeCache();\n\n      var _arr8 = Object.keys(this);\n\n      for (var _i14 = 0; _i14 < _arr8.length; _i14++) {\n        var _prop = _arr8[_i14];\n        this[_prop] = null;\n        delete this[_prop];\n      }\n    }\n    /*\r\n     * @public: This method has been deprecated since version 2.0.0\r\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      throw new ReferenceError('This method named \"render\" has been deprecated since version 2.0.0');\n    }\n    /*\r\n     * @public: Show hidden timeline\r\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      this._debug('show');\n\n      var _elem = this._element;\n\n      if (!this._isShown) {\n        $(_elem).removeClass(ClassName.HIDE);\n        this._isShown = true;\n      }\n    }\n    /*\r\n     * @public: Hide shown timeline\r\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this._debug('hide');\n\n      var _elem = this._element;\n\n      if (this._isShown) {\n        $(_elem).addClass(ClassName.HIDE);\n        this._isShown = false;\n      }\n    }\n    /*\r\n     * @public: \r\n     */\n\n  }, {\n    key: \"dateback\",\n    value: function dateback() {\n      this._debug('dateback');\n    }\n    /*\r\n     * @public: \r\n     */\n\n  }, {\n    key: \"dateforth\",\n    value: function dateforth() {\n      this._debug('dateforth');\n    }\n    /*\r\n     * @public: Move the display position of the timeline container to the specified position\r\n     */\n\n  }, {\n    key: \"alignment\",\n    value: function alignment() {\n      this._debug('alignment');\n\n      for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _elem = this._element,\n          _tl_container = $(_elem).find(Selector.TIMELINE_CONTAINER),\n          _movX = 0,\n          _args = !this.is_empty(args) ? args[0] : [],\n          position = _args.length > 0 && typeof _args[0] === 'string' ? _args[0] : _opts.rangeAlign,\n          duration = _args.length > 1 && /^(\\d{1,}|fast|normal|slow)$/i.test(_args[1]) ? _args[1] : 0; //console.log( args, _args, position, duration )\n\n\n      if (_props.fullwidth <= _elem.scrollWidth) {\n        return;\n      }\n\n      switch (true) {\n        case /^(left|begin)$/i.test(position):\n          _movX = 0;\n          break;\n\n        case /^center$/i.test(position):\n          _movX = (_tl_container[0].scrollWidth - _elem.scrollWidth) / 2 + 1;\n          break;\n\n        case /^(right|end)$/i.test(position):\n          _movX = _tl_container[0].scrollWidth - _elem.scrollWidth + 1;\n          break;\n\n        case /^latest$/i.test(position):\n          {\n            var events = this._mapPlacedEvents().sort(this.compareValues('x')),\n                lastEvent = events[events.length - 1];\n\n            _movX = !this.is_empty(lastEvent) ? lastEvent.x : 0; // console.log( events, lastEvent, _movX, _elem.scrollWidth / 2 )\n            // Centering\n\n            if (_elem.scrollWidth / 2 < _movX) {\n              _movX -= Math.ceil(_elem.scrollWidth / 2);\n            } else {\n              _movX = 0;\n            } // Focus target event\n\n\n            if (!this.is_empty(lastEvent)) {\n              $(\"\".concat(Selector.TIMELINE_EVENT_NODE, \"[data-uid=\\\"\").concat(lastEvent.uid, \"\\\"]\")).trigger(Event.FOCUSIN_EVENT);\n            }\n\n            break;\n          }\n\n        case /^\\d{1,}$/.test(position):\n          {\n            var _events2 = this._mapPlacedEvents(),\n                targetEvent = {};\n\n            if (_events2.length > 0) {\n              targetEvent = _events2.find(function (evt) {\n                return evt.eventId == parseInt(position, 10);\n              });\n            }\n\n            _movX = !this.is_empty(targetEvent) ? targetEvent.x : 0; // Centering\n\n            if (Math.ceil(_elem.scrollWidth / 2) < _movX) {\n              _movX -= Math.ceil(_elem.scrollWidth / 2);\n            } else {\n              _movX = 0;\n            } // Focus target event\n\n\n            if (!this.is_empty(targetEvent)) {\n              $(\"\".concat(Selector.TIMELINE_EVENT_NODE, \"[data-uid=\\\"\").concat(targetEvent.uid, \"\\\"]\")).trigger(Event.FOCUSIN_EVENT);\n            }\n\n            break;\n          }\n\n        case /^current(|ly)|now$/i.test(position):\n        default:\n          {\n            var _now = new Date().toString(),\n                _nowX = this.numRound(this._getCoordinateX(_now), 2);\n\n            if (_nowX >= 0) {\n              if (_tl_container[0].scrollWidth - _elem.scrollWidth + 1 < _nowX) {\n                _movX = _tl_container[0].scrollWidth - _elem.scrollWidth + 1;\n              } else {\n                _movX = _nowX;\n              }\n            } else {\n              _movX = 0;\n            }\n\n            break;\n          }\n      } //console.log( `!alignment::${position}:`, _props.fullwidth, _props.visibleWidth, _tl_container[0].scrollWidth, _tl_container[0].scrollLeft, _movX )\n\n\n      if (duration === '0') {\n        _tl_container.scrollLeft(_movX);\n      } else {\n        _tl_container.animate({\n          scrollLeft: _movX\n        }, duration);\n      }\n    }\n    /*\r\n     * @public: This method has been deprecated since version 2.0.0\r\n     */\n\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      throw new ReferenceError('This method named \"getOptions\" has been deprecated since version 2.0.0');\n    }\n    /*\r\n     * @public: Add new events to the rendered timeline object\r\n     */\n\n  }, {\n    key: \"addEvent\",\n    value: function addEvent() {\n      var _this9 = this;\n\n      this._debug('addEvent');\n\n      var _args = arguments.length <= 0 ? undefined : arguments[0],\n          events = this.supplement(null, _args[0], this.validateArray),\n          callback = _args.length > 1 && typeof _args[1] === 'function' ? _args[1] : null,\n          userdata = _args.length > 2 ? _args.slice(2) : null,\n          _cacheEvents = this._loadToCache(),\n          lastEventId = 0,\n          add_done = false;\n\n      if (this.is_empty(events) || !this._isCompleted) {\n        return;\n      }\n\n      if (!this.is_empty(_cacheEvents)) {\n        _cacheEvents.sort(this.compareValues('eventId'));\n\n        lastEventId = parseInt(_cacheEvents[_cacheEvents.length - 1].eventId, 10);\n      } //console.log( '!addEvent::before:', _cacheEvents, lastEventId, callback, userdata )\n\n\n      events.forEach(function (evt) {\n        var _one_event = _this9._registerEventData('<div></div>', evt);\n\n        if (!_this9.is_empty(_one_event)) {\n          _one_event.eventId = Math.max(lastEventId + 1, parseInt(_one_event.eventId, 10));\n\n          _cacheEvents.push(_one_event);\n\n          lastEventId = parseInt(_one_event.eventId, 10);\n          add_done = true;\n        }\n      }); //console.log( '!addEvent::after:', _cacheEvents, lastEventId, callback, userdata )\n\n      if (!add_done) {\n        return;\n      }\n\n      this._saveToCache(_cacheEvents);\n\n      this._placeEvent();\n\n      if (callback) {\n        this._debug('Fired your callback function after replacing events.');\n\n        callback(this._element, this._config, userdata);\n      }\n    }\n    /*\r\n     * @public: Remove events from the currently timeline object\r\n     */\n\n  }, {\n    key: \"removeEvent\",\n    value: function removeEvent() {\n      var _this10 = this;\n\n      this._debug('removeEvent');\n\n      var _args = arguments.length <= 0 ? undefined : arguments[0],\n          targets = this.supplement(null, _args[0], this.validateArray),\n          callback = _args.length > 1 && typeof _args[1] === 'function' ? _args[1] : null,\n          userdata = _args.length > 2 ? _args.slice(2) : null,\n          _cacheEvents = this._loadToCache(),\n          condition = {},\n          remove_done = false;\n\n      if (this.is_empty(targets) || !this._isCompleted || this.is_empty(_cacheEvents)) {\n        return;\n      }\n\n      targets.forEach(function (cond) {\n        switch (true) {\n          case /^\\d{1,}$/.test(cond):\n            // By matching event ID\n            condition.type = 'eventId';\n            condition.value = parseInt(cond, 10);\n            break;\n\n          case /^(|\\d{1,}(-|\\/)\\d{1,2}(-|\\/)\\d{1,2}(|\\s\\d{1,2}:\\d{1,2}(|:\\d{1,2})))(|,\\d{1,}(-|\\/)\\d{1,2}(-|\\/)\\d{1,2}(|\\s\\d{1,2}:\\d{1,2}(|:\\d{1,2})))$/.test(cond):\n            {\n              // By matching range of datetime\n              var _tmp = cond.split(',');\n\n              condition.type = 'daterange';\n              condition.value = {};\n              condition.value['from'] = _this10.is_empty(_tmp[0]) ? null : new Date(_tmp[0]);\n              condition.value['to'] = _this10.is_empty(_tmp[1]) ? null : new Date(_tmp[1]);\n              break;\n            }\n\n          default:\n            // By matching regex string\n            condition.type = 'regex';\n            condition.value = new RegExp(cond);\n            break;\n        }\n\n        _cacheEvents.forEach(function (evt, _idx) {\n          switch (condition.type) {\n            case 'eventId':\n              if (parseInt(evt.eventId, 10) == condition.value) {\n                //console.log( `!removeEvent::${condition.type}:${condition.value}:`, _cacheEvents[_idx] )\n                _cacheEvents.splice(_idx, 1);\n\n                remove_done = true;\n              }\n\n              break;\n\n            case 'daterange':\n              {\n                //console.log( condition.value )\n                var _fromX = condition.value.from ? Math.ceil(_this10._getCoordinateX(condition.value.from.toString())) : 0,\n                    _toX = condition.value.to ? Math.floor(_this10._getCoordinateX(condition.value.to.toString())) : _fromX;\n\n                if (_fromX <= evt.x && evt.x <= _toX) {\n                  //console.log( `!removeEvent::${condition.type}:${condition.value.from} ~ ${condition.value.to}:`, _fromX, _toX, evt.x )\n                  _cacheEvents.splice(_idx, 1);\n\n                  remove_done = true;\n                }\n\n                break;\n              }\n\n            case 'regex':\n              //console.log( `!removeEvent::${condition.type}:${condition.value}:`, JSON.stringify( evt ) )\n              if (condition.value.test(JSON.stringify(evt))) {\n                _cacheEvents.splice(_idx, 1);\n\n                remove_done = true;\n              }\n\n              break;\n          }\n        });\n      }); //console.log( `!removeEvent::after:`, _cacheEvents )\n\n      if (!remove_done) {\n        return;\n      }\n\n      this._saveToCache(_cacheEvents);\n\n      this._placeEvent();\n\n      if (callback) {\n        this._debug('Fired your callback function after placing additional events.');\n\n        callback(this._element, this._config, userdata);\n      }\n    }\n    /*\r\n     * @public: Update events on the currently timeline object\r\n     */\n\n  }, {\n    key: \"updateEvent\",\n    value: function updateEvent() {\n      var _this11 = this;\n\n      this._debug('updateEvent');\n\n      var _args = arguments.length <= 0 ? undefined : arguments[0],\n          events = this.supplement(null, _args[0], this.validateArray),\n          callback = _args.length > 1 && typeof _args[1] === 'function' ? _args[1] : null,\n          userdata = _args.length > 2 ? _args.slice(2) : null,\n          _cacheEvents = this._loadToCache(),\n          update_done = false;\n\n      if (this.is_empty(events) || !this._isCompleted || this.is_empty(_cacheEvents)) {\n        return;\n      }\n\n      events.forEach(function (evt) {\n        var _upc_event = _this11._registerEventData('<div></div>', evt),\n            // Update Candidate\n        _old_index = null,\n            _old_event = _cacheEvents.find(function (_evt, _idx) {\n          _old_index = _idx;\n          return _evt.eventId == _upc_event.eventId;\n        }),\n            _new_event = {};\n\n        if (!_this11.is_empty(_old_event) && !_this11.is_empty(_upc_event)) {\n          if (_upc_event.hasOwnProperty('uid')) {\n            delete _upc_event.uid;\n          }\n\n          _new_event = Object.assign(_new_event, _old_event, _upc_event); //console.log( _new_event, _old_event, _upc_event, _old_index )\n\n          _cacheEvents[_old_index] = _new_event;\n          update_done = true;\n        }\n      });\n\n      if (!update_done) {\n        return;\n      }\n\n      this._saveToCache(_cacheEvents);\n\n      this._placeEvent();\n\n      if (callback) {\n        this._debug('Fired your callback function after updating events.');\n\n        callback(this._element, this._config, userdata);\n      }\n    }\n    /*\r\n     * @public: Reload the timeline with overridable any options\r\n     */\n\n  }, {\n    key: \"reload\",\n    value: function reload() {\n      var _this12 = this;\n\n      this._debug('reload');\n\n      var _args = arguments.length <= 0 ? undefined : arguments[0],\n          _upc_options = this.supplement(null, _args[0], this.validateObject),\n          callback = _args.length > 1 && typeof _args[1] === 'function' ? _args[1] : null,\n          userdata = _args.length > 2 ? _args.slice(2) : null,\n          _elem = this._element,\n          $default_evt = $(_elem).find(Selector.DEFAULT_EVENTS),\n          _old_options = this._config,\n          _new_options = {};\n\n      if (!this.is_empty(_upc_options)) {\n        // _new_options = Object.assign( _new_options, _old_options, _upc_options )\n        _new_options = this.mergeDeep(_old_options, _upc_options);\n        this._config = _new_options;\n      }\n\n      this._isInitialized = false;\n      this._isCached = false;\n      this._isCompleted = false;\n      this._instanceProps = {};\n      $(_elem).empty().append($default_evt);\n\n      this._calcVars();\n\n      if (!this._verifyMaxRenderableRange()) {\n        throw new RangeError(\"Timeline display period exceeds maximum renderable range.\");\n      }\n\n      if (!this._isInitialized) {\n        this._renderView();\n\n        this._isInitialized = true;\n      }\n\n      if (this._config.reloadCacheKeep) {\n        var _cacheEvents = this._loadToCache(),\n            _renewEvents = [];\n\n        if (!this.is_empty(_cacheEvents)) {\n          _cacheEvents.forEach(function (evt) {\n            delete evt.uid;\n            delete evt.x;\n            delete evt.Y;\n            delete evt.width;\n            delete evt.height;\n            delete evt.relation.x;\n            delete evt.relation.y;\n\n            _renewEvents.push(_this12._registerEventData('<div></div>', evt));\n          });\n        }\n\n        this._isCached = this._saveToCache(_renewEvents);\n      } else {\n        this._loadEvent();\n      }\n\n      this._placeEvent();\n\n      this._isCompleted = true;\n\n      if (callback) {\n        this._debug('Fired your callback function after reloading timeline.');\n\n        callback(this._element, this._config, userdata);\n      }\n    }\n    /*\r\n     * @public: The method that fires when an event on the timeline is clicked (:> タイムライン上のイベントがクリックされた時に発火\r\n     *\r\n     * Note: You can hook the custom processing with the callback specified in the event parameter. (:> イベントパラメータに指定したコールバックでカスタム処理をフックできます\r\n     */\n\n  }, {\n    key: \"openEvent\",\n    value: function openEvent(event) {\n      this._debug('openEvent');\n\n      var _that = this,\n          _self = event.target,\n          $viewer = $(document).find(Selector.EVENT_VIEW),\n          //eventId   = parseInt( $(_self).attr( 'id' ).replace( 'evt-', '' ), 10 ),\n      uid = $(_self).data('uid'),\n          //meta      = this.supplement( null, $(_self).data( 'meta' ) ),\n      callback = this.supplement(null, $(_self).data('callback')); //console.log( '!openEvent:', _self, $viewer, eventId, uid, meta, callback )\n\n\n      if ($viewer.length > 0) {\n        $viewer.each(function () {\n          var _cacheEvents = this._loadToCache(),\n              _eventData = _cacheEvents.find(function (event) {\n            return event.uid === uid;\n          }),\n              _label = $('<div></div>', {\n            class: ClassName.VIEWER_EVENT_TITLE\n          }),\n              _content = $('<div></div>', {\n            class: ClassName.VIEWER_EVENT_CONTENT\n          }),\n              _meta = $('<div></div>', {\n            class: ClassName.VIEWER_EVENT_META\n          }),\n              _image = $('<div></div>', {\n            class: ClassName.VIEWER_EVENT_IMAGE_WRAPPER\n          }); //console.log( '!openEvent:', $(this), $(_self).html(), _eventData.label )\n\n\n          $(this).empty(); // Initialize Viewer\n\n          if (!_that.is_empty(_eventData.image)) {\n            _image.append(\"<img src=\\\"\".concat(_eventData.image, \"\\\" class=\\\"\").concat(ClassName.VIEWER_EVENT_IMAGE, \"\\\" />\"));\n\n            $(this).append(_image);\n          }\n\n          if (!_that.is_empty(_eventData.label)) {\n            _label.html(_eventData.label);\n\n            $(this).append(_label);\n          }\n\n          if (!_that.is_empty(_eventData.content)) {\n            _content.html(_eventData.content);\n\n            $(this).append(_content);\n          }\n\n          if (!_that.is_empty(_eventData.rangeMeta)) {\n            _meta.html(_eventData.rangeMeta);\n\n            $(this).append(_meta);\n          }\n        });\n      }\n\n      if (callback) {\n        this._debug(\"The callback \\\"\".concat(callback, \"\\\" was called by the \\\"openEvent\\\" method.\"));\n\n        try {\n          Function.call(null, \"return \".concat(callback))();\n        } catch (e) {\n          throw new TypeError(e);\n        }\n      }\n    }\n    /*\r\n     * @public: Be zoomed in scale of the timeline that fires when any scales on the ruler is double clicked (:> ルーラー上の任意スケールをダブルクリック時に発火するスケールズームイベント\r\n     */\n\n  }, {\n    key: \"zoomScale\",\n    value: function zoomScale(event) {\n      this._debug('zoomScale');\n\n      var _elem = event.target,\n          ruler_item = $(_elem).data('ruler-item'),\n          scaleMap = {\n        millennium: {\n          years: 1000,\n          lower: 'century',\n          minGrids: 10\n        },\n        century: {\n          years: 100,\n          lower: 'decade',\n          minGrids: 10\n        },\n        decade: {\n          years: 10,\n          lower: 'lustrum',\n          minGrids: 2\n        },\n        lustrum: {\n          years: 5,\n          lower: 'year',\n          minGrids: 5\n        },\n        year: {\n          years: 1,\n          lower: 'month',\n          minGrids: 12\n        },\n        month: {\n          lower: 'day',\n          minGrids: 28\n        },\n        week: {\n          lower: 'day',\n          minGrids: 7\n        },\n        day: {\n          lower: 'hour',\n          minGrids: 24\n        },\n        weekday: {\n          lower: 'hour',\n          minGrids: 24\n        },\n        hour: {\n          lower: 'minute',\n          minGrids: 60\n        },\n        minute: {\n          lower: 'second',\n          minGrids: 60\n        },\n        second: {\n          lower: null,\n          minGrids: 60\n        }\n      },\n          getZoomScale = function getZoomScale(ruler_item) {\n        var _ruler_item$split = ruler_item.split('-'),\n            _ruler_item$split2 = _slicedToArray(_ruler_item$split, 2),\n            scale = _ruler_item$split2[0],\n            date_seed = _ruler_item$split2[1],\n            min_grids = scaleMap[scale].minGrids,\n            begin_date,\n            end_date,\n            base_year,\n            base_month,\n            week_num,\n            base_day,\n            is_remapping,\n            _tmpDate;\n\n        switch (true) {\n          case /^millennium$/i.test(scale):\n          case /^century$/i.test(scale):\n          case /^decade$/i.test(scale):\n          case /^lustrum$/i.test(scale):\n            begin_date = \"\".concat((date_seed - 1) * scaleMap[scale].years + 1, \"/1/1\");\n            _tmpDate = new Date(begin_date, 0, 1).setFullYear(date_seed * scaleMap[scale].years + 1);\n            _tmpDate = new Date(_tmpDate - 1);\n            end_date = \"\".concat(_tmpDate.getFullYear(), \"/\").concat(_tmpDate.getMonth() + 1, \"/\").concat(_tmpDate.getDate(), \" 23:59:59\");\n            break;\n\n          case /^year$/i.test(scale):\n            begin_date = \"\".concat(date_seed, \"/1/1\");\n            _tmpDate = new Date(date_seed, 0, 1).setFullYear(parseInt(date_seed, 10) + 1);\n            _tmpDate = new Date(_tmpDate - 1);\n            end_date = \"\".concat(_tmpDate.getFullYear(), \"/\").concat(_tmpDate.getMonth() + 1, \"/\").concat(_tmpDate.getDate(), \" 23:59:59\");\n            break;\n\n          case /^month$/i.test(scale):\n            var _date_seed$split = date_seed.split('/');\n\n            var _date_seed$split2 = _slicedToArray(_date_seed$split, 2);\n\n            base_year = _date_seed$split2[0];\n            base_month = _date_seed$split2[1];\n            is_remapping = parseInt(base_year, 10) < 100;\n            begin_date = new Date(base_year, parseInt(base_month, 10) - 1, 1);\n\n            if (begin_date.getMonth() == 11) {\n              _tmpDate = new Date(begin_date.getFullYear() + 1, 0, 1).setFullYear(parseInt(base_year, 10) + 1);\n            } else {\n              _tmpDate = new Date(begin_date.getFullYear(), begin_date.getMonth() + 1, 1).setFullYear(parseInt(base_year, 10));\n            }\n\n            begin_date = begin_date.toString();\n            end_date = new Date(_tmpDate - 1).toString();\n            break;\n\n          case /^week$/i.test(scale):\n            var _date_seed$split3 = date_seed.split(',');\n\n            var _date_seed$split4 = _slicedToArray(_date_seed$split3, 2);\n\n            base_year = _date_seed$split4[0];\n            week_num = _date_seed$split4[1];\n            is_remapping = parseInt(base_year, 10) < 100;\n            _tmpDate = new Date(base_year, 0, 1);\n\n            if (is_remapping) {\n              _tmpDate.setFullYear(base_year);\n            }\n\n            begin_date = new Date(_tmpDate.getTime() + week_num * 7 * 24 * 60 * 60 * 1000).toString();\n            end_date = new Date(new Date(begin_date).getTime() + 7 * 24 * 60 * 60 * 1000 - 1).toString();\n            break;\n\n          case /^day$/i.test(scale):\n          case /^weekday$/i.test(scale):\n            if ('weekday' === scale) {\n              var _tmp = date_seed.split(',');\n\n              date_seed = _tmp[0];\n            }\n\n            var _date_seed$split5 = date_seed.split('/');\n\n            var _date_seed$split6 = _slicedToArray(_date_seed$split5, 3);\n\n            base_year = _date_seed$split6[0];\n            base_month = _date_seed$split6[1];\n            base_day = _date_seed$split6[2];\n            is_remapping = parseInt(base_year, 10) < 100;\n            _tmpDate = new Date(base_year, parseInt(base_month, 10) - 1, base_day);\n            begin_date = _tmpDate.toString();\n            end_date = new Date(_tmpDate.getTime() + 24 * 60 * 60 * 1000 - 1).toString(); //console.log( date_seed, base_year, week_num, begin_date, _tmpDate, new Date( _tmpDate ), new Date( _tmpDate - 1 ) )\n\n            break;\n\n          case /^hour$/i.test(scale):\n          case /^minute$/i.test(scale):\n            begin_date = \"\".concat(date_seed, \":00\");\n            end_date = \"\".concat(date_seed, \":59\");\n            break;\n\n          default:\n            begin_date = null;\n            end_date = null;\n            break;\n        }\n\n        scale = scaleMap.hasOwnProperty(scale) ? scaleMap[scale].lower : scale;\n        return [scale, begin_date, end_date, min_grids];\n      },\n          _getZoomScale = getZoomScale(ruler_item),\n          _getZoomScale2 = _slicedToArray(_getZoomScale, 4),\n          to_scale = _getZoomScale2[0],\n          begin_date = _getZoomScale2[1],\n          end_date = _getZoomScale2[2],\n          min_grids = _getZoomScale2[3],\n          zoom_options = {\n        startDatetime: begin_date,\n        endDatetime: end_date,\n        scale: to_scale\n      };\n\n      if (this.is_empty(zoom_options.scale)) {\n        return;\n      }\n\n      if (this._config.wrapScale) {\n        var _wrap = Math.ceil(($(this._element).find(Selector.TIMELINE_CONTAINER).width() - $(this._element).find(Selector.TIMELINE_SIDEBAR).width()) / min_grids),\n            _originMinGridSize;\n\n        if (!this._config.hasOwnProperty('originMinGridSize')) {\n          // Keep an original minGridSize as cache\n          this._config.originMinGridSize = this._config.minGridSize;\n        }\n\n        _originMinGridSize = this._config.originMinGridSize;\n        zoom_options.minGridSize = Math.max(_wrap, _originMinGridSize);\n      } // console.log( ruler_item, zoom_options, this._config.wrapScale, this._config.minGridSize )\n\n\n      this.reload([zoom_options]);\n    }\n    /*\r\n     * @public: Show the loader\r\n     */\n\n  }, {\n    key: \"showLoader\",\n    value: function showLoader() {\n      this._debug('showLoader');\n\n      var _elem = this._element,\n          _opts = this._config,\n          _container = $(_elem).find(Selector.TIMELINE_CONTAINER),\n          width = _container.length > 0 ? _container.width() : $(_elem).width(),\n          height = (_container.length > 0 ? _container.height() : $(_elem).height()) || 120,\n          _loader = $('<div></div>', {\n        id: 'jqtl-loader',\n        style: \"width:\".concat(width, \"px;height:\").concat(height, \"px;\")\n      }); //console.log( '!showLoader:', width, height, _container.length )\n\n\n      if (_opts.loader === false) {\n        return;\n      }\n\n      if ($(_opts.loader).length == 0) {\n        var _loading_text = LOADING_MESSAGE.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\s\\S]|^$/g).filter(Boolean);\n\n        _loading_text.forEach(function (str, idx) {\n          var _fountain_text = $('<div></div>', {\n            id: \"jqtl-loading_\".concat(idx + 1),\n            class: ClassName.LOADER_ITEM\n          }).text(str);\n\n          _loader.append(_fountain_text);\n        });\n      } else {\n        var _custom_loader = $(_opts.loader).clone().prop('hidden', false).css('display', 'block');\n\n        _loader.append(_custom_loader);\n      }\n\n      if ($(_elem).find(Selector.LOADER).length == 0) {\n        if (_container.length > 0) {\n          _container.append(_loader);\n        } else {\n          $(_elem).css('position', 'relative').css('min-height', \"\".concat(height, \"px\")).append(_loader);\n        }\n      }\n    }\n    /*\r\n     * @public:  Hide the loader\r\n     */\n\n  }, {\n    key: \"hideLoader\",\n    value: function hideLoader() {\n      this._debug('hideLoader');\n\n      $(this._element).find(Selector.LOADER).remove();\n    }\n    /* ----------------------------------------------------------------------------------------------------------------\r\n     * Utility Api\r\n     * ----------------------------------------------------------------------------------------------------------------\r\n     */\n\n    /*\r\n     * Determine empty that like PHP\r\n     *\r\n     * @param mixed value (required)\r\n     *\r\n     * @return bool\r\n     */\n\n  }, {\n    key: \"is_empty\",\n    value: function is_empty(value) {\n      if (value == null) {\n        // typeof null -> object : for hack a bug of ECMAScript\n        // Refer: https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/typeof\n        return true;\n      }\n\n      switch (_typeof(value)) {\n        case 'object':\n          if (Array.isArray(value)) {\n            // When object is array:\n            return value.length === 0;\n          } else {\n            // When object is not array:\n            if (Object.keys(value).length > 0 || Object.getOwnPropertySymbols(value).length > 0) {\n              return false;\n            } else if (value.valueOf().length !== undefined) {\n              return value.valueOf().length === 0;\n            } else if (_typeof(value.valueOf()) !== 'object') {\n              return this.is_empty(value.valueOf());\n            } else {\n              return true;\n            }\n          }\n\n        case 'string':\n          return value === '';\n\n        case 'number':\n          return value == 0;\n\n        case 'boolean':\n          return !value;\n\n        case 'undefined':\n        case 'null':\n          return true;\n\n        case 'symbol': // Since ECMAScript6\n\n        case 'function':\n        default:\n          return false;\n      }\n    }\n    /*\r\n     * Determine whether variable is an Object\r\n     *\r\n     * @param mixed item (required)\r\n     *\r\n     * @return bool\r\n     */\n\n  }, {\n    key: \"is_Object\",\n    value: function is_Object(item) {\n      return item && _typeof(item) === 'object' && !Array.isArray(item);\n    }\n    /*\r\n     * Merge two objects deeply as polyfill for instead \"$.extend(true,target,source)\"\r\n     *\r\n     * @param object target (required)\r\n     * @param object source (required)\r\n     *\r\n     * @return object output\r\n     */\n\n  }, {\n    key: \"mergeDeep\",\n    value: function mergeDeep(target, source) {\n      var output = Object.assign({}, target);\n\n      if (this.is_Object(target) && this.is_Object(source)) {\n        var _arr9 = Object.keys(source);\n\n        for (var _i15 = 0; _i15 < _arr9.length; _i15++) {\n          var key = _arr9[_i15];\n\n          if (this.is_Object(source[key])) {\n            if (!(key in target)) {\n              Object.assign(output, _defineProperty({}, key, source[key]));\n            } else {\n              output[key] = this.mergeDeep(target[key], source[key]);\n            }\n          } else {\n            Object.assign(output, _defineProperty({}, key, source[key]));\n          }\n        }\n      }\n\n      return output;\n    }\n    /*\r\n     * Determine whether the object is iterable\r\n     *\r\n     * @param object obj (required)\r\n     *\r\n     * @return bool\r\n     */\n\n  }, {\n    key: \"is_iterable\",\n    value: function is_iterable(obj) {\n      return obj && typeof obj[Symbol.iterator] === 'function';\n    }\n    /*\r\n     * Add an @@iterator method to non-iterable object\r\n     *\r\n     * @param object obj (required)\r\n     *\r\n     * @return object\r\n     */\n\n  }, {\n    key: \"toIterableObject\",\n    value: function toIterableObject(obj) {\n      if (this.is_iterable(obj)) {\n        return obj;\n      }\n\n      obj[Symbol.iterator] = function () {\n        var index = 0;\n        return {\n          next: function next() {\n            if (obj.length <= index) {\n              return {\n                done: true\n              };\n            } else {\n              return {\n                value: obj[index++]\n              };\n            }\n          }\n        };\n      };\n\n      return obj;\n    }\n    /*\r\n     * Await until next process at specific millisec\r\n     *\r\n     * @param int msec (optional; defaults to 1)\r\n     *\r\n     * @return void\r\n     */\n\n  }, {\n    key: \"sleep\",\n    value: function sleep() {\n      var msec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return new Promise(function (resolve) {\n        setTimeout(resolve, msec);\n      });\n    }\n    /*\r\n     * Supplemental method for validating arguments in local scope\r\n     *\r\n     * @param mixed default_value (required)\r\n     * @param mixed opt_arg (optional)\r\n     * @param mixed opt_callback (optional; function or string of function to call)\r\n     *\r\n     * @return mixed\r\n     */\n\n  }, {\n    key: \"supplement\",\n    value: function supplement(default_value, opt_arg, opt_callback) {\n      if (opt_arg === undefined) {\n        return default_value;\n      }\n\n      if (opt_callback === undefined) {\n        return opt_arg;\n      }\n\n      return opt_callback(default_value, opt_arg);\n    }\n    /*\r\n     * Generate the pluggable unique id\r\n     *\r\n     * @param int digit (optional)\r\n     *\r\n     * @return string\r\n     */\n\n  }, {\n    key: \"generateUniqueID\",\n    value: function generateUniqueID() {\n      var digit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n      return new Date().getTime().toString(16) + Math.floor(digit * Math.random()).toString(16);\n    }\n    /*\r\n     * Round a number with specific digit\r\n     *\r\n     * @param numeric number (required)\r\n     * @param int digit (optional)\r\n     * @param string round_type (optional; defaults to \"round\")\r\n     *\r\n     * @return numeric\r\n     */\n\n  }, {\n    key: \"numRound\",\n    value: function numRound(number, digit) {\n      var round_type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'round';\n      digit = this.supplement(0, digit, this.validateNumeric);\n\n      var _pow = Math.pow(10, digit);\n\n      switch (true) {\n        case /^ceil$/i.test(round_type):\n          return Math.ceil(number * _pow) / _pow;\n\n        case /^floor$/i.test(round_type):\n          return Math.floor(number * _pow) / _pow;\n\n        case /^round$/i.test(round_type):\n        default:\n          return Math.round(number * _pow) / _pow;\n      }\n    }\n    /*\r\n     * Convert hex of color code to rgba\r\n     *\r\n     * @param string hex (required)\r\n     * @param float alpha (optional; defaults to 1)\r\n     *\r\n     * @return string\r\n     */\n\n  }, {\n    key: \"hexToRgbA\",\n    value: function hexToRgbA(hex) {\n      var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n      var _c;\n\n      if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n        _c = hex.substring(1).split('');\n\n        if (_c.length == 3) {\n          _c = [_c[0], _c[0], _c[1], _c[1], _c[2], _c[2]];\n        }\n\n        _c = \"0x\".concat(_c.join(''));\n        return \"rgba(\".concat([_c >> 16 & 255, _c >> 8 & 255, _c & 255].join(','), \",\").concat(alpha, \")\");\n      } // throw new Error( 'Bad Hex' )\n\n\n      return hex;\n    }\n    /*\r\n     * Get the correct datetime with remapping to that if the year is 0 - 99\r\n     *\r\n     * @param string datetime_str (required)\r\n     *\r\n     * @return Date Object, or null if failed\r\n     */\n\n  }, {\n    key: \"getCorrectDatetime\",\n    value: function getCorrectDatetime(datetime_str) {\n      var normalizeDate = function normalizeDate(dateString) {\n        // For Safari, IE\n        var _d = dateString.replace(/-/g, '/');\n\n        return /^\\d{1,4}\\/\\d{1,2}$/.test(_d) ? \"\".concat(_d, \"/1\") : _d;\n      },\n          getDateObject = function getDateObject(datetime_str) {\n        var _chk_str = normalizeDate(datetime_str),\n            _ymd,\n            _his,\n            _parts,\n            _date;\n\n        switch (true) {\n          case /^\\d{1,2}(|\\/\\d{1,2}(|\\/\\d{1,2}))(| \\d{1,2}(|:\\d{1,2}(|:\\d{1,2})))$/i.test(_chk_str):\n            {\n              var _chk_str$split = _chk_str.split(' ');\n\n              var _chk_str$split2 = _slicedToArray(_chk_str$split, 2);\n\n              _ymd = _chk_str$split2[0];\n              _his = _chk_str$split2[1];\n              _parts = _ymd.split('/');\n\n              if (_parts[1]) {\n                _parts[1] = parseInt(_parts[1], 10) - 1; // to month index\n              }\n\n              if (_his) {\n                var _parts2;\n\n                (_parts2 = _parts).push.apply(_parts2, _toConsumableArray(_his.split(':')));\n              }\n\n              _date = new Date(_construct(Date, _toConsumableArray(_parts)).setFullYear(parseInt(_parts[0], 10)));\n              break;\n            }\n\n          case /^\\d+$/.test(_chk_str):\n            _date = new Date(1, 0, 1).setFullYear(parseInt(_chk_str, 10));\n            break;\n\n          default:\n            _date = new Date(_chk_str.toString());\n            break;\n        }\n\n        return _date;\n      },\n          _checkDate = getDateObject(datetime_str);\n\n      if (isNaN(_checkDate) || this.is_empty(_checkDate)) {\n        console.warn(\"\\\"\".concat(datetime_str, \"\\\" Cannot parse date because invalid format.\"));\n        return null;\n      }\n      /*\r\n      let _tempDate = new Date( normalizeDate( datetime_str ) ),\r\n          _chk_date = datetime_str.split( /-|\\// )\r\n      \r\n      if ( parseInt( _chk_date[0], 10 ) < 100 ) {\r\n          // Remapping if year is 0-99\r\n          _tempDate.setFullYear( parseInt( _chk_date[0], 10 ) )\r\n      }\r\n      \r\n      return _tempDate\r\n      */\n\n\n      if (_typeof(_checkDate) !== 'object') {\n        _checkDate = new Date(_checkDate);\n      } //console.log( '!getCorrectDatetime::input:', datetime_str, '::output:', _checkDate, typeof _checkDate )\n\n\n      return _checkDate;\n    }\n    /*\r\n     * Method to get week number as extension of Date object\r\n     *\r\n     * @param string date_str (required)\r\n     *\r\n     * @return int\r\n     */\n\n  }, {\n    key: \"getWeek\",\n    value: function getWeek(date_str) {\n      var targetDate,\n          _str,\n          _onejan,\n          _millisecInDay = 24 * 60 * 60 * 1000;\n\n      if (/^\\d{1,2}(|\\/\\d{1,2}(|\\/\\d{1,2}))$/.test(date_str)) {\n        _str = date_str.split('/');\n        targetDate = _construct(Date, _toConsumableArray(_str));\n      } else {\n        targetDate = new Date(date_str);\n      }\n\n      _onejan = new Date(targetDate.getFullYear(), 0, 1);\n      return Math.ceil(((targetDate - _onejan) / _millisecInDay + _onejan.getDay() + 1) / 7);\n    }\n    /*\r\n     * Retrieve one higher scale\r\n     *\r\n     * @param string scale (required)\r\n     *\r\n     * @return string higher_scale\r\n     */\n\n  }, {\n    key: \"getHigherScale\",\n    value: function getHigherScale(scale) {\n      var higher_scale = scale;\n\n      switch (true) {\n        case /^millisec(|ond)s?$/i.test(scale):\n          higher_scale = 'second';\n          break;\n\n        case /^seconds?$/i.test(scale):\n          higher_scale = 'minute';\n          break;\n\n        case /^minutes?$/i.test(scale):\n          higher_scale = 'hour';\n          break;\n\n        case /^quarter-?(|hour)$/i.test(scale):\n        case /^half-?(|hour)$/i.test(scale):\n        case /^hours?$/i.test(scale):\n          higher_scale = 'day';\n          break;\n\n        case /^days?$/i.test(scale):\n        case /^weeks?$/i.test(scale):\n          higher_scale = 'month';\n          break;\n\n        case /^months?$/i.test(scale):\n          higher_scale = 'year';\n          break;\n\n        case /^years?$/i.test(scale):\n          higher_scale = 'lustrum';\n          break;\n\n        case /^lustrum$/i.test(scale):\n          higher_scale = 'decade';\n          break;\n\n        case /^dec(ade|ennium)$/i.test(scale):\n          higher_scale = 'century';\n          break;\n\n        case /^century$/i.test(scale):\n          higher_scale = 'millennium';\n          break;\n\n        case /^millenniums?|millennia$/i.test(scale):\n        default:\n          break;\n      }\n\n      return higher_scale;\n    }\n    /*\r\n     * Retrieve the date string of specified locale (:> 指定されたロケールの日付文字列を取得する\r\n     *\r\n     * @param string date_seed (required)\r\n     * @param string scale (optional)\r\n     * @param string locales (optional)\r\n     * @param object options (optional)\r\n     *\r\n     * @return string locale_string\r\n     */\n\n  }, {\n    key: \"getLocaleString\",\n    value: function getLocaleString(date_seed) {\n      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var locales = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en-US';\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      function toLocaleStringSupportsLocales() {\n        try {\n          new Date().toLocaleString('i');\n        } catch (e) {\n          return e.name === \"RangeError\";\n        }\n\n        return false;\n      }\n\n      var is_toLocalString = toLocaleStringSupportsLocales(),\n          locale_string = '',\n          _options = {},\n          getOrdinal = function getOrdinal(n) {\n        var s = ['th', 'st', 'nd', 'rd'],\n            v = n % 100;\n        return n + (s[(v - 20) % 10] || s[v] || s[0]);\n      },\n          getZerofill = function getZerofill(num) {\n        var digit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n\n        var strDuplicate = function strDuplicate(n, str) {\n          return Array(n + 1).join(str);\n        },\n            zero = strDuplicate(digit - num.length, '0');\n\n        return String(num).length == digit ? String(num) : (zero + num).substr(num * -1);\n      },\n          parseDatetime = function parseDatetime(date_str) {\n        var _date_str$split = date_str.split(' '),\n            _date_str$split2 = _slicedToArray(_date_str$split, 2),\n            _ymd = _date_str$split2[0],\n            _his = _date_str$split2[1],\n            _parts = [];\n\n        if (/^\\d{1,4}\\/\\d{1,2}\\/\\d{1,2}$/.test(_ymd)) {\n          _str = _ymd.split('/');\n\n          _parts.push.apply(_parts, _toConsumableArray(_str));\n        }\n\n        if (/^\\d{1,2}(|:\\d{1,2}(|:\\d{1,2}))$/.test(_his)) {\n          _str = _his.split(':');\n\n          _parts.push.apply(_parts, _toConsumableArray(_str));\n        }\n\n        if (_parts.length > 0) {\n          return _construct(Date, _parts);\n        } else {\n          return new Date(date_str);\n        }\n      },\n          _prop,\n          _temp,\n          _str,\n          _num;\n\n      for (_prop in options) {\n        if (_prop === 'timeZone' || _prop === 'hour12') {\n          _options[_prop] = options[_prop];\n        }\n      } //console.log( '!getLocaleString:', date_seed, scale, locales, options[scale], is_toLocalString )\n\n\n      switch (true) {\n        case /^millenniums?|millennia$/i.test(scale):\n        case /^century$/i.test(scale):\n        case /^dec(ade|ennium)$/i.test(scale):\n        case /^lustrum$/i.test(scale):\n          if (options.hasOwnProperty(scale) && options[scale] === 'ordinal') {\n            locale_string = getOrdinal(date_seed);\n          } else {\n            locale_string = date_seed;\n          }\n\n          break;\n\n        case /^years?$/i.test(scale):\n          if (is_toLocalString && options.hasOwnProperty(scale)) {\n            if (['numeric', '2-digit'].includes(options[scale])) {\n              _options.year = options[scale];\n              locale_string = this.getCorrectDatetime(date_seed).toLocaleString(locales, _options);\n            } else if ('zerofill' === options[scale]) {\n              locale_string = getZerofill(date_seed);\n            }\n          }\n\n          locale_string = this.is_empty(locale_string) ? this.getCorrectDatetime(date_seed).getFullYear() : locale_string;\n          break;\n\n        case /^months?$/i.test(scale):\n          if (is_toLocalString && options.hasOwnProperty(scale)) {\n            if (['numeric', '2-digit', 'narrow', 'short', 'long'].includes(options[scale])) {\n              _options.month = options[scale];\n              locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n            }\n          }\n\n          if (this.is_empty(locale_string) || isNaN(locale_string)) {\n            if (/^\\d{1,2}\\/\\d{1,2}(|\\/\\d{1,2})$/.test(date_seed)) {\n              _str = date_seed.split('/');\n              _temp = new Date(_str[0], parseInt(_str[1] - 1), 1);\n              locale_string = _temp.toLocaleString(locales, _options);\n            }\n          }\n\n          break;\n\n        case /^weeks?$/i.test(scale):\n          _temp = date_seed.split(',');\n\n          if (options.hasOwnProperty(scale) && options[scale] === 'ordinal') {\n            locale_string = getOrdinal(_temp[1]);\n          } else {\n            locale_string = _temp[1];\n          }\n\n          break;\n\n        case /^weekdays?$/i.test(scale):\n          var _date_seed$split7 = date_seed.split(',');\n\n          var _date_seed$split8 = _slicedToArray(_date_seed$split7, 2);\n\n          _str = _date_seed$split8[0];\n          _num = _date_seed$split8[1];\n\n          if (/^\\d{1,2}(|\\/\\d{1,2}(|\\/\\d{1,2}))$/.test(_str)) {\n            _str = _str.split('/');\n            _temp = _construct(Date, _toConsumableArray(_str));\n          } else {\n            _temp = new Date(_str);\n          }\n\n          if (is_toLocalString) {\n            _options.weekday = options.hasOwnProperty('weekday') ? options.weekday : 'narrow';\n            locale_string = _temp.toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( _temp[0] ).toLocaleString( locales, _options )\n          } else {\n            var _weekday = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n            locale_string = _weekday[parseInt(_num, 10)];\n          }\n\n          break;\n\n        case /^days?$/i.test(scale):\n          if (/^\\d{1,2}(|\\/\\d{1,2}(|\\/\\d{1,2}))$/.test(date_seed)) {\n            _str = date_seed.split('/');\n            _temp = _construct(Date, _toConsumableArray(_str));\n          } else {\n            _temp = new Date(date_seed);\n          }\n\n          if (is_toLocalString) {\n            _options.day = options.hasOwnProperty('day') ? options.day : 'numeric';\n            locales = options.hasOwnProperty('day') ? locales : 'en-US';\n            locale_string = _temp.toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n          } else {\n            locale_string = _temp.getDate(); //locale_string = this.getCorrectDatetime( date_seed ).getDate()\n          }\n\n          break;\n\n        case /^hours?$/i.test(scale):\n        case /^(half|quarter)-?hours?$/i.test(scale):\n          _temp = typeof date_seed === 'string' ? parseDatetime(date_seed) : new Date(date_seed);\n\n          if (is_toLocalString) {\n            _options.hour = options.hasOwnProperty('hour') ? options.hour : 'numeric';\n\n            if (options.hasOwnProperty('minute')) {\n              _options.minute = options.hasOwnProperty('minute') ? options.minute : 'numeric';\n            }\n\n            locale_string = _temp.toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n          } else {\n            locale_string = _temp.getHours(); //locale_string = this.getCorrectDatetime( date_seed ).getHours()\n          }\n\n          break;\n\n        case /^minutes?$/i.test(scale):\n          _temp = typeof date_seed === 'string' ? parseDatetime(date_seed) : new Date(date_seed);\n\n          if (is_toLocalString) {\n            _options.minute = options.hasOwnProperty('minute') ? options.minute : 'numeric';\n\n            if (options.hasOwnProperty('hour')) {\n              _options.hour = options.hasOwnProperty('hour') ? options.hour : 'numeric';\n            }\n\n            locale_string = _temp.toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n          } else {\n            locale_string = _temp.getMinutes(); //locale_string = this.getCorrectDatetime( date_seed ).getMinutes()\n          }\n\n          break;\n\n        case /^seconds?$/i.test(scale):\n          _temp = typeof date_seed === 'string' ? parseDatetime(date_seed) : new Date(date_seed);\n\n          if (is_toLocalString) {\n            _options.second = options.hasOwnProperty('second') ? options.second : 'numeric';\n\n            if (options.hasOwnProperty('hour')) {\n              _options.hour = options.hasOwnProperty('hour') ? options.hour : 'numeric';\n            }\n\n            if (options.hasOwnProperty('minute')) {\n              _options.minute = options.hasOwnProperty('minute') ? options.minute : 'numeric';\n            }\n\n            locale_string = _temp.toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n          } else {\n            locale_string = _temp.getSeconds(); //locale_string = this.getCorrectDatetime( date_seed ).getSeconds()\n          }\n\n          break;\n\n        case /^millisec(|ond)s?$/i.test(scale):\n        default:\n          _temp = typeof date_seed === 'string' ? parseDatetime(date_seed) : new Date(date_seed);\n          locale_string = _temp.toString(); //locale_string = this.getCorrectDatetime( date_seed )\n\n          break;\n      } //console.log( '!getLocaleString:', date_seed, scale, locales, options[scale], locale_string )\n\n\n      return locale_string;\n    }\n    /*\r\n     * Get the rendering width of the given string\r\n     *\r\n     * @param string str (required)\r\n     *\r\n     * @return int\r\n     */\n\n  }, {\n    key: \"strWidth\",\n    value: function strWidth(str) {\n      var _str_ruler = $('<span id=\"jqtl-str-ruler\"></span>'),\n          _width = 0;\n\n      if ($('#jqtl-str-ruler').length == 0) {\n        $('body').append(_str_ruler);\n      }\n\n      _width = $('#jqtl-str-ruler').text(str).get(0).offsetWidth;\n      $('#jqtl-str-ruler').empty();\n      return _width;\n    }\n    /*\r\n     * Sort an array by value of specific property (Note: destructive method)\r\n     * Usage: Object.sort( this.compareValues( property, order ) )\r\n     *\r\n     * @param string key (required)\r\n     * @param string order (optional; defaults to 'asc')\r\n     *\r\n     * @return object\r\n     */\n\n  }, {\n    key: \"compareValues\",\n    value: function compareValues(key) {\n      var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'asc';\n      return function (a, b) {\n        if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n          return 0;\n        }\n\n        var varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];\n        var varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];\n        var comparison = 0;\n\n        if (varA > varB) {\n          comparison = 1;\n        } else if (varA < varB) {\n          comparison = -1;\n        }\n\n        return order === 'desc' ? comparison * -1 : comparison;\n      };\n    }\n    /*\r\n     * Validators\r\n     */\n\n  }, {\n    key: \"validateString\",\n    value: function validateString(def, val) {\n      return typeof val === 'string' && val !== '' ? val : def;\n    }\n  }, {\n    key: \"validateNumeric\",\n    value: function validateNumeric(def, val) {\n      return typeof val === 'number' ? Number(val) : def;\n    }\n  }, {\n    key: \"validateBoolean\",\n    value: function validateBoolean(def, val) {\n      return typeof val === 'boolean' || _typeof(val) === 'object' && val !== null && typeof val.valueOf() === 'boolean' ? val : def;\n    }\n  }, {\n    key: \"validateObject\",\n    value: function validateObject(def, val) {\n      return _typeof(val) === 'object' ? val : def;\n    }\n  }, {\n    key: \"validateArray\",\n    value: function validateArray(def, val) {\n      return Object.prototype.toString.call(val) === '[object Array]' ? val : def;\n    } // Static\n\n  }], [{\n    key: \"_jQueryInterface\",\n    value: function _jQueryInterface(config) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key3 = 1; _key3 < _len2; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n\n      return this.each(function () {\n        var data = $(this).data(DATA_KEY);\n\n        var _config = _objectSpread({}, Default, $(this).data(), _typeof(config) === 'object' && config ? config : {});\n\n        if (!data) {\n          // Apply the plugin and store the instance in data\n          data = new Timeline(this, _config);\n          $(this).data(DATA_KEY, data);\n        }\n\n        if (typeof config === 'string' && config.charAt(0) != '_') {\n          if (typeof data[config] === 'undefined') {\n            // Call no method\n            throw new ReferenceError(\"No method named \\\"\".concat(config, \"\\\"\"));\n          } // Call public method\n\n\n          data[config](args);\n        } else {\n          if (!data._isInitialized) {\n            data._init();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"VERSION\",\n    get: function get() {\n      return VERSION;\n    }\n  }, {\n    key: \"Default\",\n    get: function get() {\n      return Default;\n    }\n  }]);\n\n  return Timeline;\n}(); // class end\n\n/* ----------------------------------------------------------------------------------------------------------------\r\n * For jQuery\r\n * ----------------------------------------------------------------------------------------------------------------\r\n */\n\n\n$.fn[NAME] = Timeline._jQueryInterface;\n$.fn[NAME].Constructor = Timeline;\n\n$.fn[NAME].noConflict = function () {\n  $.fn[NAME] = JQUERY_NO_CONFLICT;\n  return Timeline._jQueryInterface;\n};\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}