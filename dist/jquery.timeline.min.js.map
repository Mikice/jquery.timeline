{"version":3,"sources":["bundle.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_typeof","obj","Symbol","iterator","constructor","prototype","_objectSpread","target","arguments","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","value","defineProperty","configurable","writable","_defineProperties","props","descriptor","NAME","DATA_KEY","EVENT_KEY","PREFIX","JQUERY_NO_CONFLICT","$","fn","Default","type","scale","startDatetime","endDatetime","datetimePrefix","headline","display","title","range","locale","format","hour12","footer","content","zerofillYear","sidebar","sticky","overlay","list","rows","rowHeight","width","height","minGridSize","marginHeight","ruler","top","lines","fontSize","color","background","rangeAlign","naviIcon","left","right","loader","hideScrollbar","eventMeta","showPointer","storage","debug","LimitScaleGrids","millennium","century","decade","lustrum","year","month","week","day","hour","quarterHour","halfHour","minute","second","EventParams","uid","eventId","x","y","bgColor","bdColor","label","image","margin","rangeMeta","size","extend","callback","relation","Event","INITIALIZED","HIDE","SHOW","CLICK_EVENT","FOCUSIN_EVENT","FOCUSOUT_EVENT","MOUSEENTER_POINTER","MOUSELEAVE_POINTER","ClassName","TIMELINE_CONTAINER","TIMELINE_MAIN","TIMELINE_HEADLINE","TIMELINE_HEADLINE_WRAPPER","HEADLINE_TITLE","RANGE_META","RANGE_SPAN","TIMELINE_EVENT_CONTAINER","TIMELINE_BACKGROUND_GRID","TIMELINE_RELATION_LINES","TIMELINE_EVENTS","TIMELINE_EVENT_NODE","TIMELINE_EVENT_LABEL","TIMELINE_EVENT_THUMBNAIL","TIMELINE_RULER_LINES","TIMELINE_RULER_ITEM","TIMELINE_SIDEBAR","TIMELINE_SIDEBAR_MARGIN","TIMELINE_SIDEBAR_ITEM","TIMELINE_FOOTER","TIMELINE_FOOTER_CONTENT","VIEWER_EVENT_TITLE","VIEWER_EVENT_CONTENT","VIEWER_EVENT_META","VIEWER_EVENT_IMAGE_WRAPPER","VIEWER_EVENT_IMAGE","VIEWER_EVENT_TYPE_POINTER","HIDE_SCROLLBAR","RULER_ITEM_ALIGN_LEFT","STICKY_LEFT","OVERLAY","ALIGN_SELF_RIGHT","LOADER_ITEM","Selector","EVENT_NODE","EVENT_VIEW","RULER_TOP","RULER_BOTTOM","TIMELINE_RULER_TOP","TIMELINE_RULER_BOTTOM","LOADER","DEFAULT_EVENTS","Timeline","element","config","instance","Constructor","TypeError","_classCallCheck","this","_config","_getConfig","_element","_selector","_isInitialized","_isCached","_isCompleted","_isShown","_instanceProps","protoProps","staticProps","_len","args","Array","_key2","each","data","charAt","ReferenceError","_init","get","filteredKey","test","_this2","_debug","_elem","tagName","id","className","replace","toLowerCase","showLoader","_calcVars","_verifyMaxRenderableRange","RangeError","_renderView","afterInitEvent","trigger","off","_loadEvent","_placeEvent","document","on","event","openEvent","_activeEvent","_hoverPointer","_this3","_opts","_props","begin","supplement","_getPluggableDatetime","end","scaleSize","validateNumeric","_getPluggableRows","rowSize","_temp","_verifyScale","_values","values","_averageDays","numRound","reduce","v","_baseDaysOfScale","_totalWidth","days","grids","variableScale","fullwidth","Math","ceil","_prop","fullheight","visibleWidth","visibleHeight","is_empty","round_type","undefined","_date","getFirstDate","dateObj","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","_ms","_higherScale","getHigherScale","getCorrectDatetime","setTime","getTime","_filterScaleKeyName","_tmpDate","getLastDate","str_like_params","params","JSON","parse","stringify","Function","hasOwnProperty","console","warn","fixed_rows","_diffDate","pow","_tl_container","class","style","_tl_main","log","css","addClass","prepend","_createHeadline","append","_createEventContainer","_createRuler","bottom","parseInt","find","_createSideIndex","_createFooter","_display","validateBoolean","_title","_range","_locale","_format","_begin","_end","_tl_headline","_wrapper","_meta","toLocaleString","pos_y","is_dotted","_this4","_actualHeight","_container","_events_bg","_events_lines","_events_body","_cy","ctx_grid","getContext","drawVerticalLine","pos_x","strokeStyle","lineWidth","beginPath","setLineDash","moveTo","lineTo","closePath","stroke","_pos_y","fillStyle","fillRect","_i2","_pos_y2","_bc","_sy","_arr2","_i3","_key","_i4","position","_this5","ruler_line","def","val","is_array","line_height","font_size","text_color","ruler_opts","_fullwidth","_fullheight","_ruler","_ruler_bg","_ruler_body","_finalLines","ctx_ruler","canvas","some","line_scale","idx","_line_y","_line_grids","_grid_x","_correction","_filterVariableScale","_arr3","_i5","_getGridsPerScale","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","_val","err","return","_createRulerContent","target_scale","scales","retObj","_arr4","_i6","_dt","_days","grid_size","_newKey","_arr","split","getWeek","getDay","_scopes","_scale_grids","_sep","_tmp","_y","_mil","_cen","_dec","_lus","_m","_wd","_d","_w","_h","_min","_s","push","weekday","datetime","toString","_scope","toIterableObject","validateString","validateObject","_ruler_lines","_arr5","_i7","_item_width","_line","_ruler_string","getLocaleString","_data_ruler_item","String","attr","html","strWidth","_sticky","_overlay","_sbList","_margin","_list","clone","_item","_content","_tl_footer","date1","date2","absval","_dt1","_dt2","diffMS","retval","lastDayOfMonth","isLeapYear","sum","setMonth","abs","_bd","_ed","_dy","_cd","_i8","_cd2","_i9","_cd3","_i10","_cd4","_i11","_cd5","_that","_event_list","_cnt","events","lastEventId","children","_attr","_evt_params","_getPluggableParams","_one_event","_registerEventData","max","cacheIds","_evt","_i","_this","_chkId","includes","_saveToCache","event_element","_x","_c","_this6","new_event","generateUniqueID","_relation","_getCoordinateX","start","floor","row","date","coordinate_x","strageEngine","window","localStorage","sessionStorage","setItem","getItem","removeItem","_this7","_evt_container","_relation_lines","_loadToCache","empty","_evt_elem","_createEventNode","_drawRelationLine","sleep","then","hideLoader","fadeIn","hexToRgbA","backgroundColor","_pointSize","_getPointerSize","_shiftX","_shiftY","_imgSize","meta","_arr6","_i12","_max","min","_size","_this8","_canvas","ctx_relations","drawLine","_sx","_ex","_ey","evt","_ba","_curveType","_radius","_arr7","_i13","before","after","Boolean","quadraticCurveTo","bezierCurveTo","clearRect","_targetId","_targetEvent","_rel","_tl_events","_cache","_events","_uid","_data","removeClass","_base","_z","message","throwType","_msg","_sty","_message","_args","userdata","slice","removeData","remove","_removeCache","_arr8","_i14","_movX","scrollWidth","_mapPlacedEvents","sort","compareValues","lastEvent","_events2","targetEvent","_now","_nowX","scrollLeft","_this9","validateArray","_cacheEvents","add_done","_this10","targets","condition","remove_done","cond","RegExp","_idx","splice","_fromX","from","_toX","to","_this11","update_done","_upc_event","_old_index","_old_event","_new_event","assign","_upc_options","$default_evt","_old_options","_new_options","_self","$viewer","_eventData","_label","_image","_loader","match","str","_fountain_text","text","_custom_loader","prop","isArray","valueOf","is_iterable","index","msec","Promise","resolve","setTimeout","default_value","opt_arg","opt_callback","digit","random","number","_pow","round","hex","alpha","substring","join","datetime_str","normalizeDate","dateString","isNaN","_tempDate","_chk_date","setFullYear","date_str","targetDate","_onejan","higher_scale","date_seed","locales","options","is_toLocalString","name","toLocaleStringSupportsLocales","locale_string","_options","getOrdinal","s","num","zero","substr","getZerofill","_parts","_width","_str_ruler","offsetWidth","order","b","varA","toUpperCase","varB","comparison","Number","_jQueryInterface","noConflict"],"mappings":"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","file":"jquery.timeline.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n//import '@babel/polyfill'\n\n/*!\r\n * jQuery Timeline\r\n * ------------------------\r\n * Version: 2.0.0a1\r\n * Author: Ka2 (https://ka2.org/)\r\n * Repository: https://github.com/ka215/jquery.timeline/tree/develop\r\n * Lisenced: MIT\r\n */\n\n/*\r\n * Constants\r\n */\nvar NAME = \"Timeline\";\nvar VERSION = \"2.0.0a1\";\nvar DATA_KEY = \"jq.timeline\";\nvar EVENT_KEY = \".\".concat(DATA_KEY);\nvar PREFIX = \"jqtl-\";\nvar LOADING_MESSAGE = \"Loading...\";\nvar MIN_POINTER_SIZE = 12; //const DATA_API_KEY       = \".data-api\"\n\nvar JQUERY_NO_CONFLICT = $.fn[NAME];\n/*\r\n * Defaults of plugin options\r\n */\n\nvar Default = {\n  type: \"bar\",\n  // View type of timeline event is either \"bar\" or \"point\"\n  scale: \"day\",\n  // Timetable's minimum level scale is either \"year\", \"month\", \"week\", \"day\", \"hour\", \"minute\"; Enhanced since v2.0.0\n  startDatetime: \"currently\",\n  // Beginning date time of timetable on the timeline. format is ( \"^d{4}(/|-)d{2}(/|-)d{2}\\sd{2}:d{2}:d{2}$\" ) or \"currently\"\n  endDatetime: \"auto\",\n  // Ending date time of timetable on the timeline. format is ( \"^d{4}(/|-)d{2}(/|-)d{2}\\sd{2}:d{2}:d{2}$\" ) or \"auto\"; Added new since v2.0.0\n  datetimePrefix: \"\",\n  // The prefix of the date and time notation displayed in the headline\n  // showHeadline : true, // --> Deprecated since v2.0.0\n  headline: {\n    // Content in the headline; Added new since v2.0.0\n    display: true,\n    // Whether to display headline is instead of former showHeadline\n    title: \"\",\n    range: true,\n    // Hide if false\n    locale: \"en-US\",\n    // This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\n    format: {\n      hour12: false // This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\n\n    }\n  },\n  footer: {\n    // Content in the footer; Added new since v2.0.0\n    display: true,\n    // Whether to display footer\n    content: \"\",\n    range: false,\n    // Visible if true\n    locale: \"en-US\",\n    // This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\n    format: {\n      hour12: false // This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\n\n    }\n  },\n\n  /* datetimeFormat  : { // --> Deprecated since v2.0.0\r\n      full        : \"j M Y\", // or \"Y/m/d\" etc.\r\n      year        : \"Y\",\r\n      month       : \"M Y\", // or \"F\" etc.\r\n      day         : \"D, j M\", // or \"j\" etc.\r\n      years       : \"Y\", \r\n      months      : \"F\", \r\n      days        : \"j\",\r\n      meta        : \"Y/m/d H:i\", // start datetime in meta of Event Detail; or \"g:i A, D F j, Y\"\r\n      metato      : \"\" // --> Deprecated since v2.0.0\r\n  }, */\n  // minuteInterval : 30, // --> Deprecated since v2.0.0\n  zerofillYear: false,\n  // It's outputted at the \"0099\" if true, the \"99\" if false\n  range: 3,\n  // Override the scale range of the timeline to be rendered when endDatetime is undefined or \"auto\"; Enhanced since v2.0.0\n  sidebar: {\n    // Settings of sidebar; Added new since v2.0.0\n    sticky: false,\n    overlay: false,\n    list: []\n  },\n  rows: \"auto\",\n  // Rows of timeline event area. defaults to \"auto\"; Enhanced since v2.0.0\n  rowHeight: 48,\n  // Height of one row\n  width: \"auto\",\n  // Fixed width (pixel) of timeline view. defaults to \"auto\"; Added new since v2.0.0\n  height: \"auto\",\n  // Fixed height (pixel) of timeline view. defaults to \"auto\" ( rows * rowHeight )\n  // minGridPer   : 2, // --> Deprecated since v2.0.0\n  minGridSize: 30,\n  // Override value of minimum size (pixel) of timeline grid; Enhanced since v2.0.0\n  marginHeight: 2,\n  // Margin (pixel) top and bottom of events on the timeline; Added new since v2.0.0\n  ruler: {\n    // Settings of ruler; Added new since v2.0.0\n    top: {\n      // Can define the ruler position to top or bottom and both\n      lines: [],\n      // defaults to this.option.scale; c.g. [ 'year', 'month', 'day', 'weekday' ]\n      height: 30,\n      fontSize: 14,\n      color: \"#777777\",\n      background: \"#FFFFFF\",\n      locale: \"en-US\",\n      // This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\n      format: {\n        hour12: false // This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\n\n      }\n    }\n  },\n  rangeAlign: \"current\",\n  // Possible values are \"left\", \"center\", \"right\", \"current\", \"latest\" and specific event id\n  naviIcon: {\n    // Define class name\n    left: \"\".concat(PREFIX, \"circle-left\"),\n    right: \"\".concat(PREFIX, \"circle-right\")\n  },\n  loader: \"default\",\n  // Custom loader definition, possible values are \"default\", false and selector of loader element; Added new since v2.0.0\n  hideScrollbar: false,\n  // Whether or not to display the scroll bar displayed when the width of the timeline overflows (even if it is set to non-display, it will not function depending on the browser); Added new since v2.0.0\n  eventMeta: {\n    // Display meta of range on event node when the timeline type is \"bar\"; Added new since v2.0.0\n    display: false,\n    scale: \"day\",\n    locale: \"en-US\",\n    // This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\n    format: {\n      hour12: false\n    },\n    // This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\n    content: \"\" // This is value for if you want to show custom content on the meta\n\n  },\n  showPointer: true,\n  // i18n         : {}, // --> Deprecated since v1.0.6\n  // langsDir     : \"./langs/\", // --> Deprecated since v1.0.6\n  // httpLanguage : false, // --> Deprecated since v1.0.6\n  // duration     : 150, // duration of animate as each transition effects; Added v1.0.6 --> Deprecated since v2.0.0\n  storage: 'session',\n  // Specification of Web storage to cache event data, defaults to sessionStorage; Added new since v2.0.0\n  // reloadCacheKeep : true, // Whether to load cached events during reloading, the cache is discarded if false\n  debug: false\n  /*\r\n   * Define the limited grid number per scale of timeline\r\n   */\n\n};\nvar LimitScaleGrids = {\n  millennium: 100,\n  // = 100 : 100000 years\n  century: 100 * 5,\n  // = 500 : 50000 years\n  decade: 10 * 50,\n  // = 500 : 5000 years\n  lustrum: 5 * 100,\n  // = 500 : 2500 years\n  year: 500,\n  // = 500 : 500 years\n  month: 12 * 45,\n  // = 540 : 45 years\n  week: 53 * 10,\n  // = 530 : 10 years\n  day: 366,\n  // = 366 : 1 year\n  hour: 24 * 30,\n  // = 720 : 30 days\n  quarterHour: 24 * 4 * 7.5,\n  // = 720 : 7.5 days\n  halfHour: 24 * 2 * 15,\n  // = 720 : 15 days\n  minute: 60 * 12,\n  // = 720 : 12 hours\n  second: 60 * 15 // = 900 : 15 minutes\n\n  /*\r\n  const DefaultType = {\r\n      \r\n  }\r\n  */\n\n  /*\r\n   * Defaults of event parameters on timeline\r\n   */\n\n};\nvar EventParams = {\n  uid: '',\n  eventId: '',\n  x: 0,\n  y: Default.marginHeight,\n  width: Default.minGridSize,\n  height: Default.rowHeight - Default.marginHeight * 2,\n  bgColor: '#E7E7E7',\n  // background color\n  color: '#343A40',\n  // text color\n  bdColor: '#6C757D',\n  // border color\n  label: '',\n  content: '',\n  image: '',\n  margin: Default.marginHeight,\n  rangeMeta: '',\n  size: 'normal',\n  // diameter of pointer\n  extend: {},\n  callback: function callback() {},\n  relation: {\n    /*\r\n    before    : \r\n    after     : \r\n    linesize  : \r\n    linecolor : \r\n    curve     : \r\n    */\n  }\n};\nvar Event = {\n  INITIALIZED: \"initialized\".concat(EVENT_KEY),\n  HIDE: \"hide\".concat(EVENT_KEY),\n  SHOW: \"show\".concat(EVENT_KEY),\n  CLICK_EVENT: \"click.open\".concat(EVENT_KEY),\n  FOCUSIN_EVENT: \"focusin.event\".concat(EVENT_KEY),\n  FOCUSOUT_EVENT: \"focusout.event\".concat(EVENT_KEY),\n  MOUSEENTER_POINTER: \"mouseenter.pointer\".concat(EVENT_KEY),\n  MOUSELEAVE_POINTER: \"mouseleave.pointer\".concat(EVENT_KEY)\n};\nvar ClassName = {\n  TIMELINE_CONTAINER: \"\".concat(PREFIX, \"container\"),\n  TIMELINE_MAIN: \"\".concat(PREFIX, \"main\"),\n  TIMELINE_HEADLINE: \"\".concat(PREFIX, \"headline\"),\n  TIMELINE_HEADLINE_WRAPPER: \"\".concat(PREFIX, \"headline-wrapper\"),\n  HEADLINE_TITLE: \"\".concat(PREFIX, \"timeline-title\"),\n  RANGE_META: \"\".concat(PREFIX, \"range-meta\"),\n  RANGE_SPAN: \"\".concat(PREFIX, \"range-span\"),\n  TIMELINE_EVENT_CONTAINER: \"\".concat(PREFIX, \"event-container\"),\n  TIMELINE_BACKGROUND_GRID: \"\".concat(PREFIX, \"bg-grid\"),\n  TIMELINE_RELATION_LINES: \"\".concat(PREFIX, \"relation-lines\"),\n  TIMELINE_EVENTS: \"\".concat(PREFIX, \"events\"),\n  TIMELINE_EVENT_NODE: \"\".concat(PREFIX, \"event-node\"),\n  TIMELINE_EVENT_LABEL: \"\".concat(PREFIX, \"event-label\"),\n  TIMELINE_EVENT_THUMBNAIL: \"\".concat(PREFIX, \"event-thumbnail\"),\n  TIMELINE_RULER_LINES: \"\".concat(PREFIX, \"ruler-line-rows\"),\n  TIMELINE_RULER_ITEM: \"\".concat(PREFIX, \"ruler-line-item\"),\n  TIMELINE_SIDEBAR: \"\".concat(PREFIX, \"side-index\"),\n  TIMELINE_SIDEBAR_MARGIN: \"\".concat(PREFIX, \"side-index-margin\"),\n  TIMELINE_SIDEBAR_ITEM: \"\".concat(PREFIX, \"side-index-item\"),\n  TIMELINE_FOOTER: \"\".concat(PREFIX, \"footer\"),\n  TIMELINE_FOOTER_CONTENT: \"\".concat(PREFIX, \"footer-content\"),\n  VIEWER_EVENT_TITLE: \"\".concat(PREFIX, \"event-title\"),\n  VIEWER_EVENT_CONTENT: \"\".concat(PREFIX, \"event-content\"),\n  VIEWER_EVENT_META: \"\".concat(PREFIX, \"event-meta\"),\n  VIEWER_EVENT_IMAGE_WRAPPER: \"\".concat(PREFIX, \"event-image-wrapper\"),\n  VIEWER_EVENT_IMAGE: \"\".concat(PREFIX, \"event-image\"),\n  VIEWER_EVENT_TYPE_POINTER: \"\".concat(PREFIX, \"event-type-pointer\"),\n  HIDE_SCROLLBAR: \"\".concat(PREFIX, \"hide-scrollbar\"),\n  HIDE: \"\".concat(PREFIX, \"hide\"),\n  RULER_ITEM_ALIGN_LEFT: \"\".concat(PREFIX, \"rli-left\"),\n  STICKY_LEFT: \"\".concat(PREFIX, \"sticky-left\"),\n  OVERLAY: \"\".concat(PREFIX, \"overlay\"),\n  ALIGN_SELF_RIGHT: \"\".concat(PREFIX, \"align-self-right\"),\n  LOADER_ITEM: \"\".concat(PREFIX, \"loading\")\n};\nvar Selector = {\n  EVENT_NODE: \".\".concat(PREFIX, \"event-node\"),\n  EVENT_VIEW: \".timeline-event-view, .\".concat(PREFIX, \"event-view\"),\n  RULER_TOP: \".\".concat(PREFIX, \"ruler-top\"),\n  RULER_BOTTOM: \".\".concat(PREFIX, \"ruler-bottom\"),\n  TIMELINE_CONTAINER: \".\".concat(ClassName.TIMELINE_CONTAINER),\n  TIMELINE_RULER_TOP: \".\".concat(PREFIX, \"ruler-top\"),\n  TIMELINE_RULER_BOTTOM: \".\".concat(PREFIX, \"ruler-bottom\"),\n  TIMELINE_RELATION_LINES: \".\".concat(ClassName.TIMELINE_RELATION_LINES),\n  TIMELINE_EVENTS: \".\".concat(ClassName.TIMELINE_EVENTS),\n  TIMELINE_SIDEBAR_ITEM: \".\".concat(ClassName.TIMELINE_SIDEBAR_ITEM),\n  TIMELINE_EVENT_NODE: \".\".concat(ClassName.TIMELINE_EVENT_NODE),\n  VIEWER_EVENT_TYPE_POINTER: \".\".concat(ClassName.VIEWER_EVENT_TYPE_POINTER),\n  LOADER: \"#\".concat(PREFIX, \"loader\"),\n  DEFAULT_EVENTS: \".timeline-events\"\n  /*\r\n   * The plugin core class of the jQuery Timeline as controller\r\n   */\n\n};\n\nvar Timeline =\n/*#__PURE__*/\nfunction () {\n  function Timeline(element, config) {\n    _classCallCheck(this, Timeline);\n\n    this._config = this._getConfig(config);\n    this._element = element;\n    this._selector = null;\n    this._isInitialized = false;\n    this._isCached = false;\n    this._isCompleted = false;\n    this._isShown = false;\n    this._instanceProps = {};\n  } // Getters\n\n\n  _createClass(Timeline, [{\n    key: \"_getConfig\",\n    // Private\n\n    /*\r\n     * @private: Define the default options of this plugin\r\n     */\n    value: function _getConfig(config) {\n      config = _objectSpread({}, Default, config);\n      return config;\n    }\n    /*\r\n     * @private: Filter the scale key name for LimitScaleGrids\r\n     */\n\n  }, {\n    key: \"_filterScaleKeyName\",\n    value: function _filterScaleKeyName(key) {\n      var filteredKey = null;\n\n      switch (true) {\n        case /^quarter-?(|hour)$/i.test(key):\n          filteredKey = 'quarterHour';\n          break;\n\n        case /^half-?(|hour)$/i.test(key):\n          filteredKey = 'halfHour';\n          break;\n\n        default:\n          filteredKey = key;\n      }\n\n      return filteredKey;\n    }\n    /*\r\n     * @private: Initialize the plugin\r\n     */\n\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      var _this2 = this;\n\n      this._debug('_init');\n\n      var _elem = this._element,\n          _selector = \"\".concat(_elem.tagName).concat(_elem.id ? \"#\".concat(_elem.id) : '').concat(_elem.className ? \".\".concat(_elem.className.replace(/\\s/g, '.')) : '');\n\n      this._selector = _selector.toLowerCase();\n\n      if (this._isInitialized || this._isCompleted) {\n        return;\n      }\n\n      this.showLoader();\n\n      this._calcVars();\n\n      if (!this._verifyMaxRenderableRange()) {\n        throw new RangeError(\"Timeline display period exceeds maximum renderable range.\");\n      } //    this.sleep( 2400 ).then(() => {\n\n\n      if (!this._isInitialized) {\n        this._renderView();\n\n        var afterInitEvent = $.Event(Event.INITIALIZED, {\n          _elem: _elem\n        });\n        $(_elem).trigger(afterInitEvent);\n        $(_elem).off(Event.INITIALIZED);\n      }\n\n      if (!this._isCached) {\n        this._loadEvent();\n      }\n\n      if (this._isCached) {\n        this._placeEvent();\n      } // Assign events for the timeline\n\n\n      $(document).on(Event.CLICK_EVENT, \"\".concat(this._selector, \" \").concat(Selector.EVENT_NODE), function (event) {\n        return _this2.openEvent(event);\n      });\n      $(_elem).on(Event.FOCUSIN_EVENT, Selector.TIMELINE_EVENT_NODE, function (event) {\n        return _this2._activeEvent(event);\n      });\n      $(_elem).on(Event.FOCUSOUT_EVENT, Selector.TIMELINE_EVENT_NODE, function (event) {\n        return _this2._activeEvent(event);\n      }); //console.log( '!_init:', )\n\n      if (/^point(|er)$/i.test(this._config.type)) {\n        $(_elem).on(Event.MOUSEENTER_POINTER, Selector.VIEWER_EVENT_TYPE_POINTER, function (event) {\n          return _this2._hoverPointer(event);\n        });\n        $(_elem).on(Event.MOUSELEAVE_POINTER, Selector.VIEWER_EVENT_TYPE_POINTER, function (event) {\n          return _this2._hoverPointer(event);\n        });\n      }\n\n      this._isCompleted = true; //    }) // /sleep\n    }\n    /*\r\n     * @private: Calculate each properties of the timeline instance\r\n     */\n\n  }, {\n    key: \"_calcVars\",\n    value: function _calcVars() {\n      var _this3 = this;\n\n      var _opts = this._config,\n          _props = {};\n      _props.begin = this.supplement(null, this._getPluggableDatetime(_opts.startDatetime, 'first'));\n      _props.end = this.supplement(null, this._getPluggableDatetime(_opts.endDatetime, 'last'));\n      _props.scaleSize = this.supplement(null, _opts.minGridSize, this.validateNumeric);\n      _props.rows = this._getPluggableRows();\n      _props.rowSize = this.supplement(null, _opts.rowHeight, this.validateNumeric);\n      _props.width = this.supplement(null, _opts.width, this.validateNumeric);\n      _props.height = this.supplement(null, _opts.height, this.validateNumeric);\n      this._instanceProps = _props; // pre-cache\n\n      if (/^(year|month)s?$/i.test(_opts.scale)) {\n        // For scales where the value of quantity per unit is variable length (:> 単位あたりの量の値が可変長であるスケールの場合\n        var _temp = this._verifyScale(_opts.scale),\n            _values = Object.values(_temp),\n            _averageDays = this.numRound(_values.reduce(function (a, v) {\n          return a + v;\n        }, 0) / _values.length, 4),\n            // Average days within the range\n        _baseDaysOfScale = /^years?$/i.test(_opts.scale) ? 365 : 30,\n            _totalWidth = 0; //console.log( '!', _opts.scale, _temp, _vals )\n\n\n        _values.forEach(function (days) {\n          _totalWidth += _this3.numRound(days * _props.scaleSize / _baseDaysOfScale, 2);\n        });\n\n        _props.scale = _averageDays * (24 * 60 * 60 * 1000);\n        _props.grids = _values.length;\n        _props.variableScale = _temp;\n        _props.fullwidth = _totalWidth;\n      } else {\n        // In case of fixed length scale (:> 固定長スケールの場合\n        _props.scale = this._verifyScale(_opts.scale);\n        _props.grids = Math.ceil((_props.end - _props.begin) / _props.scale);\n        _props.variableScale = null;\n        _props.fullwidth = _props.grids * _props.scaleSize;\n      }\n\n      _props.fullheight = _props.rows * _props.rowSize; // Define visible size according to full size of timeline (:> タイムラインのフルサイズに準じた可視サイズを定義\n\n      _props.visibleWidth = _props.width > 0 ? \"\".concat(_props.width <= _props.fullwidth ? _props.width : _props.fullwidth, \"px\") : '100%';\n      _props.visibleHeight = _props.height > 0 ? \"\".concat(_props.height <= _props.fullheight ? _props.height : _props.fullheight, \"px\") : 'auto';\n\n      for (var _prop in _props) {\n        if (_prop === 'width' || _prop === 'height' || _prop === 'variableScale') {\n          continue;\n        }\n\n        if (this.is_empty(_props[_prop])) {\n          throw new TypeError(\"Property \\\"\".concat(_prop, \"\\\" cannot set because undefined or invalid variable.\"));\n        }\n      }\n\n      if (_props.fullwidth < 2 || _props.fullheight < 2) {\n        throw new TypeError(\"The range of the timeline to be rendered is incorrect.\");\n      }\n\n      this._instanceProps = _props;\n    }\n    /*\r\n     * @private: Retrieve the pluggable datetime as milliseconds from specified keyword (:> 指定キーから作成されたプラガブルな日時をミリ秒単位で取得する\r\n     */\n\n  }, {\n    key: \"_getPluggableDatetime\",\n    value: function _getPluggableDatetime(key) {\n      var round_type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      var _opts = this._config,\n          _date = null,\n          getFirstDate = function getFirstDate(dateObj, scale) {\n        switch (true) {\n          case /^millenniums?|millennia$/i.test(scale):\n          case /^century$/i.test(scale):\n          case /^dec(ade|ennium)$/i.test(scale):\n          case /^lustrum$/i.test(scale):\n          case /^years?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), 0, 1);\n\n          case /^months?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), dateObj.getMonth(), 1);\n\n          case /^(week|day)s?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate());\n\n          case /^(|half|quarter)-?hours?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours());\n\n          case /^minutes?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes());\n\n          case /^seconds?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes(), dateObj.getSeconds());\n        }\n      },\n          getLastDate = function getLastDate(dateObj, scale) {\n        var _tmpDate;\n\n        switch (true) {\n          case /^millenniums?|millennia$/i.test(scale):\n          case /^century$/i.test(scale):\n          case /^dec(ade|ennium)$/i.test(scale):\n          case /^lustrum$/i.test(scale):\n          case /^years?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear() + 1, 0, 1);\n            break;\n\n          case /^months?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth() + 1, 1);\n            break;\n\n          case /^(week|day)s?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate() + 1);\n            break;\n\n          case /^(|half|quarter)-?hours?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours() + 1);\n            break;\n\n          case /^minutes?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes() + 1);\n            break;\n\n          case /^seconds?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes(), dateObj.getSeconds() + 1);\n            break;\n        }\n\n        return new Date(_tmpDate.getTime() - 1);\n      };\n\n      switch (true) {\n        case /^current(|ly)$/i.test(key):\n          _date = new Date(); //console.log( '!_getPluggableDatetime::currently:', _opts.scale, this.getHigherScale( _opts.scale ), key, _date.getTime() )\n\n          break;\n\n        case /^auto$/i.test(key):\n          {\n            var _ms = null,\n                _higherScale = this.getHigherScale(_opts.scale);\n\n            if (/^current(|ly)$/i.test(_opts.startDatetime)) {\n              _date = new Date(); //if ( /^(year|month)s?$/i.test( _opts.scale ) ) {\n\n              _date = getFirstDate(_date, _opts.scale); //}\n            } else {\n              _date = this.getCorrectDatetime(_opts.startDatetime);\n            }\n\n            if (_opts.range || _opts.range > 0) {\n              if (/^years?$/i.test(_higherScale)) {\n                _ms = 365.25 * 24 * 60 * 60 * 1000;\n              } else if (/^months?$/i.test(_higherScale)) {\n                _ms = 30.44 * 24 * 60 * 60 * 1000;\n              } else {\n                _ms = this._verifyScale(_higherScale);\n              }\n\n              _date.setTime(_date.getTime() + _ms * _opts.range);\n            } else {\n              if (/^years?$/i.test(_opts.scale)) {\n                _ms = 365.25 * 24 * 60 * 60 * 1000;\n              } else if (/^months?$/i.test(_opts.scale)) {\n                _ms = 30.44 * 24 * 60 * 60 * 1000;\n              } else {\n                _ms = this._verifyScale(_opts.scale);\n              }\n\n              _date.setTime(_date.getTime() + _ms * LimitScaleGrids[this._filterScaleKeyName(_opts.scale)]);\n            } // console.log( '!_getPluggableDatetime::auto:', _opts.scale, this.getHigherScale( _opts.scale ), key, _date.getTime() )\n\n\n            break;\n          }\n\n        default:\n          _date = this.getCorrectDatetime(key);\n          break;\n      } //if ( ! this.is_empty( round_type ) && /^(year|month|day)s?$/i.test( _opts.scale ) ) {\n\n\n      if (!this.is_empty(round_type)) {\n        if ('first' === round_type) {\n          _date = getFirstDate(_date, _opts.scale);\n        } else if ('last' === round_type) {\n          _date = getLastDate(_date, _opts.scale);\n        }\n      }\n\n      return _date.getTime();\n    }\n    /*\r\n     * @private: Retrieve the pluggable parameter as an object (:> プラガブルなパラメータオブジェクトを取得する\r\n     */\n\n  }, {\n    key: \"_getPluggableParams\",\n    value: function _getPluggableParams(str_like_params) {\n      var params = {};\n\n      if (typeof str_like_params === 'string' && str_like_params) {\n        try {\n          params = JSON.parse(JSON.stringify(new Function(\"return \".concat(str_like_params))()));\n\n          if (params.hasOwnProperty('extend')) {\n            params.extend = JSON.parse(JSON.stringify(new Function(\"return \".concat(params.extend))()));\n          }\n        } catch (e) {\n          console.warn('Can not parse to object therefor invalid param.');\n        }\n      }\n\n      return params;\n    }\n    /*\r\n     * @private: Retrieve the pluggable rows of the timeline (:> プラガブルなタイムラインの行数を取得する\r\n     */\n\n  }, {\n    key: \"_getPluggableRows\",\n    value: function _getPluggableRows() {\n      var _opts = this._config,\n          fixed_rows = this.supplement('auto', _opts.rows, this.validateNumeric);\n\n      if (fixed_rows === 'auto') {\n        fixed_rows = _opts.sidebar.list.length;\n      }\n\n      return fixed_rows > 0 ? fixed_rows : 1;\n    }\n    /*\r\n     * @private: Verify the allowed scale, then retrieve that scale's millisecond if allowed (:> 許容スケールかを確認し、許可時はそのスケールのミリ秒を取得する\r\n     */\n\n  }, {\n    key: \"_verifyScale\",\n    value: function _verifyScale(scale) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _ms = -1;\n\n      if (typeof scale === 'undefined' || typeof scale !== 'string') {\n        return false;\n      }\n\n      switch (true) {\n        case /^millisec(|ond)s?$/i.test(scale):\n          // Millisecond (:> ミリ秒\n          _ms = 1;\n          break;\n\n        case /^seconds?$/i.test(scale):\n          // Second (:> 秒\n          _ms = 1000;\n          break;\n\n        case /^minutes?$/i.test(scale):\n          // Minute (:> 分\n          _ms = 60 * 1000;\n          break;\n\n        case /^quarter-?(|hour)$/i.test(scale):\n          // Quarter of an hour (:> 15分\n          _ms = 15 * 60 * 1000;\n          break;\n\n        case /^half-?(|hour)$/i.test(scale):\n          // Half an hour (:> 30分\n          _ms = 30 * 60 * 1000;\n          break;\n\n        case /^hours?$/i.test(scale):\n          // Hour (:> 時（時間）\n          _ms = 60 * 60 * 1000;\n          break;\n\n        case /^days?$/i.test(scale):\n          // Day (:> 日\n          _ms = 24 * 60 * 60 * 1000;\n          break;\n\n        case /^weeks?$/i.test(scale):\n          // Week (:> 週\n          _ms = 7 * 24 * 60 * 60 * 1000;\n          break;\n\n        case /^months?$/i.test(scale):\n          // Month (is the variable length scale) (:> 月（可変長スケール）\n          //console.log( '!_verifyScale::month:', this._instanceProps, _opts.scale )\n          if (/^(year|month)s?$/i.test(_opts.scale)) {\n            return this._diffDate(_props.begin, _props.end, scale);\n          } else {\n            _ms = 30.44 * 24 * 60 * 60 * 1000;\n            break;\n          }\n\n        case /^years?$/i.test(scale):\n          // Year (is the variable length scale) (:> 年（可変長スケール）\n          if (/^(year|month)s?$/i.test(_opts.scale)) {\n            return this._diffDate(_props.begin, _props.end, scale);\n          } else {\n            _ms = 365.25 * 24 * 60 * 60 * 1000;\n            break;\n          }\n\n        case /^lustrum$/i.test(scale):\n          // Lustrum (:> 五年紀\n          _ms = 3.1536 * Math.pow(10, 8) / 2 * 1000;\n          break;\n\n        case /^dec(ade|ennium)$/i.test(scale):\n          // Decade (:> 十年紀\n          _ms = 3.1536 * Math.pow(10, 8) * 1000;\n          break;\n\n        case /^century$/i.test(scale):\n          // Century (:> 世紀（百年紀）\n          _ms = 3155760000 * 1000;\n          break;\n\n        case /^millenniums?|millennia$/i.test(scale):\n          // Millennium (:> 千年紀\n          _ms = 3.1536 * Math.pow(10, 10) * 1000;\n          break;\n\n        default:\n          console.warn('Specified an invalid scale.');\n          _ms = -1;\n      }\n\n      return _ms > 0 ? _ms : false;\n    }\n    /*\r\n     * @private: Verify the display period of the timeline does not exceed the maximum renderable range (:> タイムラインの表示期間が最大描画可能範囲を超過していないか検証する\r\n     */\n\n  }, {\n    key: \"_verifyMaxRenderableRange\",\n    value: function _verifyMaxRenderableRange() {\n      // console.log( this._instanceProps.grids, '/', LimitScaleGrids[this._filterScaleKeyName( this._config.scale )] )\n      return this._instanceProps.grids <= LimitScaleGrids[this._filterScaleKeyName(this._config.scale)];\n    }\n    /*\r\n     * @private: Render the view of timeline container\r\n     */\n\n  }, {\n    key: \"_renderView\",\n    value: function _renderView() {\n      this._debug('_renderView');\n\n      var _elem = this._element,\n          _opts = this._config,\n          _props = this._instanceProps,\n          _tl_container = $('<div></div>', {\n        class: ClassName.TIMELINE_CONTAINER,\n        style: \"width: \".concat(_props.visibleWidth, \"; height: \").concat(_props.visibleHeight, \";\")\n      }),\n          _tl_main = $('<div></div>', {\n        class: ClassName.TIMELINE_MAIN\n      }); //console.log( _elem, _opts, _props )\n\n\n      if ($(_elem).length == 0) {\n        throw new TypeError('Does not exist the element to render a timeline container.');\n      }\n\n      if (_opts.debug) {\n        console.log(\"Timeline:{ fullWidth: \".concat(_props.fullwidth, \"px,\"), \"fullHeight: \".concat(_props.fullheight, \"px,\"), \"viewWidth: \".concat(_props.visibleWidth), \"viewHeight: \".concat(_props.visibleHeight, \" }\"));\n      }\n\n      $(_elem).css('position', 'relative'); // initialize; not .empty()\n\n      if (_opts.hideScrollbar) {\n        _tl_container.addClass(ClassName.HIDE_SCROLLBAR);\n      } // Create the timeline headline (:> タイムラインの見出しを生成\n\n\n      $(_elem).prepend(this._createHeadline()); // Create the timeline event container (:> タイムラインのイベントコンテナを生成\n\n      _tl_main.append(this._createEventContainer()); // Create the timeline ruler (:> タイムラインの目盛を生成\n\n\n      if (!this.is_empty(_opts.ruler.top)) {\n        _tl_main.prepend(this._createRuler('top'));\n      }\n\n      if (!this.is_empty(_opts.ruler.bottom)) {\n        _tl_main.append(this._createRuler('bottom'));\n      } // Create the timeline side index (:> タイムラインのサイドインデックスを生成\n\n\n      var margin = {\n        top: parseInt(_tl_main.find(Selector.RULER_TOP).height(), 10) - 1,\n        bottom: parseInt(_tl_main.find(Selector.RULER_BOTTOM).height(), 10) - 1\n      };\n\n      if (_opts.sidebar.list.length > 0) {\n        _tl_container.prepend(this._createSideIndex(margin));\n      } // Append the timeline container in the timeline element (:> タイムライン要素にタイムラインコンテナを追加\n\n\n      _tl_container.append(_tl_main);\n\n      $(_elem).append(_tl_container); // Create the timeline footer (:> タイムラインのフッタを生成\n\n      $(_elem).append(this._createFooter());\n      this._isShown = true;\n    }\n    /*\r\n     * @private: Create the headline of the timeline (:> タイムラインの見出しを作成する\r\n     */\n\n  }, {\n    key: \"_createHeadline\",\n    value: function _createHeadline() {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _display = this.supplement(Default.headline.display, _opts.headline.display, this.validateBoolean),\n          _title = this.supplement(null, _opts.headline.title),\n          _range = this.supplement(Default.headline.range, _opts.headline.range, this.validateBoolean),\n          _locale = this.supplement(Default.headline.locale, _opts.headline.locale),\n          _format = this.supplement(Default.headline.format, _opts.headline.format),\n          _begin = this.supplement(null, _props.begin),\n          _end = this.supplement(null, _props.end),\n          _tl_headline = $('<div></div>', {\n        class: ClassName.TIMELINE_HEADLINE\n      }),\n          _wrapper = $('<div></div>', {\n        class: ClassName.TIMELINE_HEADLINE_WRAPPER\n      }); // console.log( '!_createHeadline:', _opts )\n\n\n      if (_title) {\n        _wrapper.append(\"<h3 class=\\\"\".concat(ClassName.HEADLINE_TITLE, \"\\\">\").concat(_opts.headline.title, \"</h3>\"));\n      }\n\n      if (_range) {\n        if (_begin && _end) {\n          var _meta = \"\".concat(new Date(_begin).toLocaleString(_locale, _format), \"<span class=\\\"\").concat(ClassName.RANGE_SPAN, \"\\\"></span>\").concat(new Date(_end).toLocaleString(_locale, _format)); //let _meta = this.getCorrectDatetime( _begin ).toLocaleString( _locale, _format ) +'<span class=\"jqtl-range-span\"></span>'+ this.getCorrectDatetime( _end ).toLocaleString( _locale, _format )\n\n\n          _wrapper.append(\"<div class=\\\"\".concat(ClassName.RANGE_META, \"\\\">\").concat(_meta, \"</div>\"));\n        }\n      }\n\n      if (!_display) {\n        _tl_headline.addClass(ClassName.HIDE);\n      }\n\n      return _tl_headline.append(_wrapper);\n    }\n    /*\r\n     * @private: Create the event container of the timeline (:> タイムラインのイベントコンテナを作成する\r\n     */\n\n  }, {\n    key: \"_createEventContainer\",\n    value: function _createEventContainer() {\n      var _this4 = this;\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _actualHeight = _props.fullheight + Math.ceil(_props.rows / 2),\n          _container = $('<div></div>', {\n        class: ClassName.TIMELINE_EVENT_CONTAINER,\n        style: \"height:\".concat(_actualHeight, \"px;\")\n      }),\n          _events_bg = $(\"<canvas width=\\\"\".concat(_props.fullwidth - 1, \"\\\" height=\\\"\").concat(_actualHeight, \"\\\" class=\\\"\").concat(ClassName.TIMELINE_BACKGROUND_GRID, \"\\\"></canvas>\")),\n          _events_lines = $(\"<canvas width=\\\"\".concat(_props.fullwidth - 1, \"\\\" height=\\\"\").concat(_actualHeight, \"\\\" class=\\\"\").concat(ClassName.TIMELINE_RELATION_LINES, \"\\\"></canvas>\")),\n          _events_body = $('<div></div>', {\n        class: ClassName.TIMELINE_EVENTS\n      }),\n          _cy = 0,\n          ctx_grid = _events_bg[0].getContext('2d'),\n          drawRowRect = function drawRowRect(pos_y, color) {\n        color = _this4.supplement('#FFFFFF', color); // console.log( 0, pos_y, _fullwidth, _size_row, color )\n\n        ctx_grid.fillStyle = color;\n        ctx_grid.fillRect(0, pos_y + 0.5, _props.fullwidth, _props.rowSize + 1.5);\n        ctx_grid.stroke();\n      },\n          drawHorizontalLine = function drawHorizontalLine(pos_y, is_dotted) {\n        is_dotted = _this4.supplement(false, is_dotted); // console.log( pos_y, is_dotted )\n\n        ctx_grid.strokeStyle = 'rgba( 51, 51, 51, 0.1 )';\n        ctx_grid.lineWidth = 1;\n        ctx_grid.filter = 'url(#crisp)';\n        ctx_grid.beginPath();\n\n        if (is_dotted) {\n          ctx_grid.setLineDash([1, 2]);\n        } else {\n          ctx_grid.setLineDash([]);\n        }\n\n        ctx_grid.moveTo(0, pos_y + 0.5);\n        ctx_grid.lineTo(_props.fullwidth, pos_y + 0.5);\n        ctx_grid.closePath();\n        ctx_grid.stroke();\n      },\n          drawVerticalLine = function drawVerticalLine(pos_x, is_dotted) {\n        is_dotted = _this4.supplement(false, is_dotted); // console.log( pos_x, is_dotted )\n\n        ctx_grid.strokeStyle = 'rgba( 51, 51, 51, 0.025 )';\n        ctx_grid.lineWidth = 1;\n        ctx_grid.filter = 'url(#crisp)';\n        ctx_grid.beginPath();\n\n        if (is_dotted) {\n          ctx_grid.setLineDash([1, 2]);\n        } else {\n          ctx_grid.setLineDash([]);\n        }\n\n        ctx_grid.moveTo(pos_x - 0.5, 0);\n        ctx_grid.lineTo(pos_x - 0.5, _props.fullheight);\n        ctx_grid.closePath();\n        ctx_grid.stroke();\n      };\n\n      _cy = 0;\n\n      for (var i = 0; i < _props.rows; i++) {\n        _cy += i % 2 == 0 ? 1 : 0;\n\n        var _pos_y = i * _props.rowSize + _cy;\n\n        drawRowRect(_pos_y, i % 2 == 0 ? '#FEFEFE' : '#F8F8F8');\n      }\n\n      _cy = 0;\n\n      for (var _i2 = 1; _i2 < _props.rows; _i2++) {\n        _cy += _i2 % 2 == 0 ? 1 : 0;\n\n        var _pos_y2 = _i2 * _props.rowSize + _cy;\n\n        drawHorizontalLine(_pos_y2, true);\n      }\n\n      if (/^(year|month)s?$/i.test(_opts.scale)) {\n        // For scales where the value of quantity per unit is variable length (:> 単位あたりの量の値が可変長であるスケールの場合\n        var _bc = /^years?$/i.test(_opts.scale) ? 365 : 30,\n            _sy = 0;\n\n        var _arr2 = Object.keys(_props.variableScale);\n\n        for (var _i3 = 0; _i3 < _arr2.length; _i3++) {\n          var _key = _arr2[_i3];\n          _sy += this.numRound(_props.variableScale[_key] * _props.scaleSize / _bc, 2);\n          drawVerticalLine(_sy, false);\n        }\n      } else {\n        // In case of fixed length scale (:> 固定長スケールの場合\n        for (var _i4 = 1; _i4 < _props.grids; _i4++) {\n          drawVerticalLine(_i4 * _props.scaleSize, false);\n        }\n      }\n\n      return _container.append(_events_bg).append(_events_lines).append(_events_body);\n    }\n    /*\r\n     * @private: Create the ruler of the timeline (:> タイムラインの目盛を作成する\r\n     */\n\n  }, {\n    key: \"_createRuler\",\n    value: function _createRuler(position) {\n      var _this5 = this;\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          ruler_line = this.supplement([_opts.scale], _opts.ruler[position].lines, function (def, val) {\n        return _this5.is_array(val) && val.length > 0 ? val : def;\n      }),\n          line_height = this.supplement(Default.ruler.top.height, _opts.ruler[position].height),\n          font_size = this.supplement(Default.ruler.top.fontSize, _opts.ruler[position].fontSize),\n          text_color = this.supplement(Default.ruler.top.color, _opts.ruler[position].color),\n          background = this.supplement(Default.ruler.top.background, _opts.ruler[position].background),\n          locale = this.supplement(Default.ruler.top.locale, _opts.ruler[position].locale),\n          format = this.supplement(Default.ruler.top.format, _opts.ruler[position].format),\n          ruler_opts = {\n        lines: ruler_line,\n        height: line_height,\n        fontSize: font_size,\n        color: text_color,\n        background: background,\n        locale: locale,\n        format: format\n      },\n          _fullwidth = _props.fullwidth - 1,\n          _fullheight = ruler_line.length * line_height,\n          _ruler = $('<div></div>', {\n        class: \"\".concat(PREFIX, \"ruler-\").concat(position),\n        style: \"height:\".concat(_fullheight, \"px;\")\n      }),\n          _ruler_bg = $(\"<canvas class=\\\"\".concat(PREFIX, \"ruler-bg-\").concat(position, \"\\\" width=\\\"\").concat(_fullwidth, \"\\\" height=\\\"\").concat(_fullheight, \"\\\"></canvas>\")),\n          _ruler_body = $('<div></div>', {\n        class: \"\".concat(PREFIX, \"ruler-content-\").concat(position)\n      }),\n          _finalLines = 0,\n          ctx_ruler = _ruler_bg[0].getContext('2d'); //console.log( grids, size_per_grid, scale, begin, min_scale, ruler, position, ruler_line, line_height, ctx_ruler.canvas.width, ctx_ruler.canvas.height )\n      // Draw background of ruler\n\n\n      ctx_ruler.fillStyle = background;\n      ctx_ruler.fillRect(0, 0, ctx_ruler.canvas.width, ctx_ruler.canvas.height); // Draw stroke of ruler\n\n      ctx_ruler.strokeStyle = 'rgba( 51, 51, 51, 0.1 )';\n      ctx_ruler.lineWidth = 1;\n      ctx_ruler.filter = 'url(#crisp)';\n      ruler_line.some(function (line_scale, idx) {\n        if (/^(quarter|half)-?(|hour)$/i.test(line_scale)) {\n          return true; // break\n        }\n\n        ctx_ruler.beginPath(); // Draw rows\n        //let _line_x = position === 'top' ? 0 : ctx_ruler.canvas.width,\n\n        var _line_y = position === 'top' ? line_height * (idx + 1) - 0.5 : line_height * idx + 0.5;\n\n        ctx_ruler.moveTo(0, _line_y);\n        ctx_ruler.lineTo(ctx_ruler.canvas.width, _line_y); // Draw cols\n\n        var _line_grids = null,\n            _grid_x = 0,\n            _correction = -1.5;\n\n        if (/^(year|month)s?$/i.test(_opts.scale)) {\n          // For scales where the value of quantity per unit is variable length (:> 単位あたりの量の値が可変長であるスケールの場合\n          _line_grids = _this5._filterVariableScale(line_scale);\n\n          var _arr3 = Object.keys(_line_grids);\n\n          for (var _i5 = 0; _i5 < _arr3.length; _i5++) {\n            var _key = _arr3[_i5];\n            _grid_x += _this5.numRound(_line_grids[_key], 2);\n            ctx_ruler.moveTo(_grid_x + _correction, position === 'top' ? _line_y - line_height : _line_y);\n            ctx_ruler.lineTo(_grid_x + _correction, position === 'top' ? _line_y : _line_y + line_height);\n          }\n        } else {\n          // In case of fixed length scale (:> 固定長スケールの場合\n          _line_grids = _this5._getGridsPerScale(line_scale);\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = _line_grids[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var _val = _step.value;\n\n              if (_this5.is_empty(_val) || _val >= _props.grids) {\n                break;\n              }\n\n              var _grid_width = _val * _props.scaleSize;\n\n              _grid_x += _grid_width;\n\n              if (Math.ceil(_grid_x) - _correction >= ctx_ruler.canvas.width) {\n                break;\n              }\n\n              ctx_ruler.moveTo(_grid_x + _correction, position === 'top' ? _line_y - line_height : _line_y);\n              ctx_ruler.lineTo(_grid_x + _correction, position === 'top' ? _line_y : _line_y + line_height);\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n\n        ctx_ruler.closePath();\n        ctx_ruler.stroke();\n\n        _ruler_body.append(_this5._createRulerContent(_line_grids, line_scale, ruler_opts));\n\n        _finalLines++;\n      });\n\n      if (ruler_line.length != _finalLines) {\n        _ruler.css('height', \"\".concat(_finalLines * line_height, \"px\"));\n      }\n\n      return _ruler.append(_ruler_bg).append(_ruler_body);\n    }\n    /*\r\n     * @private: Filter to aggregate the grid width of the variable length scale (:> 可変長スケールのグリッド幅を集約するフィルタ\r\n     */\n\n  }, {\n    key: \"_filterVariableScale\",\n    value: function _filterVariableScale(target_scale) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _bc = /^years?$/i.test(_opts.scale) ? 365 : 30,\n          scales = _props.variableScale,\n          retObj = {};\n\n      var _arr4 = Object.keys(scales);\n\n      for (var _i6 = 0; _i6 < _arr4.length; _i6++) {\n        var _dt = _arr4[_i6];\n\n        var _days = scales[_dt],\n            grid_size = this.numRound(_days * _props.scaleSize / _bc, 2),\n            _newKey = null,\n            _arr = void 0,\n            _temp = void 0; //console.log( '!_filterVariableScale:', _dt, this.getCorrectDatetime( _dt ).getFullYear(), _days )\n\n\n        switch (true) {\n          case /^millenniums?|millennia$/i.test(target_scale):\n            _newKey = Math.ceil(this.getCorrectDatetime(_dt).getFullYear() / 1000);\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^century$/i.test(target_scale):\n            _newKey = Math.ceil(this.getCorrectDatetime(_dt).getFullYear() / 100);\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^dec(ade|ennium)$/i.test(target_scale):\n            _newKey = Math.ceil(this.getCorrectDatetime(_dt).getFullYear() / 10);\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^lustrum$/i.test(target_scale):\n            _newKey = Math.ceil(this.getCorrectDatetime(_dt).getFullYear() / 5);\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^years?$/i.test(target_scale):\n            _newKey = \"\".concat(this.getCorrectDatetime(_dt).getFullYear());\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^months?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1)] = grid_size;\n            break;\n\n          case /^weeks?$/i.test(target_scale):\n            _arr = _dt.split(',');\n            _temp = this.getWeek(_arr[0]);\n            retObj[\"\".concat(this.getCorrectDatetime(_arr[0]).getFullYear(), \",\").concat(_temp)] = grid_size;\n            break;\n\n          case /^weekdays?$/i.test(target_scale):\n            _arr = _dt.split(',');\n            _temp = this.getCorrectDatetime(_arr[0]).getDay();\n            retObj[\"\".concat(this.getCorrectDatetime(_arr[0]).getFullYear(), \"/\").concat(this.getCorrectDatetime(_arr[0]).getMonth() + 1, \"/1,\").concat(_temp)] = grid_size;\n            break;\n\n          case /^days?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1, \"/1\")] = grid_size;\n            break;\n\n          case /^hours?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1, \"/1 0\")] = grid_size;\n            break;\n\n          case /^minutes?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1, \"/1 0:00\")] = grid_size;\n            break;\n\n          case /^seconds?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1, \"/1 0:00:00\")] = grid_size;\n            break;\n\n          default:\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1)] = grid_size;\n            break;\n        }\n      }\n\n      return retObj;\n    }\n    /*\r\n     * @private: Get the grid number per scale (for fixed length scale) (:> スケールごとのグリッド数を取得する（固定長スケール用）\r\n     */\n\n  }, {\n    key: \"_getGridsPerScale\",\n    value: function _getGridsPerScale(target_scale) {\n      //let _opts        = this._config,\n      var _props = this._instanceProps,\n          _scopes = [],\n          _scale_grids = {},\n          _sep = '/';\n\n      for (var i = 0; i < _props.grids; i++) {\n        var _tmp = new Date(_props.begin + i * _props.scale),\n            //let _tmp = this.getCorrectDatetime( _props.begin + ( i * _props.scale ) ),\n        _y = _tmp.getFullYear(),\n            _mil = Math.ceil(_y / 1000),\n            _cen = Math.ceil(_y / 100),\n            _dec = Math.ceil(_y / 10),\n            _lus = Math.ceil(_y / 5),\n            _m = _tmp.getMonth() + 1,\n            _wd = _tmp.getDay(),\n            // 0 = Sun, ... 6 = Sat\n        _d = _tmp.getDate(),\n            _w = this.getWeek(\"\".concat(_y, \"/\").concat(_m, \"/\").concat(_d)),\n            _h = _tmp.getHours(),\n            _min = _tmp.getMinutes(),\n            _s = _tmp.getSeconds();\n\n        _scopes.push({\n          millennium: _mil,\n          century: _cen,\n          decade: _dec,\n          lustrum: _lus,\n          year: _y,\n          month: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep, \"1\"),\n          week: \"\".concat(_y, \",\").concat(_w),\n          weekday: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d, \",\").concat(_wd),\n          day: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d),\n          hour: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d, \" \").concat(_h),\n          minute: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d, \" \").concat(_h, \":\").concat(_min),\n          second: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d, \" \").concat(_h, \":\").concat(_min, \":\").concat(_s),\n          datetime: _tmp.toString()\n        });\n      }\n\n      _scopes.forEach(function (_scope) {\n        //console.log( _scope[target_scale], idx );\n        if (!_scale_grids[_scope[target_scale]]) {\n          _scale_grids[_scope[target_scale]] = 1;\n        } else {\n          _scale_grids[_scope[target_scale]]++;\n        }\n      }); //console.log( '!_getGridsPerScale:', target_scale, _scale_grids )\n\n\n      return this.toIterableObject(_scale_grids);\n    }\n    /*\r\n     * @private: Create the content of ruler of the timeline (:> タイムラインの目盛本文を作成する\r\n     */\n\n  }, {\n    key: \"_createRulerContent\",\n    value: function _createRulerContent(_line_grids, line_scale, ruler) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          line_height = this.supplement(Default.ruler.top.height, ruler.height),\n          font_size = this.supplement(Default.ruler.top.fontSize, ruler.fontSize),\n          text_color = this.supplement(Default.ruler.top.color, ruler.color),\n          locale = this.supplement(Default.ruler.top.locale, ruler.locale, this.validateString),\n          format = this.supplement(Default.ruler.top.format, ruler.format, this.validateObject),\n          _ruler_lines = $('<div></div>', {\n        class: ClassName.TIMELINE_RULER_LINES,\n        style: \"width:100%;height:\".concat(line_height, \"px;\")\n      });\n\n      var _arr5 = Object.keys(_line_grids);\n\n      for (var _i7 = 0; _i7 < _arr5.length; _i7++) {\n        var _key = _arr5[_i7];\n\n        var _item_width = /^(year|month)s?$/i.test(_opts.scale) ? _line_grids[_key] : _line_grids[_key] * _props.scaleSize,\n            _line = $('<div></div>', {\n          class: ClassName.TIMELINE_RULER_ITEM,\n          style: \"width:\".concat(_item_width, \"px;height:\").concat(line_height, \"px;line-height:\").concat(line_height, \"px;font-size:\").concat(font_size, \"px;color:\").concat(text_color, \";\")\n        }),\n            _ruler_string = this.getLocaleString(_key, line_scale, locale, format),\n            _data_ruler_item = ''; //console.log( '!_createRulerContent:', _key, _line_grids[_key], line_scale, locale, format, _item_width, _ruler_string )\n\n\n        _data_ruler_item = \"\".concat(line_scale, \"-\").concat(_data_ruler_item === '' ? String(_key) : _data_ruler_item);\n\n        _line.attr('data-ruler-item', _data_ruler_item).html(_ruler_string);\n\n        if (_item_width > this.strWidth(_ruler_string)) {\n          // Adjust position of ruler item string\n          //console.log( _item_width, _ruler_string, _ruler_string.length, this.strWidth( _ruler_string ), $(this._element).width() )\n          if (_item_width > $(this._element).width()) {\n            _line.addClass(ClassName.RULER_ITEM_ALIGN_LEFT);\n          }\n        }\n\n        _ruler_lines.append(_line).attr('data-ruler-scope', line_scale);\n      }\n\n      return _ruler_lines;\n    }\n    /*\r\n     * @private: Create the side indexes of the timeline (:> タイムラインのサイド・インデックスを作成する\r\n     */\n\n  }, {\n    key: \"_createSideIndex\",\n    value: function _createSideIndex(margin) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _sticky = this.supplement(Default.sidebar.sticky, _opts.sidebar.sticky),\n          _overlay = this.supplement(Default.sidebar.overlay, _opts.sidebar.overlay),\n          _sbList = this.supplement(Default.sidebar.list, _opts.sidebar.list),\n          _wrapper = $('<div></div>', {\n        class: ClassName.TIMELINE_SIDEBAR\n      }),\n          _margin = $('<div></div>', {\n        class: ClassName.TIMELINE_SIDEBAR_MARGIN\n      }),\n          _list = $('<div></div>', {\n        class: ClassName.TIMELINE_SIDEBAR_ITEM\n      }),\n          _c = 0.5;\n\n      if (_sticky) {\n        _wrapper.addClass(ClassName.STICKY_LEFT);\n      }\n\n      if (_overlay) {\n        _list.addClass(ClassName.OVERLAY);\n      } //_wrapper.css( 'margin-top', margin.top + 'px' ).css( 'margin-bottom', margin.bottom + 'px' )\n\n\n      if (margin.top > 0) {\n        _wrapper.prepend(_margin.clone().css('height', \"\".concat(margin.top + 1, \"px\")));\n      }\n\n      for (var i = 0; i < _props.rows; i++) {\n        var _item = _list.clone().html(_sbList[i]);\n\n        _wrapper.append(_item);\n      }\n\n      _wrapper.find(Selector.TIMELINE_SIDEBAR_ITEM).css('height', \"\".concat(_props.rowSize + _c, \"px\")).css('line-height', \"\".concat(_props.rowSize + _c, \"px\"));\n\n      if (margin.bottom > 0) {\n        _wrapper.append(_margin.clone().css('height', \"\".concat(margin.bottom + 1, \"px\")));\n      }\n\n      return _wrapper;\n    }\n    /*\r\n     * @private: Create the footer of the timeline (:> タイムラインのフッターを作成する\r\n     */\n\n  }, {\n    key: \"_createFooter\",\n    value: function _createFooter() {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _display = this.supplement(Default.footer.display, _opts.footer.display),\n          _content = this.supplement(null, _opts.footer.content),\n          _range = this.supplement(Default.footer.range, _opts.footer.range),\n          _locale = this.supplement(Default.footer.locale, _opts.footer.locale),\n          _format = this.supplement(Default.footer.format, _opts.footer.format),\n          _begin = this.supplement(null, _props.begin),\n          _end = this.supplement(null, _props.end),\n          _tl_footer = $('<div></div>', {\n        class: ClassName.TIMELINE_FOOTER\n      });\n\n      if (_range) {\n        if (_begin && _end) {\n          var _meta = \"\".concat(new Date(_begin).toLocaleString(_locale, _format), \"<span class=\\\"\").concat(ClassName.RANGE_SPAN, \"\\\"></span>\").concat(new Date(_end).toLocaleString(_locale, _format)); //let _meta = this.getCorrectDatetime( _begin ).toLocaleString( _locale, _format ) +'<span class=\"jqtl-range-span\"></span>'+ this.getCorrectDatetime( _end ).toLocaleString( _locale, _format )\n\n\n          _tl_footer.append(\"<div class=\\\"\".concat(ClassName.RANGE_META, \" \").concat(ClassName.ALIGN_SELF_RIGHT, \"\\\">\").concat(_meta, \"</div>\"));\n        }\n      }\n\n      if (_content) {\n        _tl_footer.append(\"<div class=\\\"\".concat(ClassName.TIMELINE_FOOTER_CONTENT, \"\\\">\").concat(_content, \"</div>\"));\n      }\n\n      if (!_display) {\n        _tl_footer.addClass(ClassName.HIDE);\n      }\n\n      return _tl_footer;\n    }\n    /*\r\n     * @private: Acquire the difference between two dates with the specified scale value (:> 2つの日付の差分を指定したスケール値で取得する\r\n     */\n\n  }, {\n    key: \"_diffDate\",\n    value: function _diffDate(date1, date2) {\n      var scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'millisecond';\n      var absval = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      //let _opts  = this._config,\n      var _dt1 = this.supplement(null, date1),\n          _dt2 = this.supplement(null, date2),\n          diffMS = 0,\n          retval = false,\n          lastDayOfMonth = function lastDayOfMonth(dateObj) {\n        var _tmp = new Date(dateObj.getFullYear(), dateObj.getMonth() + 1, 1);\n\n        _tmp.setTime(_tmp.getTime() - 1);\n\n        return _tmp.getDate();\n      },\n          isLeapYear = function isLeapYear(dateObj) {\n        var _tmp = new Date(dateObj.getFullYear(), 0, 1),\n            sum = 0;\n\n        for (var i = 0; i < 12; i++) {\n          _tmp.setMonth(i);\n\n          sum += lastDayOfMonth(_tmp);\n        }\n\n        return sum == 365 ? false : true;\n      };\n\n      if (!_dt1 || !_dt2) {\n        console.warn('Cannot parse date because invalid format or undefined.');\n        return false;\n      }\n\n      diffMS = _dt2 - _dt1;\n\n      if (absval) {\n        diffMS = Math.abs(diffMS);\n      }\n\n      var _bd = new Date(_dt1),\n          _ed = new Date(_dt2),\n          _dy = _ed.getFullYear() - _bd.getFullYear(),\n          _m = {};\n\n      switch (true) {\n        case /^years?$/i.test(scale):\n          if (_dy > 0) {\n            for (var i = 0; i <= _dy; i++) {\n              var _cd = new Date(_bd.getFullYear() + i, 0, 1);\n\n              _m[\"\".concat(_bd.getFullYear() + i)] = isLeapYear(_cd) ? 366 : 365;\n            }\n          } else {\n            _m[\"\".concat(_bd.getFullYear())] = isLeapYear(_bd) ? 366 : 365;\n          }\n\n          retval = _m;\n          break;\n\n        case /^months?$/i.test(scale):\n          if (_dy > 0) {\n            for (var _i8 = _bd.getMonth(); _i8 < 12; _i8++) {\n              var _cd2 = new Date(_bd.getFullYear(), _i8, 1);\n\n              _m[\"\".concat(_bd.getFullYear(), \"/\").concat(_i8 + 1)] = lastDayOfMonth(_cd2);\n            }\n\n            if (_dy > 1) {\n              for (var y = 1; y < _dy; y++) {\n                for (var _i9 = 0; _i9 < 12; _i9++) {\n                  var _cd3 = new Date(_bd.getFullYear() + y, _i9, 1);\n\n                  _m[\"\".concat(_bd.getFullYear() + y, \"/\").concat(_i9 + 1)] = lastDayOfMonth(_cd3);\n                }\n              }\n            }\n\n            for (var _i10 = 0; _i10 <= _ed.getMonth(); _i10++) {\n              var _cd4 = new Date(_ed.getFullYear(), _i10, 1);\n\n              _m[\"\".concat(_ed.getFullYear(), \"/\").concat(_i10 + 1)] = lastDayOfMonth(_cd4);\n            }\n          } else {\n            for (var _i11 = _bd.getMonth(); _i11 <= _ed.getMonth(); _i11++) {\n              var _cd5 = new Date(_bd.getFullYear(), _i11, 1);\n\n              _m[\"\".concat(_bd.getFullYear(), \"/\").concat(_i11 + 1)] = lastDayOfMonth(_cd5);\n            }\n          }\n\n          retval = _m;\n          break;\n\n        case /^weeks?$/i.test(scale):\n          retval = Math.ceil(diffMS / (7 * 24 * 60 * 60 * 1000));\n          break;\n\n        case /^(|week)days?$/i.test(scale):\n          retval = Math.ceil(diffMS / (24 * 60 * 60 * 1000));\n          break;\n\n        case /^hours?$/i.test(scale):\n          retval = Math.ceil(diffMS / (60 * 60 * 1000));\n          break;\n\n        case /^minutes?$/i.test(scale):\n          retval = Math.ceil(diffMS / (60 * 1000));\n          break;\n\n        case /^seconds?$/i.test(scale):\n          retval = Math.ceil(diffMS / 1000);\n          break;\n\n        default:\n          retval = diffMS;\n          break;\n      } //console.log( '!_diffDate:', retval )\n\n\n      return retval;\n    }\n    /*\r\n     * @private: Load all enabled events markupped on target element to the timeline object (:> 対象要素にマークアップされたすべての有効なイベントをタイムラインにロードする\r\n     */\n\n  }, {\n    key: \"_loadEvent\",\n    value: function _loadEvent() {\n      this._debug('_loadEvent');\n\n      var _that = this,\n          _elem = this._element,\n          _event_list = $(_elem).find(Selector.DEFAULT_EVENTS),\n          _cnt = 0,\n          events = [],\n          lastEventId = 0;\n\n      _event_list.children().each(function () {\n        var _attr = $(this).attr('data-timeline-node');\n\n        if (typeof _attr !== 'undefined' && _attr !== false) {\n          _cnt++;\n        }\n      });\n\n      if (_event_list.length == 0 || _cnt == 0) {\n        this._debug('Enable event does not exist.');\n      } // Register Event Data\n\n\n      _event_list.children().each(function () {\n        var _evt_params = _that._getPluggableParams($(this).attr('data-timeline-node')),\n            _one_event = {};\n\n        if (!_that.is_empty(_evt_params)) {\n          _one_event = _that._registerEventData(this, _evt_params);\n          events.push(_one_event);\n          lastEventId = Math.max(lastEventId, parseInt(_one_event.eventId, 10));\n        }\n      }); // Set event id with auto increment (:> イベントIDを自動採番\n\n\n      var cacheIds = []; // for checking duplication of id (:> IDの重複チェック用\n\n      events.forEach(function (_evt, _i, _this) {\n        var _chkId = parseInt(_this[_i].eventId, 10);\n\n        if (_chkId == 0 || cacheIds.includes(_chkId)) {\n          lastEventId++;\n          _this[_i].eventId = lastEventId;\n        } else {\n          _this[_i].eventId = _chkId;\n        }\n\n        cacheIds.push(_this[_i].eventId);\n      });\n      this._isCached = this._saveToCache(events);\n    }\n    /*\r\n     * @private: Register one event data as object (:> イベントデータをオブジェクトとして登録する\r\n     */\n\n  }, {\n    key: \"_registerEventData\",\n    value: function _registerEventData(event_element, params) {\n      var _this6 = this;\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          new_event = _objectSpread({}, EventParams, {\n        uid: this.generateUniqueID(),\n        label: $(event_element).html()\n      }),\n          _relation = {},\n          _x,\n          _w,\n          _c; //, _pointSize\n      //console.log( '!_registerEventData:', _opts, params )\n\n\n      if (params.hasOwnProperty('start')) {\n        _x = this._getCoordinateX(params.start);\n        new_event.x = this.numRound(_x, 2);\n\n        if (params.hasOwnProperty('end')) {\n          _x = this._getCoordinateX(params.end);\n          _w = _x - new_event.x;\n          new_event.width = this.numRound(_w, 2);\n\n          if (_opts.eventMeta.display) {\n            if (this.is_empty(_opts.eventMeta.content) && !params.hasOwnProperty('rangeMeta')) {\n              //console.log( '!_registerEventData:', _opts.eventMeta.locale, _opts.eventMeta.format, _opts.scale, params )\n              new_event.rangeMeta += this.getLocaleString(params.start, _opts.eventMeta.scale, _opts.eventMeta.locale, _opts.eventMeta.format);\n              new_event.rangeMeta += \" - \".concat(this.getLocaleString(params.end, _opts.eventMeta.scale, _opts.eventMeta.locale, _opts.eventMeta.format));\n            } else {\n              new_event.rangeMeta = _opts.eventMeta.content;\n            }\n          }\n        } else {\n          new_event.width = 0;\n        } //console.log( 'getX:', _x, 'getW:', _w, event_element )\n\n\n        if (params.hasOwnProperty('row')) {\n          _c = Math.floor(params.row / 2);\n          new_event.y = (params.row - 1) * _opts.rowHeight + new_event.margin + _c;\n        }\n\n        Object.keys(new_event).forEach(function (_prop) {\n          switch (true) {\n            case /^eventId$/i.test(_prop):\n              if (params.hasOwnProperty('id') && _this6.is_empty(new_event.eventId)) {\n                new_event.eventId = parseInt(params.id, 10);\n              } else {\n                new_event.eventId = parseInt(params[_prop], 10) || 0;\n              }\n\n              break;\n\n            case /^(label|content)$/i.test(_prop):\n              if (params.hasOwnProperty(_prop) && !_this6.is_empty(params[_prop])) {\n                new_event[_prop] = params[_prop];\n              } // Override the children element to label or content setting\n\n\n              if ($(event_element).children(\".event-\".concat(_prop)).length > 0) {\n                new_event[_prop] = $(event_element).children(\".event-\".concat(_prop)).html();\n              } //console.log( '!_registerEventData:', _prop, params[_prop], new_event[_prop] )\n\n\n              break;\n\n            case /^relation$/i.test(_prop):\n              // For drawing the relation line\n              if (/^point(|er)$/i.test(_opts.type)) {\n                //let _pointSize  = this._getPointerSize( new_event.size, new_event.margin )\n                _relation.x = _this6.numRound(new_event.x, 2);\n                _relation.y = _this6.numRound(_props.rowSize * ((params.row || 1) - 1) + _props.rowSize / 2, 2); //console.log( '!_registerEventData:', params, new_event.x, new_event.y, _pointSize, _relation )\n\n                new_event[_prop] = _objectSpread({}, params[_prop], _relation);\n              }\n\n              break;\n\n            default:\n              if (params.hasOwnProperty(_prop) && !_this6.is_empty(params[_prop])) {\n                new_event[_prop] = params[_prop];\n              }\n\n              break;\n          }\n        });\n      } //console.log( '!_registerEventData:', new_event )\n\n\n      return new_event;\n    }\n    /*\r\n     * @private: Get the coordinate X on the timeline of any date (:> 任意の日付のタイムライン上のX座標（横軸座標）を取得する\r\n     */\n\n  }, {\n    key: \"_getCoordinateX\",\n    value: function _getCoordinateX(date) {\n      //let _opts  = this._config,\n      var _props = this._instanceProps,\n          _date = this.supplement(null, this._getPluggableDatetime(date)),\n          coordinate_x = 0;\n\n      if (_date) {\n        if (_date - _props.begin >= 0 && _props.end - _date >= 0) {\n          // When the given date is within the range of timeline begin and end (:> 指定された日付がタイムラインの開始と終了の範囲内にある場合\n          coordinate_x = Math.abs(_date - _props.begin) / _props.scale * _props.scaleSize;\n        } else {\n          // When the given date is out of timeline range (:> 指定された日付がタイムラインの範囲外にある場合\n          coordinate_x = (_date - _props.begin) / _props.scale * _props.scaleSize;\n        }\n      } else {\n        console.warn('Cannot parse date because invalid format or undefined.');\n      }\n\n      return coordinate_x;\n    }\n    /*\r\n     * @private: Cache the event data to the web storage (:> イベントデータをWEBストレージへキャッシュ\r\n     */\n\n  }, {\n    key: \"_saveToCache\",\n    value: function _saveToCache(data) {\n      var strageEngine = /^local(|Storage)$/i.test(this._config.storage) ? 'localStorage' : 'sessionStorage',\n          is_available = strageEngine in window && (strageEngine === 'localStorage' ? window.localStorage : window.sessionStorage) !== null;\n\n      if (is_available) {\n        if (strageEngine === 'localStorage') {\n          localStorage.setItem(this._selector, JSON.stringify(data));\n        } else {\n          sessionStorage.setItem(this._selector, JSON.stringify(data));\n        }\n\n        return true;\n      } else {\n        throw new TypeError(\"The storage named \\\"\".concat(strageEngine, \"\\\" can not be available.\"));\n      }\n    }\n    /*\r\n     * @private: Load the cached event data from the web storage (:> キャッシュされたイベントデータをWEBストレージから読み込む\r\n     */\n\n  }, {\n    key: \"_loadToCache\",\n    value: function _loadToCache() {\n      var strageEngine = /^local(|Storage)$/i.test(this._config.storage) ? 'localStorage' : 'sessionStorage',\n          is_available = strageEngine in window && (strageEngine === 'localStorage' ? window.localStorage : window.sessionStorage) !== null,\n          data = null;\n\n      if (is_available) {\n        if (strageEngine === 'localStorage') {\n          data = JSON.parse(localStorage.getItem(this._selector));\n        } else {\n          data = JSON.parse(sessionStorage.getItem(this._selector));\n        }\n      } else {\n        throw new TypeError(\"The storage named \\\"\".concat(strageEngine, \"\\\" can not be available.\"));\n      }\n\n      return data;\n    }\n    /*\r\n     * @private: Remove the cache data on the web storage (:> WEBストレージ上のキャッシュデータを削除する\r\n     */\n\n  }, {\n    key: \"_removeCache\",\n    value: function _removeCache() {\n      var strageEngine = /^local(|Storage)$/i.test(this._config.storage) ? 'localStorage' : 'sessionStorage',\n          is_available = strageEngine in window && (strageEngine === 'localStorage' ? window.localStorage : window.sessionStorage) !== null;\n\n      if (is_available) {\n        if (strageEngine === 'localStorage') {\n          localStorage.removeItem(this._selector);\n        } else {\n          sessionStorage.removeItem(this._selector);\n        }\n      } else {\n        throw new TypeError(\"The storage named \\\"\".concat(strageEngine, \"\\\" can not be available.\"));\n      }\n    }\n    /*\r\n     * @private: Controller method to place event data on timeline\r\n     */\n\n  }, {\n    key: \"_placeEvent\",\n    value: function _placeEvent() {\n      var _this7 = this;\n\n      this._debug('_placeEvent');\n\n      if (!this._isCached) {\n        return;\n      }\n\n      var _elem = this._element,\n          _opts = this._config,\n          _evt_container = $(_elem).find(Selector.TIMELINE_EVENTS),\n          _relation_lines = $(_elem).find(Selector.TIMELINE_RELATION_LINES),\n          events = this._loadToCache();\n\n      if (events.length > 0) {\n        _evt_container.empty();\n\n        events.forEach(function (_evt) {\n          var _evt_elem = _this7._createEventNode(_evt);\n\n          if (_evt_elem) {\n            _evt_container.append(_evt_elem);\n          }\n        });\n      }\n\n      if (/^point(|er)$/i.test(_opts.type)) {\n        this._drawRelationLine(events);\n      } // console.log( '!_placeEvent:', _opts )\n\n\n      this.sleep(1).then(function () {\n        _this7.hideLoader();\n\n        _evt_container.fadeIn('fast', function () {\n          _relation_lines.fadeIn('fast');\n        });\n      });\n    }\n    /*\r\n     * @private: Create an event element on the timeline (:> タイムライン上にイベント要素を作成する\r\n     */\n\n  }, {\n    key: \"_createEventNode\",\n    value: function _createEventNode(params) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _evt_elem = $('<div></div>', {\n        class: ClassName.TIMELINE_EVENT_NODE,\n        id: \"evt-\".concat(params.eventId),\n        css: {\n          left: \"\".concat(params.x, \"px\"),\n          top: \"\".concat(params.y, \"px\"),\n          width: \"\".concat(params.width, \"px\"),\n          height: \"\".concat(params.height, \"px\"),\n          color: this.hexToRgbA(params.color),\n          backgroundColor: this.hexToRgbA(params.bgColor)\n        },\n        html: \"<div class=\\\"\".concat(ClassName.TIMELINE_EVENT_LABEL, \"\\\">\").concat(params.label, \"</div>\")\n      }); //console.log( '!_createEventNode:', params )\n      // Whether this event is within the display range of the timeline (:> タイムライン表示範囲内のイベントかどうか\n      // For events excluded, set the width to -1 (:> 除外イベントは幅を -1 に設定する\n\n\n      if (params.x >= 0) {\n        // The event start datetime is over the start datetime of the timeline (:> イベント始点がタイムラインの始点以上\n        if (params.x <= _props.fullwidth) {\n          // The event start datetime is less than or equal to the timeline end datetime (:> イベントの始点がタイムラインの終点以下\n          if (params.x + params.width <= _props.fullwidth) {// The event end datetime is less than before the timeline end datetime (regular event) (:> イベント終点がタイムラインの終点以下（通常イベント）\n            // OK\n          } else {\n            // The event end datetime is after the timeline end datetime (event exceeded end datetime) (:> イベント終点がタイムラインの終点より後（終点超過イベント）\n            params.width = _props.fullwidth - params.x;\n          }\n        } else {\n          // The event start datetime is after the timeline end datetime (exclude event) (:> イベント始点がタイムラインの終点より後（除外イベント）\n          params.width = -1;\n        }\n      } else {\n        // The event start datetime is before the timeline start datetime (:> イベント始点がタイムラインの始点より前\n        if (/^point(|er)$/i.test(_opts.type)) {\n          // In the case of \"point\" type, that is an exclude event (:> ポインター型の場合は除外イベント\n          params.width = -1;\n        } else {\n          // The case of \"bar\" type\n          if (params.x + params.width <= 0) {\n            // The event end datetime is less than before the timeline start datetime (exclude event) (:> イベント終点がタイムラインの始点より前（除外イベント）\n            params.width = -1;\n          } else {\n            // The event end datetime is after the timeline start datetime (:> イベント終点がタイムラインの始点より後\n            if (params.x + params.width <= _props.fullwidth) {\n              // The event end datetime is less than or equal the timeline end datetime (event exceeded start datetime) (:> イベント終点がタイムラインの終点以下（始点超過イベント）\n              params.width = Math.abs(params.x + params.width);\n              params.x = 0;\n            } else {\n              // The event end datetime is after the timeline end datetime (event exceeded both start and end datetime) (:> イベント終点がタイムラインの終点より後（始点・終点ともに超過イベント）\n              params.width = _props.fullwidth;\n              params.x = 0;\n            }\n          }\n        }\n      } //console.log( 'x:', params.x, 'w:', params.width, 'x-end:', Math.abs( params.x ) + params.width, 'fw:', _props.fullwidth, 'ps:', params.size )\n\n\n      if (/^point(|er)$/i.test(_opts.type)) {\n        if (params.width < 0) {\n          return null;\n        }\n\n        var _pointSize = this._getPointerSize(params.size, params.margin),\n            _shiftX = this.numRound(params.x - _pointSize / 2, 2),\n            _shiftY = this.numRound(params.y + (params.height - _pointSize) / 2, 2); //console.log( '!_createEventNode:', params, _pointSize, _shiftX, _shiftY )\n\n\n        _evt_elem.addClass(ClassName.VIEWER_EVENT_TYPE_POINTER).css('border-color', params.bdColor).css('left', \"\".concat(_shiftX, \"px\")).css('top', \"\".concat(_shiftY, \"px\")).css('width', \"\".concat(_pointSize, \"px\")).css('height', \"\".concat(_pointSize, \"px\")).attr('data-base-size', _pointSize).attr('data-base-left', _shiftX).attr('data-base-top', _shiftY);\n      } else {\n        if (params.width < 1) {\n          return null;\n        }\n\n        _evt_elem.css('left', \"\".concat(params.x, \"px\")).css('width', \"\".concat(params.width, \"px\"));\n      }\n\n      _evt_elem.attr('data-uid', params.uid);\n\n      if (!this.is_empty(params.image)) {\n        if (/^point(|er)$/i.test(_opts.type)) {\n          _evt_elem.css('background-image', \"url(\".concat(params.image, \")\"));\n        } else {\n          var _imgSize = params.height - params.margin * 2;\n\n          _evt_elem.prepend(\"<img src=\\\"\".concat(params.image, \"\\\" class=\\\"\").concat(ClassName.TIMELINE_EVENT_THUMBNAIL, \"\\\" width=\\\"\").concat(_imgSize, \"\\\" height=\\\"\").concat(_imgSize, \"\\\" />\"));\n        }\n      }\n\n      if (/^bar$/i.test(_opts.type) && _opts.eventMeta.display) {\n        //console.log( '!_createEventNode:', params )\n        params.extend.meta = params.rangeMeta;\n      }\n\n      if (!this.is_empty(params.extend)) {\n        var _arr6 = Object.keys(params.extend);\n\n        for (var _i12 = 0; _i12 < _arr6.length; _i12++) {\n          var _prop = _arr6[_i12];\n\n          _evt_elem.attr(\"data-\".concat(_prop), params.extend[_prop]);\n\n          if (_prop === 'toggle' && ['popover', 'tooltip'].includes(params.extend[_prop])) {\n            // for bootstrap's popover or tooltip\n            _evt_elem.attr('title', params.label);\n\n            if (!params.extend.hasOwnProperty('content')) {\n              _evt_elem.attr('data-content', params.content);\n            }\n          }\n        }\n      }\n\n      if (!this.is_empty(params.callback)) {\n        _evt_elem.attr('data-callback', params.callback);\n      }\n\n      return _evt_elem;\n    }\n    /*\r\n     * @private: Retrieve the diameter size (pixel) of pointer (:> ポインタの直径サイズ（ピクセル値）を取得する\r\n     */\n\n  }, {\n    key: \"_getPointerSize\",\n    value: function _getPointerSize(key, margin) {\n      //let _opts  = this._config,\n      var _props = this._instanceProps,\n          _max = Math.min(_props.scaleSize, _props.rowSize) - margin * 2,\n          _size = null;\n\n      switch (true) {\n        case /^large$/i.test(key):\n          _size = Math.max(this.numRound(_max * 0.8, 1), MIN_POINTER_SIZE);\n          break;\n\n        case /^normal$/i.test(key):\n          _size = Math.max(this.numRound(_max / 2, 1), MIN_POINTER_SIZE);\n          break;\n\n        case /^small$/i.test(key):\n          _size = Math.max(this.numRound(_max / 4, 1), MIN_POINTER_SIZE);\n          break;\n\n        default:\n          _size = Math.max(parseInt(key, 10), MIN_POINTER_SIZE);\n      } //console.log( '!_getPointerSize:', _props, key, _max, _size )\n\n\n      return _size;\n    }\n    /*\r\n     * @private: Draw the relation lines (:> 連結線を描画する\r\n     */\n\n  }, {\n    key: \"_drawRelationLine\",\n    value: function _drawRelationLine(events) {\n      var _this8 = this;\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _canvas = $(this._element).find(Selector.TIMELINE_RELATION_LINES),\n          ctx_relations = _canvas[0].getContext('2d'),\n          drawLine = function drawLine(_sx, _sy, _ex, _ey, evt, _ba) {\n        var _curveType = {},\n            _radius = _this8.numRound(Math.min(_props.scaleSize, _props.rowSize) / 2, 2),\n            _subRadius = _this8.numRound(_this8._getPointerSize(evt.size, _opts.marginHeight) / 2, 2); // Defaults\n\n\n        ctx_relations.strokeStyle = EventParams.bdColor;\n        ctx_relations.lineWidth = 2.5;\n        ctx_relations.filter = 'url(#crisp)';\n\n        var _arr7 = Object.keys(evt.relation);\n\n        for (var _i13 = 0; _i13 < _arr7.length; _i13++) {\n          var _key = _arr7[_i13];\n\n          switch (true) {\n            case /^(|line)color$/i.test(_key):\n              ctx_relations.strokeStyle = evt.relation[_key];\n              break;\n\n            case /^(|line)size$/i.test(_key):\n              ctx_relations.lineWidth = parseInt(evt.relation[_key], 10) || 2.5;\n              break;\n\n            case /^curve$/i.test(_key):\n              if (/^(r|l)(t|b),?(r|l)?(t|b)?$/i.test(evt.relation[_key])) {\n                var _tmp = evt.relation[_key].split(',');\n\n                if (_tmp.length == 2) {\n                  _curveType.before = _tmp[0];\n                  _curveType.after = _tmp[1];\n                } else {\n                  _curveType[_ba] = _tmp[0];\n                }\n              } else if (typeof evt.relation[_key] === 'boolean' && evt.relation[_key] || typeof evt.relation[_key] === 'number' && Boolean(evt.relation[_key])) {\n                // Automatically set the necessary linearity type (:> 自動線形判定\n                //console.log( _sx, _sy, _ex, _ey, _radius, _ba, _subRadius )\n                if (_ba === 'before') {\n                  // before: targetEvent[ _ex, _ey ] <---- selfEvent[ _sx, _sy ]\n                  if (_sy > _ey) {\n                    // 連結点が自分より上にある\n                    if (_sx > _ex) {\n                      // 連結点が自分より左にある \"(_ex,_ey)└(_sx,_sy)\" as \"lb\"\n                      _curveType[_ba] = 'lb';\n                    } else if (_sx < _ex) {\n                      // 連結点が自分より右にある \"⊂￣\" as \"lb+lt\"\n                      _curveType[_ba] = 'lb+lt';\n                    } else {\n                      // 連結点が自分の直上 \"│\" to top\n                      _curveType[_ba] = null;\n                    }\n                  } else if (_sy < _ey) {\n                    // 連結点が自分より下にある\n                    if (_sx > _ex) {\n                      // 連結点が自分より左にある \"(_ex,_ey)┌(_sx,_sy)\" as \"lt\"\n                      _curveType[_ba] = 'lt';\n                    } else if (_sx < _ex) {\n                      // 連結点が自分より右にある \"⊂_\" as \"rt+rb\"\n                      _curveType[_ba] = 'lt+lb';\n                    } else {\n                      // 連結点が自分の直下 \"│\" to bottom\n                      _curveType[_ba] = null;\n                    }\n                  } else {\n                    // 連結点が自分と同じ水平上にある（左右どちらか） _sy == _ey; \"─\" to left or right\n                    _curveType[_ba] = null;\n                  }\n                } else if (_ba === 'after') {\n                  // after: selfEvent[ _sx, _sy ] ----> targetEvent[ _ex, _ey ]\n                  if (_sy < _ey) {\n                    // Relational endpoint is located \"under\" self (:> 連結点が自分の下にある\n                    if (_sx < _ex) {\n                      // Then relational endpoint is located \"right\" self (:> 連結点が自分の右にある \"(_sx,_sy)┐(_ex,_ey)\" as \"rt\"\n                      _curveType[_ba] = 'rt';\n                    } else if (_sx > _ex) {\n                      // Then relational endpoint is located \"left\" self (:> 連結点が自分より左にある \"_⊃\" as \"rt+rb\"\n                      _curveType[_ba] = 'rt+rb';\n                    } else {\n                      // Relational endpoint is located \"just under\" self (:> 連結点が自分の直下 \"│\" to bottom\n                      _curveType[_ba] = null;\n                    }\n                  } else if (_sy > _ey) {\n                    // Relational endpoint is located \"above\" self (:> 連結点が自分より上にある\n                    if (_sx < _ex) {\n                      // Then relational endpoint is located \"right\" self (:> 連結点が自分の右にある \"┘\" as \"rb\"\n                      _curveType[_ba] = 'rb';\n                    } else if (_sx > _ex) {\n                      // Then relational endpoint is located \"left\" self (:> 連結点が自分より左にある \"￣⊃\" as \"rb+rt\"\n                      _curveType[_ba] = 'rb+rt';\n                    } else {\n                      // Relational endpoint is located \"just under\" self (:> 連結点が自分の直上 \"│\" to top\n                      _curveType[_ba] = null;\n                    }\n                  } else {\n                    // 連結点が自分と同じ水平上にある（左右どちらか） _sy == _ey; \"─\" to left or right\n                    _curveType[_ba] = null;\n                  }\n                }\n              }\n\n              break;\n          }\n        }\n\n        if (Math.abs(_ey - _sy) > _props.rowSize) {\n          _ey += Math.floor(Math.abs(_ey - _sy) / _props.rowSize);\n        }\n\n        ctx_relations.beginPath();\n\n        if (!_this8.is_empty(_curveType)) {\n          // console.log( '!_drawLine:', _curveType, _sx, _sy, _ex, _ey, _radius )\n          switch (true) {\n            case /^lt$/i.test(_curveType[_ba]):\n              // \"(_ex,_ey)┌(_sx,_sy)\"\n              ctx_relations.moveTo(_sx, _sy);\n\n              if (Math.abs(_sx - _ex) > _radius) {\n                ctx_relations.lineTo(_ex - _radius, _sy); // \"─\"\n              }\n\n              if (Math.abs(_ey - _sy) > _radius) {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _sy + _radius); // \"┌\"\n\n                ctx_relations.lineTo(_ex, _ey); // \"│\"\n              } else {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _ey); // \"┌\"\n              }\n\n              break;\n\n            case /^lb$/i.test(_curveType[_ba]):\n              // \"(_ex,_ey)└(_sx,_sy)\"\n              ctx_relations.moveTo(_sx, _sy);\n\n              if (Math.abs(_sx - _ex) > _radius) {\n                ctx_relations.lineTo(_ex + _radius, _sy); // \"─\"\n              }\n\n              if (Math.abs(_sy - _ey) > _radius) {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _sy - _radius); // \"└\"\n\n                ctx_relations.lineTo(_ex, _ey); // \"│\"\n              } else {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _ey); // \"└\"\n              }\n\n              break;\n\n            case /^rt$/i.test(_curveType[_ba]):\n              // \"(_sx,_sy)┐(_ex,_ey)\"\n              ctx_relations.moveTo(_sx, _sy);\n\n              if (Math.abs(_ex - _sx) > _radius) {\n                ctx_relations.lineTo(_ex - _radius, _sy); // \"─\"\n              }\n\n              if (Math.abs(_ey - _sy) > _radius) {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _sy + _radius); // \"┐\"\n\n                ctx_relations.lineTo(_ex, _ey);\n              } else {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _ey); // \"┐\"\n              }\n\n              break;\n\n            case /^rb$/i.test(_curveType[_ba]):\n              // \"(_sx,_sy)┘(_ex,_ey)\"\n              ctx_relations.moveTo(_sx, _sy);\n\n              if (Math.abs(_ex - _sx) > _radius) {\n                ctx_relations.lineTo(_ex - _radius, _sy); // \"─\"\n              }\n\n              if (Math.abs(_sy - _ey) > _radius) {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _sy - _radius); // \"┘\"\n\n                ctx_relations.lineTo(_ex, _ey);\n              } else {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _ey); // \"┘\"\n              }\n\n              break;\n\n            case /^lt\\+lb$/i.test(_curveType[_ba]): // \"⊂＿\"\n\n            case /^lb\\+lt$/i.test(_curveType[_ba]):\n              // \"⊂￣\"\n              ctx_relations.moveTo(_sx, _sy); //ctx_relations.lineTo( _sx - _subRadius, _sy ) // \"─\"\n\n              ctx_relations.lineTo(_sx - _radius, _sy); // \"─\"\n              //ctx_relations.bezierCurveTo( _sx - _subRadius - _radius, _sy, _sx - _subRadius - _radius, _ey, _sx - _subRadius, _ey ) // \"⊂\"\n\n              ctx_relations.bezierCurveTo(_sx - _radius * 2, _sy, _sx - _radius * 2, _ey, _sx - _radius, _ey); // \"⊂\"\n\n              ctx_relations.lineTo(_ex, _ey); // \"─\"\n\n              break;\n\n            case /^rt\\+rb$/i.test(_curveType[_ba]): // \"＿⊃\"\n\n            case /^rb\\+rt$/i.test(_curveType[_ba]):\n              // \"￣⊃\"\n              ctx_relations.moveTo(_sx, _sy); //ctx_relations.lineTo( _sx + _subRadius, _sy ) // \"─\"\n\n              ctx_relations.lineTo(_sx + _radius, _sy); // \"─\"\n              //ctx_relations.bezierCurveTo( _sx + _subRadius + _radius, _sy, _sx + _subRadius + _radius, _ey, _sx + _subRadius, _ey ) // \"⊃\"\n\n              ctx_relations.bezierCurveTo(_sx + _radius * 2, _sy, _sx + _radius * 2, _ey, _sx + _radius, _ey); // \"⊃\"\n\n              ctx_relations.lineTo(_ex, _ey); // \"─\"\n\n              break;\n          }\n        } else {\n          ctx_relations.moveTo(_sx, _sy);\n          ctx_relations.lineTo(_ex, _ey);\n        } //ctx_relations.closePath()\n\n\n        ctx_relations.stroke();\n      };\n\n      ctx_relations.clearRect(0, 0, _canvas[0].width, _canvas[0].height); //console.log( '!_drawRelationLine:', _props, events, _canvas )\n\n      events.forEach(function (evt) {\n        var _rel = evt.relation,\n            _sx,\n            _sy,\n            _ex,\n            _ey,\n            _targetId,\n            _targetEvent;\n\n        if (_rel.hasOwnProperty('before')) {\n          // before: targetEvent[ _ex, _ey ] <---- selfEvent[ _sx, _sy ]\n          // (:> before: 自分を起点（ _sx, _sy ）として左方向の連結点（ _ex, _ey ）へ向かう描画方式\n          _sx = _rel.x;\n          _sy = _rel.y;\n          _targetId = parseInt(_rel.before, 10);\n\n          if (_targetId < 0) {\n            _ex = 0;\n            _ey = _sy;\n          } else {\n            _targetEvent = events.find(function (_evt) {\n              return parseInt(_evt.eventId, 10) == _targetId;\n            });\n\n            if (!_this8.is_empty(_targetEvent) && _targetEvent.relation) {\n              _ex = _targetEvent.relation.x < 0 ? 0 : _targetEvent.relation.x;\n              _ey = _targetEvent.relation.y;\n            }\n          }\n\n          if (_sx >= 0 && _sy >= 0 && _ex >= 0 && _ey >= 0) {\n            drawLine(_sx, _sy, _ex, _ey, evt, 'before');\n          }\n        }\n\n        if (_rel.hasOwnProperty('after')) {\n          // after: selfEvent[ _sx, _sy ] ----> targetEvent[ _ex, _ey ]\n          // (:> after: 自分を起点（ _sx, _sy ）として右方向の連結点（ _ex, _ey ）へ向かう描画方式\n          _sx = _rel.x;\n          _sy = _rel.y;\n          _targetId = parseInt(_rel.after, 10);\n\n          if (_targetId < 0) {\n            _ex = _props.fullwidth;\n            _ey = _sy;\n          } else {\n            _targetEvent = events.find(function (_evt) {\n              return parseInt(_evt.eventId, 10) == _targetId;\n            });\n\n            if (!_this8.is_empty(_targetEvent) && _targetEvent.relation) {\n              _ex = _targetEvent.relation.x > _props.fullwidth ? _props.fullwidth : _targetEvent.relation.x;\n              _ey = _targetEvent.relation.y;\n            }\n          }\n\n          if (_sx >= 0 && _sy >= 0 && _ex >= 0 && _ey >= 0) {\n            drawLine(_sx, _sy, _ex, _ey, evt, 'after');\n          }\n        }\n      });\n    }\n    /*\r\n     * @private: Retrieve the mapping data that placed current events\r\n     */\n\n  }, {\n    key: \"_mapPlacedEvents\",\n    value: function _mapPlacedEvents() {\n      var _that = this,\n          _tl_events = $(this._element).find(Selector.TIMELINE_EVENTS).children(),\n          _cache = this._loadToCache(),\n          _events = [];\n\n      if (!this._isCached || this.is_empty(_cache)) {\n        return _events;\n      }\n\n      _tl_events.each(function () {\n        var _uid = $(this).data('uid'),\n            _data = null;\n\n        if (_cache) {\n          _data = _cache.find(function (_evt) {\n            return _evt.uid === _uid;\n          }) || null;\n        } else {\n          _data = $(this).data();\n        }\n\n        if (!_that.is_empty(_data)) {\n          _events.push(_data);\n        }\n      }); //console.log( '!_mapPlacedEvents:', _events )\n\n\n      return _events;\n    }\n    /*\r\n     * @private: Event when focus or blur\r\n     */\n\n  }, {\n    key: \"_activeEvent\",\n    value: function _activeEvent(event) {\n      // console.log( '!_activeEvent:', event )\n      var _elem = event.target;\n\n      if ('focusin' === event.type) {\n        $(Selector.TIMELINE_EVENT_NODE).removeClass('active');\n        $(_elem).addClass('active');\n      } else if ('focusout' === event.type) {\n        $(_elem).removeClass('active');\n      }\n    }\n    /*\r\n     * @private: Event when hover on the pointer type event\r\n     */\n\n  }, {\n    key: \"_hoverPointer\",\n    value: function _hoverPointer(event) {\n      var _props = this._instanceProps,\n          _elem = event.target,\n          _base = {\n        left: $(_elem).data('baseLeft'),\n        top: $(_elem).data('baseTop'),\n        width: $(_elem).data('baseSize')\n      },\n          _x = _base.left,\n          _y = _base.top,\n          _w = _base.width,\n          _z = 5; //console.log( '!_hoverPointer:', _props )\n\n      if ('mouseenter' === event.type) {\n        _w = Math.max(this.numRound(_w * 1.2, 'ceil'), Math.min(_props.rowSize, _props.scaleSize));\n        _x = this.numRound(_x - (_w - _base.width) / 2, 2);\n        _y = this.numRound(_y - (_w - _base.width) / 2, 2);\n        _z = 9;\n        $(_elem).trigger(Event.FOCUSIN_EVENT);\n      } else {\n        $(_elem).trigger(Event.FOCUSOUT_EVENT);\n      }\n\n      $(_elem).css('left', \"\".concat(_x, \"px\")).css('top', \"\".concat(_y, \"px\")).css('width', \"\".concat(_w, \"px\")).css('height', \"\".concat(_w, \"px\")).css('z-index', _z);\n    }\n    /*\r\n     * @private: Echo the log of plugin for debugging\r\n     */\n\n  }, {\n    key: \"_debug\",\n    value: function _debug(message) {\n      var throwType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Notice';\n\n      if (!this._config.debug) {\n        return;\n      }\n\n      message = this.supplement(null, message);\n\n      if (message) {\n        var _msg = typeof $(this._element).data(DATA_KEY)[message] !== 'undefined' ? \"Called method \\\"\".concat(message, \"\\\".\") : message,\n            _sty = /^Called method \"/.test(_msg) ? 'font-weight:600;color:blue;' : '',\n            _rst = '';\n\n        if (window.console && window.console.log) {\n          if (throwType === 'Notice') {\n            window.console.log('%c%s%c', _sty, _msg, _rst);\n          } else {\n            throw new Error(\"\".concat(_msg));\n          }\n        }\n      }\n    } // Public\n\n    /*\r\n     * @public: This method is able to call only once after completed an initializing of the plugin\r\n     */\n\n  }, {\n    key: \"initialized\",\n    value: function initialized() {\n      var _message = this._isInitialized ? 'Skipped because method \"initialized\" already has been called once' : 'initialized';\n\n      this._debug(_message);\n\n      var _elem = this._element,\n          _opts = this._config,\n          _args = arguments.length <= 0 ? undefined : arguments[0],\n          callback = _args.length > 0 && typeof _args[0] === 'function' ? _args[0] : null,\n          userdata = _args.length > 1 ? _args.slice(1) : null; // console.log( '!initialized:', callback, userdata )\n\n\n      if (callback && !this._isInitialized) {\n        this._debug('Fired your callback function after initializing this plugin.');\n\n        callback(_elem, _opts, userdata);\n      }\n\n      this._isInitialized = true;\n    }\n    /*\r\n     * @public: Destroy the object to which the plugin is applied\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._debug('destroy');\n\n      $.removeData(this._element, DATA_KEY);\n      $(window, document, this._element).off(EVENT_KEY);\n      $(this._element).remove();\n\n      this._removeCache();\n\n      var _arr8 = Object.keys(this);\n\n      for (var _i14 = 0; _i14 < _arr8.length; _i14++) {\n        var _prop = _arr8[_i14];\n        this[_prop] = null;\n        delete this[_prop];\n      }\n    }\n    /*\r\n     * @public: This method has been deprecated since version 2.0.0\r\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      throw new ReferenceError('This method named \"render\" has been deprecated since version 2.0.0');\n    }\n    /*\r\n     * @public: Show hidden timeline\r\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      this._debug('show');\n\n      var _elem = this._element;\n\n      if (!this._isShown) {\n        $(_elem).removeClass(ClassName.HIDE);\n        this._isShown = true;\n      }\n    }\n    /*\r\n     * @public: Hide shown timeline\r\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this._debug('hide');\n\n      var _elem = this._element;\n\n      if (this._isShown) {\n        $(_elem).addClass(ClassName.HIDE);\n        this._isShown = false;\n      }\n    }\n    /*\r\n     * @public: \r\n     */\n\n  }, {\n    key: \"dateback\",\n    value: function dateback() {\n      this._debug('dateback');\n    }\n    /*\r\n     * @public: \r\n     */\n\n  }, {\n    key: \"dateforth\",\n    value: function dateforth() {\n      this._debug('dateforth');\n    }\n    /*\r\n     * @public: Move the display position of the timeline container to the specified position\r\n     */\n\n  }, {\n    key: \"alignment\",\n    value: function alignment(position) {\n      this._debug('alignment');\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _elem = this._element,\n          _tl_container = $(_elem).find(Selector.TIMELINE_CONTAINER),\n          _movX = 0;\n\n      position = this.is_array(position) ? position[0] : _opts.rangeAlign;\n\n      if (_props.fullwidth <= _elem.scrollWidth) {\n        return;\n      }\n\n      switch (true) {\n        case /^(left|begin)$/i.test(position):\n          _movX = 0;\n          break;\n\n        case /^center$/i.test(position):\n          _movX = (_tl_container[0].scrollWidth - _elem.scrollWidth) / 2 + 1;\n          break;\n\n        case /^(right|end)$/i.test(position):\n          _movX = _tl_container[0].scrollWidth - _elem.scrollWidth + 1;\n          break;\n\n        case /^latest$/i.test(position):\n          {\n            var events = this._mapPlacedEvents().sort(this.compareValues('x')),\n                lastEvent = events[events.length - 1];\n\n            _movX = !this.is_empty(lastEvent) ? lastEvent.x : 0; // console.log( events, lastEvent, _movX, _elem.scrollWidth / 2 )\n            // Centering\n\n            if (_elem.scrollWidth / 2 < _movX) {\n              _movX -= Math.ceil(_elem.scrollWidth / 2);\n            } else {\n              _movX = 0;\n            } // Focus target event\n\n\n            $(\"\".concat(Selector.TIMELINE_EVENT_NODE, \"[data-uid=\\\"\").concat(lastEvent.uid, \"\\\"]\")).trigger(Event.FOCUSIN_EVENT);\n            break;\n          }\n\n        case /^\\d{1,}$/.test(position):\n          {\n            var _events2 = this._mapPlacedEvents(),\n                targetEvent = {};\n\n            if (_events2.length > 0) {\n              targetEvent = _events2.find(function (evt) {\n                return evt.eventId == parseInt(position, 10);\n              });\n            }\n\n            _movX = !this.is_empty(targetEvent) ? targetEvent.x : 0; // Centering\n\n            if (Math.ceil(_elem.scrollWidth / 2) < _movX) {\n              _movX -= Math.ceil(_elem.scrollWidth / 2);\n            } else {\n              _movX = 0;\n            } // Focus target event\n\n\n            $(\"\".concat(Selector.TIMELINE_EVENT_NODE, \"[data-uid=\\\"\").concat(targetEvent.uid, \"\\\"]\")).trigger(Event.FOCUSIN_EVENT);\n            break;\n          }\n\n        case /^current(|ly)|now$/i.test(position):\n        default:\n          {\n            var _now = new Date().toString(),\n                _nowX = this.numRound(this._getCoordinateX(_now), 2);\n\n            if (_nowX >= 0) {\n              if (_tl_container[0].scrollWidth - _elem.scrollWidth + 1 < _nowX) {\n                _movX = _tl_container[0].scrollWidth - _elem.scrollWidth + 1;\n              } else {\n                _movX = _nowX;\n              }\n            } else {\n              _movX = 0;\n            }\n\n            break;\n          }\n      } //console.log( `!alignment::${position}:`, _props.fullwidth, _props.visibleWidth, _tl_container[0].scrollWidth, _tl_container[0].scrollLeft, _movX )\n\n\n      _tl_container.scrollLeft(_movX);\n    }\n    /*\r\n     * @public: This method has been deprecated since version 2.0.0\r\n     */\n\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      throw new ReferenceError('This method named \"getOptions\" has been deprecated since version 2.0.0');\n    }\n    /*\r\n     * @public: Add new events to the rendered timeline object\r\n     */\n\n  }, {\n    key: \"addEvent\",\n    value: function addEvent() {\n      var _this9 = this;\n\n      this._debug('addEvent');\n\n      var _args = arguments.length <= 0 ? undefined : arguments[0],\n          events = this.supplement(null, _args[0], this.validateArray),\n          callback = _args.length > 1 && typeof _args[1] === 'function' ? _args[1] : null,\n          userdata = _args.length > 2 ? _args.slice(2) : null,\n          _cacheEvents = this._loadToCache(),\n          lastEventId = 0,\n          add_done = false;\n\n      if (this.is_empty(events) || !this._isCompleted) {\n        return;\n      }\n\n      if (!this.is_empty(_cacheEvents)) {\n        _cacheEvents.sort(this.compareValues('eventId'));\n\n        lastEventId = parseInt(_cacheEvents[_cacheEvents.length - 1].eventId, 10);\n      } //console.log( '!addEvent::before:', _cacheEvents, lastEventId, callback, userdata )\n\n\n      events.forEach(function (evt) {\n        var _one_event = _this9._registerEventData('<div></div>', evt);\n\n        if (!_this9.is_empty(_one_event)) {\n          _one_event.eventId = Math.max(lastEventId + 1, parseInt(_one_event.eventId, 10));\n\n          _cacheEvents.push(_one_event);\n\n          lastEventId = parseInt(_one_event.eventId, 10);\n          add_done = true;\n        }\n      }); //console.log( '!addEvent::after:', _cacheEvents, lastEventId, callback, userdata )\n\n      if (!add_done) {\n        return;\n      }\n\n      this._saveToCache(_cacheEvents);\n\n      this._placeEvent();\n\n      if (callback) {\n        this._debug('Fired your callback function after replacing events.');\n\n        callback(this._element, this._config, userdata);\n      }\n    }\n    /*\r\n     * @public: Remove events from the currently timeline object\r\n     */\n\n  }, {\n    key: \"removeEvent\",\n    value: function removeEvent() {\n      var _this10 = this;\n\n      this._debug('removeEvent');\n\n      var _args = arguments.length <= 0 ? undefined : arguments[0],\n          targets = this.supplement(null, _args[0], this.validateArray),\n          callback = _args.length > 1 && typeof _args[1] === 'function' ? _args[1] : null,\n          userdata = _args.length > 2 ? _args.slice(2) : null,\n          _cacheEvents = this._loadToCache(),\n          condition = {},\n          remove_done = false;\n\n      if (this.is_empty(targets) || !this._isCompleted || this.is_empty(_cacheEvents)) {\n        return;\n      }\n\n      targets.forEach(function (cond) {\n        switch (true) {\n          case /^\\d{1,}$/.test(cond):\n            // By matching event ID\n            condition.type = 'eventId';\n            condition.value = parseInt(cond, 10);\n            break;\n\n          case /^(|\\d{1,}(-|\\/)\\d{1,2}(-|\\/)\\d{1,2}(|\\s\\d{1,2}:\\d{1,2}(|:\\d{1,2})))(|,\\d{1,}(-|\\/)\\d{1,2}(-|\\/)\\d{1,2}(|\\s\\d{1,2}:\\d{1,2}(|:\\d{1,2})))$/.test(cond):\n            {\n              // By matching range of datetime\n              var _tmp = cond.split(',');\n\n              condition.type = 'daterange';\n              condition.value = {};\n              condition.value['from'] = _this10.is_empty(_tmp[0]) ? null : new Date(_tmp[0]);\n              condition.value['to'] = _this10.is_empty(_tmp[1]) ? null : new Date(_tmp[1]);\n              break;\n            }\n\n          default:\n            // By matching regex string\n            condition.type = 'regex';\n            condition.value = new RegExp(cond);\n            break;\n        }\n\n        _cacheEvents.forEach(function (evt, _idx) {\n          switch (condition.type) {\n            case 'eventId':\n              if (parseInt(evt.eventId, 10) == condition.value) {\n                //console.log( `!removeEvent::${condition.type}:${condition.value}:`, _cacheEvents[_idx] )\n                _cacheEvents.splice(_idx, 1);\n\n                remove_done = true;\n              }\n\n              break;\n\n            case 'daterange':\n              {\n                //console.log( condition.value )\n                var _fromX = condition.value.from ? Math.ceil(_this10._getCoordinateX(condition.value.from.toString())) : 0,\n                    _toX = condition.value.to ? Math.floor(_this10._getCoordinateX(condition.value.to.toString())) : _fromX;\n\n                if (_fromX <= evt.x && evt.x <= _toX) {\n                  //console.log( `!removeEvent::${condition.type}:${condition.value.from} ~ ${condition.value.to}:`, _fromX, _toX, evt.x )\n                  _cacheEvents.splice(_idx, 1);\n\n                  remove_done = true;\n                }\n\n                break;\n              }\n\n            case 'regex':\n              //console.log( `!removeEvent::${condition.type}:${condition.value}:`, JSON.stringify( evt ) )\n              if (condition.value.test(JSON.stringify(evt))) {\n                _cacheEvents.splice(_idx, 1);\n\n                remove_done = true;\n              }\n\n              break;\n          }\n        });\n      }); //console.log( `!removeEvent::after:`, _cacheEvents )\n\n      if (!remove_done) {\n        return;\n      }\n\n      this._saveToCache(_cacheEvents);\n\n      this._placeEvent();\n\n      if (callback) {\n        this._debug('Fired your callback function after placing additional events.');\n\n        callback(this._element, this._config, userdata);\n      }\n    }\n    /*\r\n     * @public: Update events on the currently timeline object\r\n     */\n\n  }, {\n    key: \"updateEvent\",\n    value: function updateEvent() {\n      var _this11 = this;\n\n      this._debug('updateEvent');\n\n      var _args = arguments.length <= 0 ? undefined : arguments[0],\n          events = this.supplement(null, _args[0], this.validateArray),\n          callback = _args.length > 1 && typeof _args[1] === 'function' ? _args[1] : null,\n          userdata = _args.length > 2 ? _args.slice(2) : null,\n          _cacheEvents = this._loadToCache(),\n          update_done = false;\n\n      if (this.is_empty(events) || !this._isCompleted || this.is_empty(_cacheEvents)) {\n        return;\n      }\n\n      events.forEach(function (evt) {\n        var _upc_event = _this11._registerEventData('<div></div>', evt),\n            // Update Candidate\n        _old_index = null,\n            _old_event = _cacheEvents.find(function (_evt, _idx) {\n          _old_index = _idx;\n          return _evt.eventId == _upc_event.eventId;\n        }),\n            _new_event = {};\n\n        if (!_this11.is_empty(_old_event) && !_this11.is_empty(_upc_event)) {\n          if (_upc_event.hasOwnProperty('uid')) {\n            delete _upc_event.uid;\n          }\n\n          _new_event = Object.assign(_new_event, _old_event, _upc_event); //console.log( _new_event, _old_event, _upc_event, _old_index )\n\n          _cacheEvents[_old_index] = _new_event;\n          update_done = true;\n        }\n      });\n\n      if (!update_done) {\n        return;\n      }\n\n      this._saveToCache(_cacheEvents);\n\n      this._placeEvent();\n\n      if (callback) {\n        this._debug('Fired your callback function after updating events.');\n\n        callback(this._element, this._config, userdata);\n      }\n    }\n    /*\r\n     * @public: Reload the timeline with overridable any options\r\n     */\n\n  }, {\n    key: \"reload\",\n    value: function reload() {\n      this._debug('reload');\n\n      var _args = arguments.length <= 0 ? undefined : arguments[0],\n          _upc_options = this.supplement(null, _args[0], this.validateObject),\n          callback = _args.length > 1 && typeof _args[1] === 'function' ? _args[1] : null,\n          userdata = _args.length > 2 ? _args.slice(2) : null,\n          _elem = this._element,\n          $default_evt = $(_elem).find(Selector.DEFAULT_EVENTS),\n          _old_options = this._config,\n          _new_options = {}; //_cacheEvents = this._loadToCache(),\n      //_renewEvents = []\n\n\n      if (!this.is_empty(_upc_options)) {\n        _new_options = Object.assign(_new_options, _old_options, _upc_options); // console.log( _new_options, _old_options, _upc_options )\n\n        this._config = _new_options;\n      }\n\n      this._isInitialized = false;\n      this._isCached = false;\n      this._isCompleted = false;\n      this._instanceProps = {};\n      $(_elem).empty().append($default_evt);\n\n      this._calcVars();\n\n      if (!this._verifyMaxRenderableRange()) {\n        throw new RangeError(\"Timeline display period exceeds maximum renderable range.\");\n      }\n\n      if (!this._isInitialized) {\n        this._renderView();\n\n        this._isInitialized = true;\n      }\n      /*\r\n      if ( this._config.reloadCacheKeep ) {\r\n          if ( ! this.is_empty( _cacheEvents ) ) {\r\n              _cacheEvents.forEach( ( evt ) => {\r\n                  _renewEvents.push( this._registerEventData( '<div></div>', evt ) )\r\n              })\r\n          }\r\n          this._isCached = this._saveToCache( _renewEvents )\r\n      } else {\r\n          this._loadEvent()\r\n      }\r\n      */\n\n\n      this._loadEvent();\n\n      this._placeEvent();\n\n      this._isCompleted = true;\n\n      if (callback) {\n        this._debug('Fired your callback function after reloading timeline.');\n\n        callback(this._element, this._config, userdata);\n      }\n    }\n    /*\r\n     * @public: The method that fires when an event on the timeline is clicked (:> タイムライン上のイベントがクリックされた時に発火\r\n     *\r\n     * Note: You can hook the custom processing with the callback specified in the event parameter. (:> イベントパラメータに指定したコールバックでカスタム処理をフックできます\r\n     */\n\n  }, {\n    key: \"openEvent\",\n    value: function openEvent(event) {\n      this._debug('openEvent');\n\n      var _that = this,\n          _self = event.target,\n          $viewer = $(document).find(Selector.EVENT_VIEW),\n          //eventId   = parseInt( $(_self).attr( 'id' ).replace( 'evt-', '' ), 10 ),\n      uid = $(_self).data('uid'),\n          //meta      = this.supplement( null, $(_self).data( 'meta' ) ),\n      callback = this.supplement(null, $(_self).data('callback')); //console.log( '!openEvent:', _self, $viewer, eventId, uid, meta, callback )\n\n\n      if ($viewer.length > 0) {\n        $viewer.each(function () {\n          var _cacheEvents = this._loadToCache(),\n              _eventData = _cacheEvents.find(function (event) {\n            return event.uid === uid;\n          }),\n              _label = $('<div></div>', {\n            class: ClassName.VIEWER_EVENT_TITLE\n          }),\n              _content = $('<div></div>', {\n            class: ClassName.VIEWER_EVENT_CONTENT\n          }),\n              _meta = $('<div></div>', {\n            class: ClassName.VIEWER_EVENT_META\n          }),\n              _image = $('<div></div>', {\n            class: ClassName.VIEWER_EVENT_IMAGE_WRAPPER\n          }); //console.log( '!openEvent:', $(this), $(_self).html(), _eventData.label )\n\n\n          $(this).empty(); // Initialize Viewer\n\n          if (!_that.is_empty(_eventData.image)) {\n            _image.append(\"<img src=\\\"\".concat(_eventData.image, \"\\\" class=\\\"\").concat(ClassName.VIEWER_EVENT_IMAGE, \"\\\" />\"));\n\n            $(this).append(_image);\n          }\n\n          if (!_that.is_empty(_eventData.label)) {\n            _label.html(_eventData.label);\n\n            $(this).append(_label);\n          }\n\n          if (!_that.is_empty(_eventData.content)) {\n            _content.html(_eventData.content);\n\n            $(this).append(_content);\n          }\n\n          if (!_that.is_empty(_eventData.rangeMeta)) {\n            _meta.html(_eventData.rangeMeta);\n\n            $(this).append(_meta);\n          }\n        });\n      }\n\n      if (callback) {\n        this._debug(\"The callback \\\"\".concat(callback, \"\\\" was called by the \\\"openEvent\\\" method.\"));\n\n        try {\n          Function.call(null, \"return \".concat(callback))();\n        } catch (e) {\n          throw new TypeError(e);\n        }\n      }\n    }\n    /*\r\n     * @public: Show the loader (:> ローダー表示\r\n     */\n\n  }, {\n    key: \"showLoader\",\n    value: function showLoader() {\n      this._debug('showLoader');\n\n      var _elem = this._element,\n          _opts = this._config,\n          _container = $(_elem).find(Selector.TIMELINE_CONTAINER),\n          width = _container.length > 0 ? _container.width() : $(_elem).width(),\n          height = (_container.length > 0 ? _container.height() : $(_elem).height()) || 120,\n          _loader = $('<div></div>', {\n        id: 'jqtl-loader',\n        style: \"width:\".concat(width, \"px;height:\").concat(height, \"px;\")\n      }); //console.log( '!showLoader:', width, height, _container.length )\n\n\n      if (_opts.loader === false) {\n        return;\n      }\n\n      if ($(_opts.loader).length == 0) {\n        var _loading_text = LOADING_MESSAGE.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\s\\S]|^$/g).filter(Boolean);\n\n        _loading_text.forEach(function (str, idx) {\n          var _fountain_text = $('<div></div>', {\n            id: \"jqtl-loading_\".concat(idx + 1),\n            class: ClassName.LOADER_ITEM\n          }).text(str);\n\n          _loader.append(_fountain_text);\n        });\n      } else {\n        var _custom_loader = $(_opts.loader).clone().prop('hidden', false).css('display', 'block');\n\n        _loader.append(_custom_loader);\n      }\n\n      if ($(_elem).find(Selector.LOADER).length == 0) {\n        if (_container.length > 0) {\n          _container.append(_loader);\n        } else {\n          $(_elem).css('position', 'relative').css('min-height', \"\".concat(height, \"px\")).append(_loader);\n        }\n      }\n    }\n    /*\r\n     * @public:  Hide the loader (:> ローダー非表示\r\n     */\n\n  }, {\n    key: \"hideLoader\",\n    value: function hideLoader() {\n      this._debug('hideLoader');\n\n      $(this._element).find(Selector.LOADER).remove();\n    }\n    /* ----------------------------------------------------------------------------------------------------------------\r\n     * Utility Api\r\n     * ----------------------------------------------------------------------------------------------------------------\r\n     */\n\n    /*\r\n     * Determine empty that like PHP (:> PHPライクな空判定メソッド\r\n     *\r\n     * @param mixed value (required)\r\n     *\r\n     * @return bool\r\n     */\n\n  }, {\n    key: \"is_empty\",\n    value: function is_empty(value) {\n      if (value == null) {\n        // typeof null -> object : for hack a bug of ECMAScript\n        // Refer: https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/typeof\n        return true;\n      }\n\n      switch (_typeof(value)) {\n        case 'object':\n          if (Array.isArray(value)) {\n            // When object is array:\n            return value.length === 0;\n          } else {\n            // When object is not array:\n            if (Object.keys(value).length > 0 || Object.getOwnPropertySymbols(value).length > 0) {\n              return false;\n            } else if (value.valueOf().length !== undefined) {\n              return value.valueOf().length === 0;\n            } else if (_typeof(value.valueOf()) !== 'object') {\n              return this.is_empty(value.valueOf());\n            } else {\n              return true;\n            }\n          }\n\n        case 'string':\n          return value === '';\n\n        case 'number':\n          return value == 0;\n\n        case 'boolean':\n          return !value;\n\n        case 'undefined':\n        case 'null':\n          return true;\n\n        case 'symbol': // Since ECMAScript6\n\n        case 'function':\n        default:\n          return false;\n      }\n    }\n    /*\r\n     * Determine whether variable is an array (:> 変数が配列かどうかを調べる\r\n     *\r\n     * @param mixed val (required)\r\n     *\r\n     * @return bool\r\n     */\n\n  }, {\n    key: \"is_array\",\n    value: function is_array(val) {\n      return Object.prototype.toString.call(val) === '[object Array]';\n    }\n    /*\r\n     * Determine whether the object is iterable (:> オブジェクトが反復可能かどうか調べる\r\n     *\r\n     * @param object obj (required)\r\n     *\r\n     * @return bool\r\n     */\n\n  }, {\n    key: \"is_iterable\",\n    value: function is_iterable(obj) {\n      return obj && typeof obj[Symbol.iterator] === 'function';\n    }\n    /*\r\n     * Add an @@iterator method to non-iterable object (:> 反復不能なオブジェクトにイテレータメソッドを追加する\r\n     *\r\n     * @param object obj (required)\r\n     *\r\n     * @return object\r\n     */\n\n  }, {\n    key: \"toIterableObject\",\n    value: function toIterableObject(obj) {\n      if (this.is_iterable(obj)) {\n        return obj;\n      }\n\n      obj[Symbol.iterator] = function () {\n        var index = 0;\n        return {\n          next: function next() {\n            if (obj.length <= index) {\n              return {\n                done: true\n              };\n            } else {\n              return {\n                value: obj[index++]\n              };\n            }\n          }\n        };\n      };\n\n      return obj;\n    }\n    /*\r\n     * Await until next process at specific millisec (:> 指定ミリ秒でスリープ\r\n     *\r\n     * @param int msec (optional; defaults to 1)\r\n     *\r\n     * @return void\r\n     */\n\n  }, {\n    key: \"sleep\",\n    value: function sleep() {\n      var msec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return new Promise(function (resolve) {\n        setTimeout(resolve, msec);\n      });\n    }\n    /*\r\n     * Supplemental method for validating arguments in local scope (:> ローカルスコープ内で引数を検証するための補助メソッド\r\n     *\r\n     * @param mixed default_value (required)\r\n     * @param mixed opt_arg (optional)\r\n     * @param mixed opt_callback (optional; function or string of function to call)\r\n     *\r\n     * @return mixed\r\n     */\n\n  }, {\n    key: \"supplement\",\n    value: function supplement(default_value, opt_arg, opt_callback) {\n      if (opt_arg === undefined) {\n        return default_value;\n      }\n\n      if (opt_callback === undefined) {\n        return opt_arg;\n      }\n\n      return opt_callback(default_value, opt_arg);\n    }\n    /*\r\n     * Generate the pluggable unique id (:> プラガブルな一意のIDを生成する\r\n     *\r\n     * @param int digit (optional)\r\n     *\r\n     * @return string\r\n     */\n\n  }, {\n    key: \"generateUniqueID\",\n    value: function generateUniqueID() {\n      var digit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n      return new Date().getTime().toString(16) + Math.floor(digit * Math.random()).toString(16);\n    }\n    /*\r\n     * Round a number with specific digit (:> 桁指定して数値を丸める\r\n     *\r\n     * @param numeric number (required)\r\n     * @param int digit (optional)\r\n     * @param string round_type (optional; defaults to \"round\")\r\n     *\r\n     * @return numeric\r\n     */\n\n  }, {\n    key: \"numRound\",\n    value: function numRound(number, digit) {\n      var round_type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'round';\n      digit = this.supplement(0, digit, this.validateNumeric);\n\n      var _pow = Math.pow(10, digit);\n\n      switch (true) {\n        case /^ceil$/i.test(round_type):\n          return Math.ceil(number * _pow) / _pow;\n\n        case /^floor$/i.test(round_type):\n          return Math.floor(number * _pow) / _pow;\n\n        case /^round$/i.test(round_type):\n        default:\n          return Math.round(number * _pow) / _pow;\n      }\n    }\n    /*\r\n     * Convert hex of color code to rgba (:> カラーコードのHEX値をRGBA値へ変換する\r\n     *\r\n     * @param string hex (required)\r\n     * @param float alpha (optional; defaults to 1)\r\n     *\r\n     * @return string\r\n     */\n\n  }, {\n    key: \"hexToRgbA\",\n    value: function hexToRgbA(hex) {\n      var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n      var _c;\n\n      if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n        _c = hex.substring(1).split('');\n\n        if (_c.length == 3) {\n          _c = [_c[0], _c[0], _c[1], _c[1], _c[2], _c[2]];\n        }\n\n        _c = \"0x\".concat(_c.join(''));\n        return \"rgba(\".concat([_c >> 16 & 255, _c >> 8 & 255, _c & 255].join(','), \",\").concat(alpha, \")\");\n      } // throw new Error( 'Bad Hex' )\n\n\n      return hex;\n    }\n    /*\r\n     * Get the correct datetime with remapping to that if the year is 0 - 99 (:> 年が0～99の場合に再マッピングして正確な日時を取得する\r\n     *\r\n     * @param string datetime_str (required)\r\n     *\r\n     * @return Date Object, or null if failed\r\n     */\n\n  }, {\n    key: \"getCorrectDatetime\",\n    value: function getCorrectDatetime(datetime_str) {\n      var normalizeDate = function normalizeDate(dateString) {\n        return dateString.replace(/-/g, '/');\n      }; // For Safari, IE\n\n\n      if (isNaN(Date.parse(normalizeDate(datetime_str)))) {\n        console.warn(\"\\\"\".concat(datetime_str, \"\\\" Cannot parse date because invalid format.\"));\n        return null;\n      }\n\n      var _tempDate = new Date(normalizeDate(datetime_str)),\n          _chk_date = datetime_str.split(/-|\\//);\n\n      if (parseInt(_chk_date[0], 10) < 100) {\n        // Remapping if year is 0-99\n        _tempDate.setFullYear(parseInt(_chk_date[0], 10));\n      }\n\n      return _tempDate;\n    }\n    /*\r\n     * Method to get week number as extension of Date object (:> Dateオブジェクトで週番号を取得する拡張メソッド\r\n     *\r\n     * @param string date_str (required)\r\n     *\r\n     * @return int\r\n     */\n\n  }, {\n    key: \"getWeek\",\n    value: function getWeek(date_str) {\n      var targetDate = new Date(date_str),\n          _onejan = new Date(targetDate.getFullYear(), 0, 1),\n          _millisecInDay = 24 * 60 * 60 * 1000;\n\n      return Math.ceil(((targetDate - _onejan) / _millisecInDay + _onejan.getDay() + 1) / 7);\n    }\n    /*\r\n     * Retrieve one higher scale (:> 一つ上のスケールを取得する\r\n     *\r\n     * @param string scale (required)\r\n     *\r\n     * @return string higher_scale\r\n     */\n\n  }, {\n    key: \"getHigherScale\",\n    value: function getHigherScale(scale) {\n      var higher_scale = scale;\n\n      switch (true) {\n        case /^millisec(|ond)s?$/i.test(scale):\n          higher_scale = 'second';\n          break;\n\n        case /^seconds?$/i.test(scale):\n          higher_scale = 'minute';\n          break;\n\n        case /^minutes?$/i.test(scale):\n          higher_scale = 'hour';\n          break;\n\n        case /^quarter-?(|hour)$/i.test(scale):\n        case /^half-?(|hour)$/i.test(scale):\n        case /^hours?$/i.test(scale):\n          higher_scale = 'day';\n          break;\n\n        case /^days?$/i.test(scale):\n        case /^weeks?$/i.test(scale):\n          higher_scale = 'month';\n          break;\n\n        case /^months?$/i.test(scale):\n          higher_scale = 'year';\n          break;\n\n        case /^years?$/i.test(scale):\n          higher_scale = 'lustrum';\n          break;\n\n        case /^lustrum$/i.test(scale):\n          higher_scale = 'decade';\n          break;\n\n        case /^dec(ade|ennium)$/i.test(scale):\n          higher_scale = 'century';\n          break;\n\n        case /^century$/i.test(scale):\n          higher_scale = 'millennium';\n          break;\n\n        case /^millenniums?|millennia$/i.test(scale):\n        default:\n          break;\n      }\n\n      return higher_scale;\n    }\n    /*\r\n     * Retrieve the date string of specified locale (:> 指定されたロケールの日付文字列を取得する\r\n     *\r\n     * @param string date_seed (required)\r\n     * @param string scale (required)\r\n     * @param string locales (optional)\r\n     * @param object options (optional)\r\n     *\r\n     * @return string locale_string\r\n     */\n\n  }, {\n    key: \"getLocaleString\",\n    value: function getLocaleString(date_seed, scale) {\n      var locales = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en-US';\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      function toLocaleStringSupportsLocales() {\n        try {\n          new Date().toLocaleString('i');\n        } catch (e) {\n          return e.name === \"RangeError\";\n        }\n\n        return false;\n      }\n\n      var is_toLocalString = toLocaleStringSupportsLocales(),\n          locale_string = '',\n          _options = {},\n          getOrdinal = function getOrdinal(n) {\n        var s = ['th', 'st', 'nd', 'rd'],\n            v = n % 100;\n        return n + (s[(v - 20) % 10] || s[v] || s[0]);\n      },\n          getZerofill = function getZerofill(num) {\n        var digit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n\n        var strDuplicate = function strDuplicate(n, str) {\n          return Array(n + 1).join(str);\n        },\n            zero = strDuplicate(digit - 1, '0');\n\n        return String(num).length == digit ? String(num) : (zero + num).substr(num * -1);\n      },\n          _prop,\n          _temp;\n\n      for (_prop in options) {\n        if (_prop === 'timeZone' || _prop === 'hour12') {\n          _options[_prop] = options[_prop];\n        }\n      } //console.log( '!2', date_seed, scale, locales, options[scale], is_toLocalString )\n\n\n      switch (true) {\n        case /^millenniums?|millennia$/i.test(scale):\n        case /^century$/i.test(scale):\n        case /^dec(ade|ennium)$/i.test(scale):\n        case /^lustrum$/i.test(scale):\n          if (options.hasOwnProperty(scale) && options[scale] === 'ordinal') {\n            locale_string = getOrdinal(date_seed);\n          } else {\n            locale_string = date_seed;\n          }\n\n          break;\n\n        case /^years?$/i.test(scale):\n          if (is_toLocalString && options.hasOwnProperty(scale)) {\n            if (['numeric', '2-digit'].includes(options[scale])) {\n              _options.year = options[scale];\n              locale_string = this.getCorrectDatetime(date_seed).toLocaleString(locales, _options);\n            } else if ('zerofill' === options[scale]) {\n              locale_string = getZerofill(date_seed);\n            }\n          }\n\n          locale_string = this.is_empty(locale_string) ? this.getCorrectDatetime(date_seed).getFullYear() : locale_string;\n          break;\n\n        case /^months?$/i.test(scale):\n          if (is_toLocalString && options.hasOwnProperty(scale)) {\n            if (['numeric', '2-digit', 'narrow', 'short', 'long'].includes(options[scale])) {\n              _options.month = options[scale];\n              locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n            }\n          } //locale_string = new Date( date_seed ).getMonth() + 1\n\n\n          locale_string = this.is_empty(locale_string) ? new Date(date_seed).getMonth() + 1 : locale_string;\n          break;\n\n        case /^weeks?$/i.test(scale):\n          _temp = date_seed.split(',');\n\n          if (options.hasOwnProperty(scale) && options[scale] === 'ordinal') {\n            locale_string = getOrdinal(_temp);\n          } else {\n            locale_string = _temp[1];\n          }\n\n          break;\n\n        case /^weekdays?$/i.test(scale):\n          _temp = date_seed.split(',');\n\n          if (is_toLocalString) {\n            _options.weekday = options.hasOwnProperty('weekday') ? options.weekday : 'narrow';\n            locale_string = new Date(_temp[0]).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( _temp[0] ).toLocaleString( locales, _options )\n          } else {\n            var _weekday = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n            locale_string = _weekday[_temp[1]];\n          }\n\n          break;\n\n        case /^days?$/i.test(scale):\n          if (is_toLocalString) {\n            _options.day = options.hasOwnProperty('day') ? options.day : 'numeric';\n            locales = options.hasOwnProperty('day') ? locales : 'en-US';\n            locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n          } else {\n            locale_string = new Date(date_seed).getDate(); //locale_string = this.getCorrectDatetime( date_seed ).getDate()\n          }\n\n          break;\n\n        case /^hours?$/i.test(scale):\n        case /^(half|quarter)-?hours?$/i.test(scale):\n          // console.log( '!getLocaleString:', date_seed )\n          if (typeof date_seed === 'string') {\n            var _parts = date_seed.split(':');\n\n            if (_parts.length == 1) {\n              date_seed = \"\".concat(date_seed, \":00:00\");\n            } else if (_parts.length == 2) {\n              date_seed = \"\".concat(date_seed, \":00\");\n            }\n          }\n\n          if (is_toLocalString) {\n            _options.hour = options.hasOwnProperty('hour') ? options.hour : 'numeric';\n\n            if (options.hasOwnProperty('minute')) {\n              _options.minute = options.hasOwnProperty('minute') ? options.minute : 'numeric';\n            }\n\n            locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n          } else {\n            locale_string = new Date(date_seed).getHours(); //locale_string = this.getCorrectDatetime( date_seed ).getHours()\n          }\n\n          break;\n\n        case /^minutes?$/i.test(scale):\n          if (is_toLocalString) {\n            _options.minute = options.hasOwnProperty('minute') ? options.minute : 'numeric';\n\n            if (options.hasOwnProperty('hour')) {\n              _options.hour = options.hasOwnProperty('hour') ? options.hour : 'numeric';\n            }\n\n            locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n          } else {\n            locale_string = new Date(date_seed).getMinutes(); //locale_string = this.getCorrectDatetime( date_seed ).getMinutes()\n          }\n\n          break;\n\n        case /^seconds?$/i.test(scale):\n          if (is_toLocalString) {\n            _options.second = options.hasOwnProperty('second') ? options.second : 'numeric';\n\n            if (options.hasOwnProperty('hour')) {\n              _options.hour = options.hasOwnProperty('hour') ? options.hour : 'numeric';\n            }\n\n            if (options.hasOwnProperty('minute')) {\n              _options.minute = options.hasOwnProperty('minute') ? options.minute : 'numeric';\n            }\n\n            locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n          } else {\n            locale_string = new Date(date_seed).getSeconds(); //locale_string = this.getCorrectDatetime( date_seed ).getSeconds()\n          }\n\n          break;\n\n        case /^millisec(|ond)s?$/i.test(scale):\n        default:\n          locale_string = new Date(date_seed); //locale_string = this.getCorrectDatetime( date_seed )\n\n          break;\n      }\n\n      return locale_string;\n    }\n    /*\r\n     * Get the rendering width of the given string (:> 指定された文字列のレンダリング幅を取得する\r\n     *\r\n     * @param string str (required)\r\n     *\r\n     * @return int\r\n     */\n\n  }, {\n    key: \"strWidth\",\n    value: function strWidth(str) {\n      var _str_ruler = $('<span id=\"jqtl-str-ruler\"></span>'),\n          _width = 0;\n\n      if ($('#jqtl-str-ruler').length == 0) {\n        $('body').append(_str_ruler);\n      }\n\n      _width = $('#jqtl-str-ruler').text(str).get(0).offsetWidth;\n      $('#jqtl-str-ruler').empty();\n      return _width;\n    }\n    /*\r\n     * Sort an array by value of specific property (Note: destructive method) (:> 指定プロパティの値で配列をソートする（注:破壊的メソッド）\r\n     * Usage: Object.sort( this.compareValues( property, order ) )\r\n     *\r\n     * @param string key (required)\r\n     * @param string order (optional; defaults to 'asc')\r\n     *\r\n     * @return object\r\n     */\n\n  }, {\n    key: \"compareValues\",\n    value: function compareValues(key) {\n      var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'asc';\n      return function (a, b) {\n        if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n          return 0;\n        }\n\n        var varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];\n        var varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];\n        var comparison = 0;\n\n        if (varA > varB) {\n          comparison = 1;\n        } else if (varA < varB) {\n          comparison = -1;\n        }\n\n        return order === 'desc' ? comparison * -1 : comparison;\n      };\n    }\n    /*\r\n     * Validators\r\n     */\n\n  }, {\n    key: \"validateString\",\n    value: function validateString(def, val) {\n      return typeof val === 'string' && val !== '' ? val : def;\n    }\n  }, {\n    key: \"validateNumeric\",\n    value: function validateNumeric(def, val) {\n      return typeof val === 'number' ? Number(val) : def;\n    }\n  }, {\n    key: \"validateBoolean\",\n    value: function validateBoolean(def, val) {\n      return typeof val === 'boolean' || _typeof(val) === 'object' && val !== null && typeof val.valueOf() === 'boolean' ? val : def;\n    }\n  }, {\n    key: \"validateObject\",\n    value: function validateObject(def, val) {\n      return _typeof(val) === 'object' ? val : def;\n    }\n  }, {\n    key: \"validateArray\",\n    value: function validateArray(def, val) {\n      return Object.prototype.toString.call(val) === '[object Array]' ? val : def;\n    } // Static\n\n  }], [{\n    key: \"_jQueryInterface\",\n    value: function _jQueryInterface(config) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      return this.each(function () {\n        var data = $(this).data(DATA_KEY);\n\n        var _config = _objectSpread({}, Default, $(this).data(), _typeof(config) === 'object' && config ? config : {}); //console.log( '!_jQueryInterface:', data, config, args )\n\n\n        if (!data) {\n          // Apply the plugin and store the instance in data (:> プラグインを適用する\n          data = new Timeline(this, _config);\n          $(this).data(DATA_KEY, data);\n        }\n\n        if (typeof config === 'string' && config.charAt(0) != '_') {\n          if (typeof data[config] === 'undefined') {\n            // Call no method\n            throw new ReferenceError(\"No method named \\\"\".concat(config, \"\\\"\"));\n          } // Call public method (:> （インスタンスがpublicメソッドを持っている場合）メソッドを呼び出す\n\n\n          data[config](args);\n        } else {\n          if (!data._isInitialized) {\n            data._init();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"VERSION\",\n    get: function get() {\n      return VERSION;\n    }\n  }, {\n    key: \"Default\",\n    get: function get() {\n      return Default;\n    }\n  }]);\n\n  return Timeline;\n}(); // class end\n\n/*\r\n * jQuery\r\n */\n\n\n$.fn[NAME] = Timeline._jQueryInterface;\n$.fn[NAME].Constructor = Timeline;\n\n$.fn[NAME].noConflict = function () {\n  $.fn[NAME] = JQUERY_NO_CONFLICT;\n  return Timeline._jQueryInterface;\n};\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}