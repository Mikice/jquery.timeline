{"version":3,"sources":["bundle.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_typeof","obj","Symbol","iterator","constructor","prototype","_objectSpread","target","arguments","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","value","defineProperty","configurable","writable","_defineProperties","props","descriptor","NAME","DATA_KEY","EVENT_KEY","PREFIX","JQUERY_NO_CONFLICT","$","fn","Default","type","scale","startDatetime","endDatetime","headline","display","title","range","locale","format","hour12","footer","content","sidebar","sticky","overlay","list","rows","rowHeight","width","height","minGridSize","marginHeight","ruler","top","lines","fontSize","color","background","rangeAlign","naviIcon","left","right","loader","hideScrollbar","eventMeta","showPointer","storage","reloadCacheKeep","debug","LimitScaleGrids","millennium","century","decade","lustrum","year","month","week","day","hour","quarterHour","halfHour","minute","second","EventParams","uid","eventId","x","y","start","end","row","bgColor","bdColor","label","image","margin","rangeMeta","size","extend","remote","relation","callback","Event","INITIALIZED","HIDE","SHOW","CLICK_EVENT","FOCUSIN_EVENT","FOCUSOUT_EVENT","MOUSEENTER_POINTER","MOUSELEAVE_POINTER","ClassName","TIMELINE_CONTAINER","TIMELINE_MAIN","TIMELINE_HEADLINE","TIMELINE_HEADLINE_WRAPPER","HEADLINE_TITLE","RANGE_META","RANGE_SPAN","TIMELINE_EVENT_CONTAINER","TIMELINE_BACKGROUND_GRID","TIMELINE_RELATION_LINES","TIMELINE_EVENTS","TIMELINE_EVENT_NODE","TIMELINE_EVENT_LABEL","TIMELINE_EVENT_THUMBNAIL","TIMELINE_RULER_LINES","TIMELINE_RULER_ITEM","TIMELINE_SIDEBAR","TIMELINE_SIDEBAR_MARGIN","TIMELINE_SIDEBAR_ITEM","TIMELINE_FOOTER","TIMELINE_FOOTER_CONTENT","VIEWER_EVENT_TITLE","VIEWER_EVENT_CONTENT","VIEWER_EVENT_META","VIEWER_EVENT_IMAGE_WRAPPER","VIEWER_EVENT_IMAGE","VIEWER_EVENT_TYPE_POINTER","HIDE_SCROLLBAR","RULER_ITEM_ALIGN_LEFT","STICKY_LEFT","OVERLAY","ALIGN_SELF_RIGHT","LOADER_ITEM","Selector","EVENT_NODE","EVENT_VIEW","RULER_TOP","RULER_BOTTOM","TIMELINE_RULER_TOP","TIMELINE_RULER_BOTTOM","LOADER","DEFAULT_EVENTS","Timeline","element","config","instance","Constructor","TypeError","_classCallCheck","this","_config","_getConfig","_element","_selector","_isInitialized","_isCached","_isCompleted","_isShown","_instanceProps","protoProps","staticProps","_len2","args","Array","_key3","each","data","charAt","ReferenceError","_init","get","filteredKey","test","_this2","_debug","_elem","tagName","id","className","replace","toLowerCase","showLoader","_calcVars","_verifyMaxRenderableRange","RangeError","_renderView","afterInitEvent","trigger","off","_loadEvent","_placeEvent","document","on","event","openEvent","_activeEvent","_hoverPointer","alignment","_this3","_opts","_props","begin","supplement","_getPluggableDatetime","scaleSize","validateNumeric","_getPluggableRows","rowSize","console","log","Date","_temp","_verifyScale","_values","values","_averageDays","numRound","reduce","v","_baseDaysOfScale","_totalWidth","days","grids","variableScale","fullwidth","Math","ceil","_prop","fullheight","visibleWidth","visibleHeight","is_empty","round_type","undefined","_date","getFirstDate","dateObj","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","_ms","_higherScale","getHigherScale","getCorrectDatetime","setTime","getTime","_filterScaleKeyName","is_remapping","_tmpDate","getLastDate","setFullYear","String","substr","str_like_params","params","JSON","parse","stringify","Function","hasOwnProperty","warn","fixed_rows","_diffDate","pow","_tl_container","class","style","_tl_main","info","css","addClass","prepend","_createHeadline","append","_createEventContainer","_createRuler","bottom","parseInt","find","_createSideIndex","_createFooter","_display","validateBoolean","_title","_range","_locale","_format","_begin","_end","_tl_headline","_wrapper","_meta","toLocaleString","pos_y","is_dotted","_this4","_actualHeight","_container","_events_bg","_events_lines","_events_body","_cy","ctx_grid","getContext","drawVerticalLine","pos_x","strokeStyle","lineWidth","beginPath","setLineDash","moveTo","lineTo","closePath","stroke","_pos_y","fillStyle","fillRect","_i2","_pos_y2","_bc","_sy","_arr2","_i3","_key","_i4","position","_this5","ruler_line","def","val","isArray","line_height","font_size","text_color","ruler_opts","_fullwidth","_fullheight","_ruler","_ruler_bg","_ruler_body","_finalLines","ctx_ruler","canvas","some","line_scale","idx","_line_y","_line_grids","_grid_x","_correction","_filterVariableScale","_arr3","_i5","_getGridsPerScale","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","_val","err","return","_createRulerContent","target_scale","scales","retObj","_arr4","_i6","_dt","_days","grid_size","_newKey","_arr","split","getWeek","getDay","_scopes","_scale_grids","_sep","_tmp","_y","_mil","_cen","_dec","_lus","_m","_wd","_d","_w","_h","_min","_s","push","weekday","datetime","toString","_scope","toIterableObject","validateString","validateObject","_ruler_lines","_arr5","_i7","_item_width","_line","_ruler_string","getLocaleString","_data_ruler_item","attr","html","strWidth","_sticky","_overlay","_sbList","_margin","_list","clone","_item","_content","_tl_footer","date1","date2","absval","_dt1","_dt2","diffMS","retval","lastDayOfMonth","isLeapYear","sum","setMonth","abs","_bd","_ed","_dy","_cd","_i8","_cd2","_i9","_cd3","_i10","_cd4","_i11","_cd5","_that","_event_list","_cnt","events","lastEventId","children","_attr","_evt_params","_getPluggableParams","_one_event","_registerEventData","max","cacheIds","_evt","_i","_this","_chkId","includes","_saveToCache","event_element","_x","_c","_this6","new_event","generateUniqueID","_relation","_getCoordinateX","floor","date","coordinate_x","strageEngine","window","localStorage","sessionStorage","setItem","getItem","removeItem","_this7","_evt_container","_relation_lines","_loadToCache","empty","_evt_elem","_createEventNode","_drawRelationLine","sleep","then","hideLoader","fadeIn","hexToRgbA","backgroundColor","_pointSize","_getPointerSize","_shiftX","_shiftY","_imgSize","meta","_arr6","_i12","_max","min","_size","_this8","_canvas","ctx_relations","drawLine","_sx","_ex","_ey","evt","_ba","_curveType","_radius","_arr7","_i13","before","after","Boolean","quadraticCurveTo","bezierCurveTo","clearRect","_targetId","_targetEvent","_rel","_tl_events","_cache","_events","_uid","_data","removeClass","_base","_z","message","throwType","_msg","_sty","_message","_args","userdata","slice","removeData","remove","_removeCache","_arr8","_i14","_len","_key2","_movX","duration","scrollWidth","_mapPlacedEvents","sort","compareValues","lastEvent","_events2","targetEvent","_now","_nowX","scrollLeft","animate","_this9","validateArray","_cacheEvents","add_done","_this10","targets","condition","remove_done","cond","RegExp","_idx","splice","_fromX","from","_toX","to","_this11","update_done","_upc_event","_old_index","_old_event","_new_event","assign","_this12","_upc_options","$default_evt","_old_options","_new_options","mergeDeep","_renewEvents","Y","_self","$viewer","_eventData","_label","_image","_loader","match","str","_fountain_text","text","_custom_loader","prop","valueOf","item","output","is_Object","_arr9","_i15","is_iterable","index","msec","Promise","resolve","setTimeout","default_value","opt_arg","opt_callback","digit","random","number","_pow","round","hex","alpha","substring","join","datetime_str","normalizeDate","dateString","isNaN","_tempDate","_chk_date","date_str","targetDate","_onejan","higher_scale","date_seed","locales","options","is_toLocalString","name","toLocaleStringSupportsLocales","locale_string","_options","getOrdinal","s","num","zero","getZerofill","_parts","_width","_str_ruler","offsetWidth","order","b","varA","toUpperCase","varB","comparison","Number","_jQueryInterface","noConflict"],"mappings":"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","file":"jquery.timeline.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n//import '@babel/polyfill'\n\n/*!\r\n * jQuery Timeline\r\n * ------------------------\r\n * Version: 2.0.0a1\r\n * Author: Ka2 (https://ka2.org/)\r\n * Repository: https://github.com/ka215/jquery.timeline/tree/develop\r\n * Lisenced: MIT\r\n */\n\n/*\r\n * Constants\r\n */\nvar NAME = \"Timeline\";\nvar VERSION = \"2.0.0a1\";\nvar DATA_KEY = \"jq.timeline\";\nvar EVENT_KEY = \".\".concat(DATA_KEY);\nvar PREFIX = \"jqtl-\";\nvar LOADING_MESSAGE = \"Loading...\";\nvar MIN_POINTER_SIZE = 12; //const DATA_API_KEY       = \".data-api\"\n\nvar JQUERY_NO_CONFLICT = $.fn[NAME];\n/*\r\n * Defaults of plugin options\r\n */\n\nvar Default = {\n  type: \"bar\",\n  // View type of timeline event is either \"bar\" or \"point\"\n  scale: \"day\",\n  // Timetable's minimum level scale is either \"year\", \"month\", \"week\", \"day\", \"hour\", \"minute\"; Enhanced since v2.0.0\n  startDatetime: \"currently\",\n  // Beginning date time of timetable on the timeline. format is ( \"^d{4}(/|-)d{2}(/|-)d{2}\\sd{2}:d{2}:d{2}$\" ) or \"currently\"\n  endDatetime: \"auto\",\n  // Ending date time of timetable on the timeline. format is ( \"^d{4}(/|-)d{2}(/|-)d{2}\\sd{2}:d{2}:d{2}$\" ) or \"auto\"; Added new since v2.0.0\n  // datetimePrefix : \"\", // --> Deprecated since v2.0.0\n  // showHeadline : true, // --> Deprecated since v2.0.0\n  headline: {\n    // Content in the headline; Added new since v2.0.0\n    display: true,\n    // Whether to display headline is instead of former showHeadline\n    title: \"\",\n    range: true,\n    // Hide if false\n    locale: \"en-US\",\n    // This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\n    format: {\n      hour12: false // This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\n\n    }\n  },\n  footer: {\n    // Content in the footer; Added new since v2.0.0\n    display: true,\n    // Whether to display footer\n    content: \"\",\n    range: false,\n    // Visible if true\n    locale: \"en-US\",\n    // This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\n    format: {\n      hour12: false // This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\n\n    }\n  },\n\n  /* datetimeFormat  : { // --> Deprecated since v2.0.0\r\n      full        : \"j M Y\", // or \"Y/m/d\" etc.\r\n      year        : \"Y\",\r\n      month       : \"M Y\", // or \"F\" etc.\r\n      day         : \"D, j M\", // or \"j\" etc.\r\n      years       : \"Y\", \r\n      months      : \"F\", \r\n      days        : \"j\",\r\n      meta        : \"Y/m/d H:i\", // start datetime in meta of Event Detail; or \"g:i A, D F j, Y\"\r\n      metato      : \"\" // --> Deprecated since v2.0.0\r\n  }, */\n  // minuteInterval : 30, // --> Deprecated since v2.0.0\n  // zerofillYear   : false, // --> Deprecated since v2.0.0\n  range: 3,\n  // Override the scale range of the timeline to be rendered when endDatetime is undefined or \"auto\"; Enhanced since v2.0.0\n  sidebar: {\n    // Settings of sidebar; Added new since v2.0.0\n    sticky: false,\n    overlay: false,\n    list: []\n  },\n  rows: \"auto\",\n  // Rows of timeline event area. defaults to \"auto\"; Enhanced since v2.0.0\n  rowHeight: 48,\n  // Height of one row\n  width: \"auto\",\n  // Fixed width (pixel) of timeline view. defaults to \"auto\"; Added new since v2.0.0\n  height: \"auto\",\n  // Fixed height (pixel) of timeline view. defaults to \"auto\" ( rows * rowHeight )\n  // minGridPer   : 2, // --> Deprecated since v2.0.0\n  minGridSize: 30,\n  // Override value of minimum size (pixel) of timeline grid; Enhanced since v2.0.0\n  marginHeight: 2,\n  // Margin (pixel) top and bottom of events on the timeline; Added new since v2.0.0\n  ruler: {\n    // Settings of ruler; Added new since v2.0.0\n    top: {\n      // Can define the ruler position to top or bottom and both\n      lines: [],\n      // defaults to this.option.scale; c.g. [ 'year', 'month', 'day', 'weekday' ]\n      height: 30,\n      fontSize: 14,\n      color: \"#777777\",\n      background: \"#FFFFFF\",\n      locale: \"en-US\",\n      // This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\n      format: {\n        hour12: false // This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\n\n      }\n    }\n  },\n  rangeAlign: \"latest\",\n  // Possible values are \"left\", \"center\", \"right\", \"current\", \"latest\" and specific event id\n  naviIcon: {\n    // Define class name\n    left: \"\".concat(PREFIX, \"circle-left\"),\n    right: \"\".concat(PREFIX, \"circle-right\")\n  },\n  loader: \"default\",\n  // Custom loader definition, possible values are \"default\", false and selector of loader element; Added new since v2.0.0\n  hideScrollbar: false,\n  // Whether or not to display the scroll bar displayed when the width of the timeline overflows (even if it is set to non-display, it will not function depending on the browser); Added new since v2.0.0\n  eventMeta: {\n    // Display meta of range on event node when the timeline type is \"bar\"; Added new since v2.0.0\n    display: false,\n    scale: \"day\",\n    locale: \"en-US\",\n    // This value is an argument \"locales\" of `dateObj.toLocaleString([locales[, options]])`\n    format: {\n      hour12: false\n    },\n    // This value is an argument \"options\" of `dateObj.toLocaleString([locales[, options]])`\n    content: \"\" // This is value for if you want to show custom content on the meta\n\n  },\n  showPointer: true,\n  // i18n         : {}, // --> Deprecated since v1.0.6\n  // langsDir     : \"./langs/\", // --> Deprecated since v1.0.6\n  // httpLanguage : false, // --> Deprecated since v1.0.6\n  // duration     : 150, // duration of animate as each transition effects; Added v1.0.6 --> Deprecated since v2.0.0\n  storage: 'session',\n  // Specification of Web storage to cache event data, defaults to sessionStorage; Added new since v2.0.0\n  reloadCacheKeep: true,\n  // Whether to load cached events during reloading, the cache is discarded if false\n  debug: false\n  /*\r\n   * Define the limited grid number per scale of timeline\r\n   */\n\n};\nvar LimitScaleGrids = {\n  millennium: 100,\n  // = 100 : 100000 years\n  century: 100 * 5,\n  // = 500 : 50000 years\n  decade: 10 * 50,\n  // = 500 : 5000 years\n  lustrum: 5 * 100,\n  // = 500 : 2500 years\n  year: 500,\n  // = 500 : 500 years\n  month: 12 * 45,\n  // = 540 : 45 years\n  week: 53 * 10,\n  // = 530 : 10 years\n  day: 366,\n  // = 366 : 1 year\n  hour: 24 * 30,\n  // = 720 : 30 days\n  quarterHour: 24 * 4 * 7.5,\n  // = 720 : 7.5 days\n  halfHour: 24 * 2 * 15,\n  // = 720 : 15 days\n  minute: 60 * 12,\n  // = 720 : 12 hours\n  second: 60 * 15 // = 900 : 15 minutes\n\n  /*\r\n  const DefaultType = {\r\n      \r\n  }\r\n  */\n\n  /*\r\n   * Defaults of event parameters on timeline\r\n   */\n\n};\nvar EventParams = {\n  uid: '',\n  // for cache only\n  eventId: '',\n  x: 0,\n  // for cache only\n  y: Default.marginHeight,\n  // for cache only\n  width: Default.minGridSize,\n  // for cache only\n  height: Default.rowHeight - Default.marginHeight * 2,\n  // for cache only\n  start: '',\n  // for cache only\n  end: '',\n  // for cache only\n  row: 1,\n  // for cache only\n  bgColor: '#E7E7E7',\n  color: '#343A40',\n  bdColor: '#6C757D',\n  label: '',\n  content: '',\n  image: '',\n  margin: Default.marginHeight,\n  rangeMeta: '',\n  size: 'normal',\n  // diameter of pointer\n  extend: {},\n  remote: false,\n  relation: {\n    /*\r\n    before    : \r\n    after     : \r\n    linesize  : \r\n    linecolor : \r\n    curve     : \r\n    */\n  },\n  callback: function callback() {}\n};\nvar Event = {\n  INITIALIZED: \"initialized\".concat(EVENT_KEY),\n  HIDE: \"hide\".concat(EVENT_KEY),\n  SHOW: \"show\".concat(EVENT_KEY),\n  CLICK_EVENT: \"click.open\".concat(EVENT_KEY),\n  FOCUSIN_EVENT: \"focusin.event\".concat(EVENT_KEY),\n  FOCUSOUT_EVENT: \"focusout.event\".concat(EVENT_KEY),\n  MOUSEENTER_POINTER: \"mouseenter.pointer\".concat(EVENT_KEY),\n  MOUSELEAVE_POINTER: \"mouseleave.pointer\".concat(EVENT_KEY)\n};\nvar ClassName = {\n  TIMELINE_CONTAINER: \"\".concat(PREFIX, \"container\"),\n  TIMELINE_MAIN: \"\".concat(PREFIX, \"main\"),\n  TIMELINE_HEADLINE: \"\".concat(PREFIX, \"headline\"),\n  TIMELINE_HEADLINE_WRAPPER: \"\".concat(PREFIX, \"headline-wrapper\"),\n  HEADLINE_TITLE: \"\".concat(PREFIX, \"timeline-title\"),\n  RANGE_META: \"\".concat(PREFIX, \"range-meta\"),\n  RANGE_SPAN: \"\".concat(PREFIX, \"range-span\"),\n  TIMELINE_EVENT_CONTAINER: \"\".concat(PREFIX, \"event-container\"),\n  TIMELINE_BACKGROUND_GRID: \"\".concat(PREFIX, \"bg-grid\"),\n  TIMELINE_RELATION_LINES: \"\".concat(PREFIX, \"relation-lines\"),\n  TIMELINE_EVENTS: \"\".concat(PREFIX, \"events\"),\n  TIMELINE_EVENT_NODE: \"\".concat(PREFIX, \"event-node\"),\n  TIMELINE_EVENT_LABEL: \"\".concat(PREFIX, \"event-label\"),\n  TIMELINE_EVENT_THUMBNAIL: \"\".concat(PREFIX, \"event-thumbnail\"),\n  TIMELINE_RULER_LINES: \"\".concat(PREFIX, \"ruler-line-rows\"),\n  TIMELINE_RULER_ITEM: \"\".concat(PREFIX, \"ruler-line-item\"),\n  TIMELINE_SIDEBAR: \"\".concat(PREFIX, \"side-index\"),\n  TIMELINE_SIDEBAR_MARGIN: \"\".concat(PREFIX, \"side-index-margin\"),\n  TIMELINE_SIDEBAR_ITEM: \"\".concat(PREFIX, \"side-index-item\"),\n  TIMELINE_FOOTER: \"\".concat(PREFIX, \"footer\"),\n  TIMELINE_FOOTER_CONTENT: \"\".concat(PREFIX, \"footer-content\"),\n  VIEWER_EVENT_TITLE: \"\".concat(PREFIX, \"event-title\"),\n  VIEWER_EVENT_CONTENT: \"\".concat(PREFIX, \"event-content\"),\n  VIEWER_EVENT_META: \"\".concat(PREFIX, \"event-meta\"),\n  VIEWER_EVENT_IMAGE_WRAPPER: \"\".concat(PREFIX, \"event-image-wrapper\"),\n  VIEWER_EVENT_IMAGE: \"\".concat(PREFIX, \"event-image\"),\n  VIEWER_EVENT_TYPE_POINTER: \"\".concat(PREFIX, \"event-type-pointer\"),\n  HIDE_SCROLLBAR: \"\".concat(PREFIX, \"hide-scrollbar\"),\n  HIDE: \"\".concat(PREFIX, \"hide\"),\n  RULER_ITEM_ALIGN_LEFT: \"\".concat(PREFIX, \"rli-left\"),\n  STICKY_LEFT: \"\".concat(PREFIX, \"sticky-left\"),\n  OVERLAY: \"\".concat(PREFIX, \"overlay\"),\n  ALIGN_SELF_RIGHT: \"\".concat(PREFIX, \"align-self-right\"),\n  LOADER_ITEM: \"\".concat(PREFIX, \"loading\")\n};\nvar Selector = {\n  EVENT_NODE: \".\".concat(PREFIX, \"event-node\"),\n  EVENT_VIEW: \".timeline-event-view, .\".concat(PREFIX, \"event-view\"),\n  RULER_TOP: \".\".concat(PREFIX, \"ruler-top\"),\n  RULER_BOTTOM: \".\".concat(PREFIX, \"ruler-bottom\"),\n  TIMELINE_CONTAINER: \".\".concat(ClassName.TIMELINE_CONTAINER),\n  TIMELINE_RULER_TOP: \".\".concat(PREFIX, \"ruler-top\"),\n  TIMELINE_RULER_BOTTOM: \".\".concat(PREFIX, \"ruler-bottom\"),\n  TIMELINE_RELATION_LINES: \".\".concat(ClassName.TIMELINE_RELATION_LINES),\n  TIMELINE_EVENTS: \".\".concat(ClassName.TIMELINE_EVENTS),\n  TIMELINE_SIDEBAR_ITEM: \".\".concat(ClassName.TIMELINE_SIDEBAR_ITEM),\n  TIMELINE_EVENT_NODE: \".\".concat(ClassName.TIMELINE_EVENT_NODE),\n  VIEWER_EVENT_TYPE_POINTER: \".\".concat(ClassName.VIEWER_EVENT_TYPE_POINTER),\n  LOADER: \"#\".concat(PREFIX, \"loader\"),\n  DEFAULT_EVENTS: \".timeline-events\"\n  /*\r\n   * The plugin core class of the jQuery Timeline as controller\r\n   */\n\n};\n\nvar Timeline =\n/*#__PURE__*/\nfunction () {\n  function Timeline(element, config) {\n    _classCallCheck(this, Timeline);\n\n    this._config = this._getConfig(config);\n    this._element = element;\n    this._selector = null;\n    this._isInitialized = false;\n    this._isCached = false;\n    this._isCompleted = false;\n    this._isShown = false;\n    this._instanceProps = {};\n  } // Getters\n\n\n  _createClass(Timeline, [{\n    key: \"_getConfig\",\n    // Private\n\n    /*\r\n     * @private: Define the default options of this plugin\r\n     */\n    value: function _getConfig(config) {\n      config = _objectSpread({}, Default, config);\n      return config;\n    }\n    /*\r\n     * @private: Filter the scale key name for LimitScaleGrids\r\n     */\n\n  }, {\n    key: \"_filterScaleKeyName\",\n    value: function _filterScaleKeyName(key) {\n      var filteredKey = null;\n\n      switch (true) {\n        case /^quarter-?(|hour)$/i.test(key):\n          filteredKey = 'quarterHour';\n          break;\n\n        case /^half-?(|hour)$/i.test(key):\n          filteredKey = 'halfHour';\n          break;\n\n        default:\n          filteredKey = key;\n      }\n\n      return filteredKey;\n    }\n    /*\r\n     * @private: Initialize the plugin\r\n     */\n\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      var _this2 = this;\n\n      this._debug('_init');\n\n      var _elem = this._element,\n          _selector = \"\".concat(_elem.tagName).concat(_elem.id ? \"#\".concat(_elem.id) : '').concat(_elem.className ? \".\".concat(_elem.className.replace(/\\s/g, '.')) : '');\n\n      this._selector = _selector.toLowerCase();\n\n      if (this._isInitialized || this._isCompleted) {\n        return;\n      }\n\n      this.showLoader();\n\n      this._calcVars();\n\n      if (!this._verifyMaxRenderableRange()) {\n        throw new RangeError(\"Timeline display period exceeds maximum renderable range.\");\n      } //    this.sleep( 2400 ).then(() => {\n\n\n      if (!this._isInitialized) {\n        this._renderView();\n\n        var afterInitEvent = $.Event(Event.INITIALIZED, {\n          _elem: _elem\n        });\n        $(_elem).trigger(afterInitEvent);\n        $(_elem).off(Event.INITIALIZED);\n      }\n\n      if (!this._isCached) {\n        this._loadEvent();\n      }\n\n      if (this._isCached) {\n        this._placeEvent();\n      } // Assign events for the timeline\n\n\n      $(document).on(Event.CLICK_EVENT, \"\".concat(this._selector, \" \").concat(Selector.EVENT_NODE), function (event) {\n        return _this2.openEvent(event);\n      });\n      $(_elem).on(Event.FOCUSIN_EVENT, Selector.TIMELINE_EVENT_NODE, function (event) {\n        return _this2._activeEvent(event);\n      });\n      $(_elem).on(Event.FOCUSOUT_EVENT, Selector.TIMELINE_EVENT_NODE, function (event) {\n        return _this2._activeEvent(event);\n      }); //console.log( '!_init:', )\n\n      if (/^point(|er)$/i.test(this._config.type)) {\n        $(_elem).on(Event.MOUSEENTER_POINTER, Selector.VIEWER_EVENT_TYPE_POINTER, function (event) {\n          return _this2._hoverPointer(event);\n        });\n        $(_elem).on(Event.MOUSELEAVE_POINTER, Selector.VIEWER_EVENT_TYPE_POINTER, function (event) {\n          return _this2._hoverPointer(event);\n        });\n      }\n\n      this._isCompleted = true;\n      this.alignment(); //    }) // /sleep\n    }\n    /*\r\n     * @private: Calculate each properties of the timeline instance\r\n     */\n\n  }, {\n    key: \"_calcVars\",\n    value: function _calcVars() {\n      var _this3 = this;\n\n      var _opts = this._config,\n          _props = {};\n      _props.begin = this.supplement(null, this._getPluggableDatetime(_opts.startDatetime, 'first'));\n      _props.end = this.supplement(null, this._getPluggableDatetime(_opts.endDatetime, 'last'));\n      _props.scaleSize = this.supplement(null, _opts.minGridSize, this.validateNumeric);\n      _props.rows = this._getPluggableRows();\n      _props.rowSize = this.supplement(null, _opts.rowHeight, this.validateNumeric);\n      _props.width = this.supplement(null, _opts.width, this.validateNumeric);\n      _props.height = this.supplement(null, _opts.height, this.validateNumeric);\n      this._instanceProps = _props; // pre-cache\n\n      console.log(new Date(_props.begin));\n\n      if (/^(year|month)s?$/i.test(_opts.scale)) {\n        // For scales where the value of quantity per unit is variable length (:> 単位あたりの量の値が可変長であるスケールの場合\n        var _temp = this._verifyScale(_opts.scale),\n            _values = Object.values(_temp),\n            _averageDays = this.numRound(_values.reduce(function (a, v) {\n          return a + v;\n        }, 0) / _values.length, 4),\n            // Average days within the range\n        _baseDaysOfScale = /^years?$/i.test(_opts.scale) ? 365 : 30,\n            _totalWidth = 0; //console.log( '!', _opts.scale, _temp, _vals )\n\n\n        _values.forEach(function (days) {\n          _totalWidth += _this3.numRound(days * _props.scaleSize / _baseDaysOfScale, 2);\n        });\n\n        _props.scale = _averageDays * (24 * 60 * 60 * 1000);\n        _props.grids = _values.length;\n        _props.variableScale = _temp;\n        _props.fullwidth = _totalWidth;\n      } else {\n        // In case of fixed length scale (:> 固定長スケールの場合\n        _props.scale = this._verifyScale(_opts.scale);\n        _props.grids = Math.ceil((_props.end - _props.begin) / _props.scale);\n        _props.variableScale = null;\n        _props.fullwidth = _props.grids * _props.scaleSize;\n      }\n\n      _props.fullheight = _props.rows * _props.rowSize; // Define visible size according to full size of timeline (:> タイムラインのフルサイズに準じた可視サイズを定義\n\n      _props.visibleWidth = _props.width > 0 ? \"\".concat(_props.width <= _props.fullwidth ? _props.width : _props.fullwidth, \"px\") : '100%';\n      _props.visibleHeight = _props.height > 0 ? \"\".concat(_props.height <= _props.fullheight ? _props.height : _props.fullheight, \"px\") : 'auto';\n\n      for (var _prop in _props) {\n        if (_prop === 'width' || _prop === 'height' || _prop === 'variableScale') {\n          continue;\n        }\n\n        if (this.is_empty(_props[_prop])) {\n          throw new TypeError(\"Property \\\"\".concat(_prop, \"\\\" cannot set because undefined or invalid variable.\"));\n        }\n      }\n\n      if (_props.fullwidth < 2 || _props.fullheight < 2) {\n        throw new TypeError(\"The range of the timeline to be rendered is incorrect.\");\n      }\n\n      this._instanceProps = _props;\n    }\n    /*\r\n     * @private: Retrieve the pluggable datetime as milliseconds from specified keyword (:> 指定キーから作成されたプラガブルな日時をミリ秒単位で取得する\r\n     */\n\n  }, {\n    key: \"_getPluggableDatetime\",\n    value: function _getPluggableDatetime(key) {\n      var round_type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      var _opts = this._config,\n          _date = null,\n          getFirstDate = function getFirstDate(dateObj, scale) {\n        switch (true) {\n          case /^millenniums?|millennia$/i.test(scale):\n          case /^century$/i.test(scale):\n          case /^dec(ade|ennium)$/i.test(scale):\n          case /^lustrum$/i.test(scale):\n          case /^years?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), 0, 1);\n\n          case /^months?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), dateObj.getMonth(), 1);\n\n          case /^(week|day)s?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate());\n\n          case /^(|half|quarter)-?hours?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours());\n\n          case /^minutes?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes());\n\n          case /^seconds?$/i.test(scale):\n            return new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes(), dateObj.getSeconds());\n        }\n      },\n          getLastDate = function getLastDate(dateObj, scale) {\n        var _tmpDate;\n\n        switch (true) {\n          case /^millenniums?|millennia$/i.test(scale):\n          case /^century$/i.test(scale):\n          case /^dec(ade|ennium)$/i.test(scale):\n          case /^lustrum$/i.test(scale):\n          case /^years?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear() + 1, 0, 1);\n            break;\n\n          case /^months?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth() + 1, 1);\n            break;\n\n          case /^(week|day)s?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate() + 1);\n            break;\n\n          case /^(|half|quarter)-?hours?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours() + 1);\n            break;\n\n          case /^minutes?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes() + 1);\n            break;\n\n          case /^seconds?$/i.test(scale):\n            _tmpDate = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate(), dateObj.getHours(), dateObj.getMinutes(), dateObj.getSeconds() + 1);\n            break;\n        }\n\n        return new Date(_tmpDate.getTime() - 1);\n      };\n\n      switch (true) {\n        case /^current(|ly)$/i.test(key):\n          _date = new Date(); //console.log( '!_getPluggableDatetime::currently:', _opts.scale, this.getHigherScale( _opts.scale ), key, _date.getTime() )\n\n          break;\n\n        case /^auto$/i.test(key):\n          {\n            var _ms = null,\n                _higherScale = this.getHigherScale(_opts.scale);\n\n            if (/^current(|ly)$/i.test(_opts.startDatetime)) {\n              _date = new Date(); //if ( /^(year|month)s?$/i.test( _opts.scale ) ) {\n\n              _date = getFirstDate(_date, _opts.scale); //}\n            } else {\n              _date = this.getCorrectDatetime(_opts.startDatetime);\n            }\n\n            if (_opts.range || _opts.range > 0) {\n              if (/^years?$/i.test(_higherScale)) {\n                _ms = 365.25 * 24 * 60 * 60 * 1000;\n              } else if (/^months?$/i.test(_higherScale)) {\n                _ms = 30.44 * 24 * 60 * 60 * 1000;\n              } else {\n                _ms = this._verifyScale(_higherScale);\n              }\n\n              _date.setTime(_date.getTime() + _ms * _opts.range);\n            } else {\n              if (/^years?$/i.test(_opts.scale)) {\n                _ms = 365.25 * 24 * 60 * 60 * 1000;\n              } else if (/^months?$/i.test(_opts.scale)) {\n                _ms = 30.44 * 24 * 60 * 60 * 1000;\n              } else {\n                _ms = this._verifyScale(_opts.scale);\n              }\n\n              _date.setTime(_date.getTime() + _ms * LimitScaleGrids[this._filterScaleKeyName(_opts.scale)]);\n            } // console.log( '!_getPluggableDatetime::auto:', _opts.scale, this.getHigherScale( _opts.scale ), key, _date.getTime() )\n\n\n            break;\n          }\n\n        default:\n          _date = this.getCorrectDatetime(key);\n          break;\n      }\n\n      var is_remapping = _date.getFullYear() < 100;\n\n      if (!this.is_empty(round_type)) {\n        if ('first' === round_type) {\n          _date = getFirstDate(_date, _opts.scale);\n        } else if ('last' === round_type) {\n          _date = getLastDate(_date, _opts.scale);\n        }\n      }\n\n      if (is_remapping) {\n        _date.setFullYear(String(_date.getFullYear()).substr(-2));\n      }\n\n      return _date.getTime();\n    }\n    /*\r\n     * @private: Retrieve the pluggable parameter as an object (:> プラガブルなパラメータオブジェクトを取得する\r\n     */\n\n  }, {\n    key: \"_getPluggableParams\",\n    value: function _getPluggableParams(str_like_params) {\n      var params = {};\n\n      if (typeof str_like_params === 'string' && str_like_params) {\n        try {\n          params = JSON.parse(JSON.stringify(new Function(\"return \".concat(str_like_params))()));\n\n          if (params.hasOwnProperty('extend')) {\n            params.extend = JSON.parse(JSON.stringify(new Function(\"return \".concat(params.extend))()));\n          }\n        } catch (e) {\n          console.warn('Can not parse to object therefor invalid param.');\n        }\n      }\n\n      return params;\n    }\n    /*\r\n     * @private: Retrieve the pluggable rows of the timeline (:> プラガブルなタイムラインの行数を取得する\r\n     */\n\n  }, {\n    key: \"_getPluggableRows\",\n    value: function _getPluggableRows() {\n      var _opts = this._config,\n          fixed_rows = this.supplement('auto', _opts.rows, this.validateNumeric);\n\n      if (fixed_rows === 'auto') {\n        fixed_rows = _opts.sidebar.list.length;\n      }\n\n      return fixed_rows > 0 ? fixed_rows : 1;\n    }\n    /*\r\n     * @private: Verify the allowed scale, then retrieve that scale's millisecond if allowed (:> 許容スケールかを確認し、許可時はそのスケールのミリ秒を取得する\r\n     */\n\n  }, {\n    key: \"_verifyScale\",\n    value: function _verifyScale(scale) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _ms = -1;\n\n      if (typeof scale === 'undefined' || typeof scale !== 'string') {\n        return false;\n      }\n\n      switch (true) {\n        case /^millisec(|ond)s?$/i.test(scale):\n          // Millisecond (:> ミリ秒\n          _ms = 1;\n          break;\n\n        case /^seconds?$/i.test(scale):\n          // Second (:> 秒\n          _ms = 1000;\n          break;\n\n        case /^minutes?$/i.test(scale):\n          // Minute (:> 分\n          _ms = 60 * 1000;\n          break;\n\n        case /^quarter-?(|hour)$/i.test(scale):\n          // Quarter of an hour (:> 15分\n          _ms = 15 * 60 * 1000;\n          break;\n\n        case /^half-?(|hour)$/i.test(scale):\n          // Half an hour (:> 30分\n          _ms = 30 * 60 * 1000;\n          break;\n\n        case /^hours?$/i.test(scale):\n          // Hour (:> 時（時間）\n          _ms = 60 * 60 * 1000;\n          break;\n\n        case /^days?$/i.test(scale):\n          // Day (:> 日\n          _ms = 24 * 60 * 60 * 1000;\n          break;\n\n        case /^weeks?$/i.test(scale):\n          // Week (:> 週\n          _ms = 7 * 24 * 60 * 60 * 1000;\n          break;\n\n        case /^months?$/i.test(scale):\n          // Month (is the variable length scale) (:> 月（可変長スケール）\n          //console.log( '!_verifyScale::month:', this._instanceProps, _opts.scale )\n          if (/^(year|month)s?$/i.test(_opts.scale)) {\n            return this._diffDate(_props.begin, _props.end, scale);\n          } else {\n            _ms = 30.44 * 24 * 60 * 60 * 1000;\n            break;\n          }\n\n        case /^years?$/i.test(scale):\n          // Year (is the variable length scale) (:> 年（可変長スケール）\n          if (/^(year|month)s?$/i.test(_opts.scale)) {\n            return this._diffDate(_props.begin, _props.end, scale);\n          } else {\n            _ms = 365.25 * 24 * 60 * 60 * 1000;\n            break;\n          }\n\n        case /^lustrum$/i.test(scale):\n          // Lustrum (:> 五年紀\n          _ms = 3.1536 * Math.pow(10, 8) / 2 * 1000;\n          break;\n\n        case /^dec(ade|ennium)$/i.test(scale):\n          // Decade (:> 十年紀\n          _ms = 3.1536 * Math.pow(10, 8) * 1000;\n          break;\n\n        case /^century$/i.test(scale):\n          // Century (:> 世紀（百年紀）\n          _ms = 3155760000 * 1000;\n          break;\n\n        case /^millenniums?|millennia$/i.test(scale):\n          // Millennium (:> 千年紀\n          _ms = 3.1536 * Math.pow(10, 10) * 1000;\n          break;\n\n        default:\n          console.warn('Specified an invalid scale.');\n          _ms = -1;\n      }\n\n      return _ms > 0 ? _ms : false;\n    }\n    /*\r\n     * @private: Verify the display period of the timeline does not exceed the maximum renderable range (:> タイムラインの表示期間が最大描画可能範囲を超過していないか検証する\r\n     */\n\n  }, {\n    key: \"_verifyMaxRenderableRange\",\n    value: function _verifyMaxRenderableRange() {\n      // console.log( this._instanceProps.grids, '/', LimitScaleGrids[this._filterScaleKeyName( this._config.scale )] )\n      return this._instanceProps.grids <= LimitScaleGrids[this._filterScaleKeyName(this._config.scale)];\n    }\n    /*\r\n     * @private: Render the view of timeline container\r\n     */\n\n  }, {\n    key: \"_renderView\",\n    value: function _renderView() {\n      this._debug('_renderView');\n\n      var _elem = this._element,\n          _opts = this._config,\n          _props = this._instanceProps,\n          _tl_container = $('<div></div>', {\n        class: ClassName.TIMELINE_CONTAINER,\n        style: \"width: \".concat(_props.visibleWidth, \"; height: \").concat(_props.visibleHeight, \";\")\n      }),\n          _tl_main = $('<div></div>', {\n        class: ClassName.TIMELINE_MAIN\n      }); //console.log( _elem, _opts, _props )\n\n\n      if ($(_elem).length == 0) {\n        throw new TypeError('Does not exist the element to render a timeline container.');\n      }\n\n      if (_opts.debug) {\n        console.info(\"Timeline:{ fullWidth: \".concat(_props.fullwidth, \"px,\"), \"fullHeight: \".concat(_props.fullheight, \"px,\"), \"viewWidth: \".concat(_props.visibleWidth), \"viewHeight: \".concat(_props.visibleHeight, \" }\"));\n      }\n\n      $(_elem).css('position', 'relative'); // initialize; not .empty()\n\n      if (_opts.hideScrollbar) {\n        _tl_container.addClass(ClassName.HIDE_SCROLLBAR);\n      } // Create the timeline headline (:> タイムラインの見出しを生成\n\n\n      $(_elem).prepend(this._createHeadline()); // Create the timeline event container (:> タイムラインのイベントコンテナを生成\n\n      _tl_main.append(this._createEventContainer()); // Create the timeline ruler (:> タイムラインの目盛を生成\n\n\n      if (!this.is_empty(_opts.ruler.top)) {\n        _tl_main.prepend(this._createRuler('top'));\n      }\n\n      if (!this.is_empty(_opts.ruler.bottom)) {\n        _tl_main.append(this._createRuler('bottom'));\n      } // Create the timeline side index (:> タイムラインのサイドインデックスを生成\n\n\n      var margin = {\n        top: parseInt(_tl_main.find(Selector.RULER_TOP).height(), 10) - 1,\n        bottom: parseInt(_tl_main.find(Selector.RULER_BOTTOM).height(), 10) - 1\n      };\n\n      if (_opts.sidebar.list.length > 0) {\n        _tl_container.prepend(this._createSideIndex(margin));\n      } // Append the timeline container in the timeline element (:> タイムライン要素にタイムラインコンテナを追加\n\n\n      _tl_container.append(_tl_main);\n\n      $(_elem).append(_tl_container); // Create the timeline footer (:> タイムラインのフッタを生成\n\n      $(_elem).append(this._createFooter());\n      this._isShown = true;\n    }\n    /*\r\n     * @private: Create the headline of the timeline (:> タイムラインの見出しを作成する\r\n     */\n\n  }, {\n    key: \"_createHeadline\",\n    value: function _createHeadline() {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _display = this.supplement(Default.headline.display, _opts.headline.display, this.validateBoolean),\n          _title = this.supplement(null, _opts.headline.title),\n          _range = this.supplement(Default.headline.range, _opts.headline.range, this.validateBoolean),\n          _locale = this.supplement(Default.headline.locale, _opts.headline.locale),\n          _format = this.supplement(Default.headline.format, _opts.headline.format),\n          _begin = this.supplement(null, _props.begin),\n          _end = this.supplement(null, _props.end),\n          _tl_headline = $('<div></div>', {\n        class: ClassName.TIMELINE_HEADLINE\n      }),\n          _wrapper = $('<div></div>', {\n        class: ClassName.TIMELINE_HEADLINE_WRAPPER\n      }); // console.log( '!_createHeadline:', _opts )\n\n\n      if (_title) {\n        _wrapper.append(\"<h3 class=\\\"\".concat(ClassName.HEADLINE_TITLE, \"\\\">\").concat(_opts.headline.title, \"</h3>\"));\n      }\n\n      if (_range) {\n        if (_begin && _end) {\n          var _meta = \"\".concat(new Date(_begin).toLocaleString(_locale, _format), \"<span class=\\\"\").concat(ClassName.RANGE_SPAN, \"\\\"></span>\").concat(new Date(_end).toLocaleString(_locale, _format)); //let _meta = this.getCorrectDatetime( _begin ).toLocaleString( _locale, _format ) +'<span class=\"jqtl-range-span\"></span>'+ this.getCorrectDatetime( _end ).toLocaleString( _locale, _format )\n\n\n          _wrapper.append(\"<div class=\\\"\".concat(ClassName.RANGE_META, \"\\\">\").concat(_meta, \"</div>\"));\n        }\n      }\n\n      if (!_display) {\n        _tl_headline.addClass(ClassName.HIDE);\n      }\n\n      return _tl_headline.append(_wrapper);\n    }\n    /*\r\n     * @private: Create the event container of the timeline (:> タイムラインのイベントコンテナを作成する\r\n     */\n\n  }, {\n    key: \"_createEventContainer\",\n    value: function _createEventContainer() {\n      var _this4 = this;\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _actualHeight = _props.fullheight + Math.ceil(_props.rows / 2),\n          _container = $('<div></div>', {\n        class: ClassName.TIMELINE_EVENT_CONTAINER,\n        style: \"height:\".concat(_actualHeight, \"px;\")\n      }),\n          _events_bg = $(\"<canvas width=\\\"\".concat(_props.fullwidth - 1, \"\\\" height=\\\"\").concat(_actualHeight, \"\\\" class=\\\"\").concat(ClassName.TIMELINE_BACKGROUND_GRID, \"\\\"></canvas>\")),\n          _events_lines = $(\"<canvas width=\\\"\".concat(_props.fullwidth - 1, \"\\\" height=\\\"\").concat(_actualHeight, \"\\\" class=\\\"\").concat(ClassName.TIMELINE_RELATION_LINES, \"\\\"></canvas>\")),\n          _events_body = $('<div></div>', {\n        class: ClassName.TIMELINE_EVENTS\n      }),\n          _cy = 0,\n          ctx_grid = _events_bg[0].getContext('2d'),\n          drawRowRect = function drawRowRect(pos_y, color) {\n        color = _this4.supplement('#FFFFFF', color); // console.log( 0, pos_y, _fullwidth, _size_row, color )\n\n        ctx_grid.fillStyle = color;\n        ctx_grid.fillRect(0, pos_y + 0.5, _props.fullwidth, _props.rowSize + 1.5);\n        ctx_grid.stroke();\n      },\n          drawHorizontalLine = function drawHorizontalLine(pos_y, is_dotted) {\n        is_dotted = _this4.supplement(false, is_dotted); // console.log( pos_y, is_dotted )\n\n        ctx_grid.strokeStyle = 'rgba( 51, 51, 51, 0.1 )';\n        ctx_grid.lineWidth = 1;\n        ctx_grid.filter = 'url(#crisp)';\n        ctx_grid.beginPath();\n\n        if (is_dotted) {\n          ctx_grid.setLineDash([1, 2]);\n        } else {\n          ctx_grid.setLineDash([]);\n        }\n\n        ctx_grid.moveTo(0, pos_y + 0.5);\n        ctx_grid.lineTo(_props.fullwidth, pos_y + 0.5);\n        ctx_grid.closePath();\n        ctx_grid.stroke();\n      },\n          drawVerticalLine = function drawVerticalLine(pos_x, is_dotted) {\n        is_dotted = _this4.supplement(false, is_dotted); // console.log( pos_x, is_dotted )\n\n        ctx_grid.strokeStyle = 'rgba( 51, 51, 51, 0.025 )';\n        ctx_grid.lineWidth = 1;\n        ctx_grid.filter = 'url(#crisp)';\n        ctx_grid.beginPath();\n\n        if (is_dotted) {\n          ctx_grid.setLineDash([1, 2]);\n        } else {\n          ctx_grid.setLineDash([]);\n        }\n\n        ctx_grid.moveTo(pos_x - 0.5, 0);\n        ctx_grid.lineTo(pos_x - 0.5, _props.fullheight);\n        ctx_grid.closePath();\n        ctx_grid.stroke();\n      };\n\n      _cy = 0;\n\n      for (var i = 0; i < _props.rows; i++) {\n        _cy += i % 2 == 0 ? 1 : 0;\n\n        var _pos_y = i * _props.rowSize + _cy;\n\n        drawRowRect(_pos_y, i % 2 == 0 ? '#FEFEFE' : '#F8F8F8');\n      }\n\n      _cy = 0;\n\n      for (var _i2 = 1; _i2 < _props.rows; _i2++) {\n        _cy += _i2 % 2 == 0 ? 1 : 0;\n\n        var _pos_y2 = _i2 * _props.rowSize + _cy;\n\n        drawHorizontalLine(_pos_y2, true);\n      }\n\n      if (/^(year|month)s?$/i.test(_opts.scale)) {\n        // For scales where the value of quantity per unit is variable length (:> 単位あたりの量の値が可変長であるスケールの場合\n        var _bc = /^years?$/i.test(_opts.scale) ? 365 : 30,\n            _sy = 0;\n\n        var _arr2 = Object.keys(_props.variableScale);\n\n        for (var _i3 = 0; _i3 < _arr2.length; _i3++) {\n          var _key = _arr2[_i3];\n          _sy += this.numRound(_props.variableScale[_key] * _props.scaleSize / _bc, 2);\n          drawVerticalLine(_sy, false);\n        }\n      } else {\n        // In case of fixed length scale (:> 固定長スケールの場合\n        for (var _i4 = 1; _i4 < _props.grids; _i4++) {\n          drawVerticalLine(_i4 * _props.scaleSize, false);\n        }\n      }\n\n      return _container.append(_events_bg).append(_events_lines).append(_events_body);\n    }\n    /*\r\n     * @private: Create the ruler of the timeline (:> タイムラインの目盛を作成する\r\n     */\n\n  }, {\n    key: \"_createRuler\",\n    value: function _createRuler(position) {\n      var _this5 = this;\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          ruler_line = this.supplement([_opts.scale], _opts.ruler[position].lines, function (def, val) {\n        return Array.isArray(val) && val.length > 0 ? val : def;\n      }),\n          line_height = this.supplement(Default.ruler.top.height, _opts.ruler[position].height),\n          font_size = this.supplement(Default.ruler.top.fontSize, _opts.ruler[position].fontSize),\n          text_color = this.supplement(Default.ruler.top.color, _opts.ruler[position].color),\n          background = this.supplement(Default.ruler.top.background, _opts.ruler[position].background),\n          locale = this.supplement(Default.ruler.top.locale, _opts.ruler[position].locale),\n          format = this.supplement(Default.ruler.top.format, _opts.ruler[position].format),\n          ruler_opts = {\n        lines: ruler_line,\n        height: line_height,\n        fontSize: font_size,\n        color: text_color,\n        background: background,\n        locale: locale,\n        format: format\n      },\n          _fullwidth = _props.fullwidth - 1,\n          _fullheight = ruler_line.length * line_height,\n          _ruler = $('<div></div>', {\n        class: \"\".concat(PREFIX, \"ruler-\").concat(position),\n        style: \"height:\".concat(_fullheight, \"px;\")\n      }),\n          _ruler_bg = $(\"<canvas class=\\\"\".concat(PREFIX, \"ruler-bg-\").concat(position, \"\\\" width=\\\"\").concat(_fullwidth, \"\\\" height=\\\"\").concat(_fullheight, \"\\\"></canvas>\")),\n          _ruler_body = $('<div></div>', {\n        class: \"\".concat(PREFIX, \"ruler-content-\").concat(position)\n      }),\n          _finalLines = 0,\n          ctx_ruler = _ruler_bg[0].getContext('2d'); //console.log( grids, size_per_grid, scale, begin, min_scale, ruler, position, ruler_line, line_height, ctx_ruler.canvas.width, ctx_ruler.canvas.height )\n      // Draw background of ruler\n\n\n      ctx_ruler.fillStyle = background;\n      ctx_ruler.fillRect(0, 0, ctx_ruler.canvas.width, ctx_ruler.canvas.height); // Draw stroke of ruler\n\n      ctx_ruler.strokeStyle = 'rgba( 51, 51, 51, 0.1 )';\n      ctx_ruler.lineWidth = 1;\n      ctx_ruler.filter = 'url(#crisp)';\n      ruler_line.some(function (line_scale, idx) {\n        if (/^(quarter|half)-?(|hour)$/i.test(line_scale)) {\n          return true; // break\n        }\n\n        ctx_ruler.beginPath(); // Draw rows\n        //let _line_x = position === 'top' ? 0 : ctx_ruler.canvas.width,\n\n        var _line_y = position === 'top' ? line_height * (idx + 1) - 0.5 : line_height * idx + 0.5;\n\n        ctx_ruler.moveTo(0, _line_y);\n        ctx_ruler.lineTo(ctx_ruler.canvas.width, _line_y); // Draw cols\n\n        var _line_grids = null,\n            _grid_x = 0,\n            _correction = -1.5;\n\n        if (/^(year|month)s?$/i.test(_opts.scale)) {\n          // For scales where the value of quantity per unit is variable length (:> 単位あたりの量の値が可変長であるスケールの場合\n          _line_grids = _this5._filterVariableScale(line_scale);\n\n          var _arr3 = Object.keys(_line_grids);\n\n          for (var _i5 = 0; _i5 < _arr3.length; _i5++) {\n            var _key = _arr3[_i5];\n            _grid_x += _this5.numRound(_line_grids[_key], 2);\n            ctx_ruler.moveTo(_grid_x + _correction, position === 'top' ? _line_y - line_height : _line_y);\n            ctx_ruler.lineTo(_grid_x + _correction, position === 'top' ? _line_y : _line_y + line_height);\n          }\n        } else {\n          // In case of fixed length scale (:> 固定長スケールの場合\n          _line_grids = _this5._getGridsPerScale(line_scale);\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = _line_grids[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var _val = _step.value;\n\n              if (_this5.is_empty(_val) || _val >= _props.grids) {\n                break;\n              }\n\n              var _grid_width = _val * _props.scaleSize;\n\n              _grid_x += _grid_width;\n\n              if (Math.ceil(_grid_x) - _correction >= ctx_ruler.canvas.width) {\n                break;\n              }\n\n              ctx_ruler.moveTo(_grid_x + _correction, position === 'top' ? _line_y - line_height : _line_y);\n              ctx_ruler.lineTo(_grid_x + _correction, position === 'top' ? _line_y : _line_y + line_height);\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n\n        ctx_ruler.closePath();\n        ctx_ruler.stroke();\n\n        _ruler_body.append(_this5._createRulerContent(_line_grids, line_scale, ruler_opts));\n\n        _finalLines++;\n      });\n\n      if (ruler_line.length != _finalLines) {\n        _ruler.css('height', \"\".concat(_finalLines * line_height, \"px\"));\n      }\n\n      return _ruler.append(_ruler_bg).append(_ruler_body);\n    }\n    /*\r\n     * @private: Filter to aggregate the grid width of the variable length scale (:> 可変長スケールのグリッド幅を集約するフィルタ\r\n     */\n\n  }, {\n    key: \"_filterVariableScale\",\n    value: function _filterVariableScale(target_scale) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _bc = /^years?$/i.test(_opts.scale) ? 365 : 30,\n          scales = _props.variableScale,\n          retObj = {};\n\n      var _arr4 = Object.keys(scales);\n\n      for (var _i6 = 0; _i6 < _arr4.length; _i6++) {\n        var _dt = _arr4[_i6];\n\n        var _days = scales[_dt],\n            grid_size = this.numRound(_days * _props.scaleSize / _bc, 2),\n            _newKey = null,\n            _arr = void 0,\n            _temp = void 0; //console.log( '!_filterVariableScale:', _dt, this.getCorrectDatetime( _dt ).getFullYear(), _days )\n\n\n        switch (true) {\n          case /^millenniums?|millennia$/i.test(target_scale):\n            _newKey = Math.ceil(this.getCorrectDatetime(_dt).getFullYear() / 1000);\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^century$/i.test(target_scale):\n            _newKey = Math.ceil(this.getCorrectDatetime(_dt).getFullYear() / 100);\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^dec(ade|ennium)$/i.test(target_scale):\n            _newKey = Math.ceil(this.getCorrectDatetime(_dt).getFullYear() / 10);\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^lustrum$/i.test(target_scale):\n            _newKey = Math.ceil(this.getCorrectDatetime(_dt).getFullYear() / 5);\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^years?$/i.test(target_scale):\n            _newKey = \"\".concat(this.getCorrectDatetime(_dt).getFullYear());\n\n            if (retObj.hasOwnProperty(_newKey)) {\n              retObj[_newKey] += grid_size;\n            } else {\n              retObj[_newKey] = grid_size;\n            }\n\n            break;\n\n          case /^months?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1)] = grid_size;\n            break;\n\n          case /^weeks?$/i.test(target_scale):\n            _arr = _dt.split(',');\n            _temp = this.getWeek(_arr[0]);\n            retObj[\"\".concat(this.getCorrectDatetime(_arr[0]).getFullYear(), \",\").concat(_temp)] = grid_size;\n            break;\n\n          case /^weekdays?$/i.test(target_scale):\n            _arr = _dt.split(',');\n            _temp = this.getCorrectDatetime(_arr[0]).getDay();\n            retObj[\"\".concat(this.getCorrectDatetime(_arr[0]).getFullYear(), \"/\").concat(this.getCorrectDatetime(_arr[0]).getMonth() + 1, \"/1,\").concat(_temp)] = grid_size;\n            break;\n\n          case /^days?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1, \"/1\")] = grid_size;\n            break;\n\n          case /^hours?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1, \"/1 0\")] = grid_size;\n            break;\n\n          case /^minutes?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1, \"/1 0:00\")] = grid_size;\n            break;\n\n          case /^seconds?$/i.test(target_scale):\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1, \"/1 0:00:00\")] = grid_size;\n            break;\n\n          default:\n            retObj[\"\".concat(this.getCorrectDatetime(_dt).getFullYear(), \"/\").concat(this.getCorrectDatetime(_dt).getMonth() + 1)] = grid_size;\n            break;\n        }\n      }\n\n      return retObj;\n    }\n    /*\r\n     * @private: Get the grid number per scale (for fixed length scale) (:> スケールごとのグリッド数を取得する（固定長スケール用）\r\n     */\n\n  }, {\n    key: \"_getGridsPerScale\",\n    value: function _getGridsPerScale(target_scale) {\n      //let _opts        = this._config,\n      var _props = this._instanceProps,\n          _scopes = [],\n          _scale_grids = {},\n          _sep = '/';\n\n      for (var i = 0; i < _props.grids; i++) {\n        var _tmp = new Date(_props.begin + i * _props.scale),\n            //let _tmp = this.getCorrectDatetime( _props.begin + ( i * _props.scale ) ),\n        _y = _tmp.getFullYear(),\n            _mil = Math.ceil(_y / 1000),\n            _cen = Math.ceil(_y / 100),\n            _dec = Math.ceil(_y / 10),\n            _lus = Math.ceil(_y / 5),\n            _m = _tmp.getMonth() + 1,\n            _wd = _tmp.getDay(),\n            // 0 = Sun, ... 6 = Sat\n        _d = _tmp.getDate(),\n            _w = this.getWeek(\"\".concat(_y, \"/\").concat(_m, \"/\").concat(_d)),\n            _h = _tmp.getHours(),\n            _min = _tmp.getMinutes(),\n            _s = _tmp.getSeconds();\n\n        _scopes.push({\n          millennium: _mil,\n          century: _cen,\n          decade: _dec,\n          lustrum: _lus,\n          year: _y,\n          month: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep, \"1\"),\n          week: \"\".concat(_y, \",\").concat(_w),\n          weekday: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d, \",\").concat(_wd),\n          day: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d),\n          hour: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d, \" \").concat(_h),\n          minute: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d, \" \").concat(_h, \":\").concat(_min),\n          second: \"\".concat(_y).concat(_sep).concat(_m).concat(_sep).concat(_d, \" \").concat(_h, \":\").concat(_min, \":\").concat(_s),\n          datetime: _tmp.toString()\n        });\n      }\n\n      _scopes.forEach(function (_scope) {\n        //console.log( _scope[target_scale], idx );\n        if (!_scale_grids[_scope[target_scale]]) {\n          _scale_grids[_scope[target_scale]] = 1;\n        } else {\n          _scale_grids[_scope[target_scale]]++;\n        }\n      }); //console.log( '!_getGridsPerScale:', target_scale, _scale_grids )\n\n\n      return this.toIterableObject(_scale_grids);\n    }\n    /*\r\n     * @private: Create the content of ruler of the timeline (:> タイムラインの目盛本文を作成する\r\n     */\n\n  }, {\n    key: \"_createRulerContent\",\n    value: function _createRulerContent(_line_grids, line_scale, ruler) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          line_height = this.supplement(Default.ruler.top.height, ruler.height),\n          font_size = this.supplement(Default.ruler.top.fontSize, ruler.fontSize),\n          text_color = this.supplement(Default.ruler.top.color, ruler.color),\n          locale = this.supplement(Default.ruler.top.locale, ruler.locale, this.validateString),\n          format = this.supplement(Default.ruler.top.format, ruler.format, this.validateObject),\n          _ruler_lines = $('<div></div>', {\n        class: ClassName.TIMELINE_RULER_LINES,\n        style: \"width:100%;height:\".concat(line_height, \"px;\")\n      });\n\n      var _arr5 = Object.keys(_line_grids);\n\n      for (var _i7 = 0; _i7 < _arr5.length; _i7++) {\n        var _key = _arr5[_i7];\n\n        var _item_width = /^(year|month)s?$/i.test(_opts.scale) ? _line_grids[_key] : _line_grids[_key] * _props.scaleSize,\n            _line = $('<div></div>', {\n          class: ClassName.TIMELINE_RULER_ITEM,\n          style: \"width:\".concat(_item_width, \"px;height:\").concat(line_height, \"px;line-height:\").concat(line_height, \"px;font-size:\").concat(font_size, \"px;color:\").concat(text_color, \";\")\n        }),\n            _ruler_string = this.getLocaleString(_key, line_scale, locale, format),\n            _data_ruler_item = ''; //console.log( '!_createRulerContent:', _key, _line_grids[_key], line_scale, locale, format, _item_width, _ruler_string )\n\n\n        _data_ruler_item = \"\".concat(line_scale, \"-\").concat(_data_ruler_item === '' ? String(_key) : _data_ruler_item);\n\n        _line.attr('data-ruler-item', _data_ruler_item).html(_ruler_string);\n\n        if (_item_width > this.strWidth(_ruler_string)) {\n          // Adjust position of ruler item string\n          //console.log( _item_width, _ruler_string, _ruler_string.length, this.strWidth( _ruler_string ), $(this._element).width() )\n          if (_item_width > $(this._element).width()) {\n            _line.addClass(ClassName.RULER_ITEM_ALIGN_LEFT);\n          }\n        }\n\n        _ruler_lines.append(_line).attr('data-ruler-scope', line_scale);\n      }\n\n      return _ruler_lines;\n    }\n    /*\r\n     * @private: Create the side indexes of the timeline (:> タイムラインのサイド・インデックスを作成する\r\n     */\n\n  }, {\n    key: \"_createSideIndex\",\n    value: function _createSideIndex(margin) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _sticky = this.supplement(Default.sidebar.sticky, _opts.sidebar.sticky),\n          _overlay = this.supplement(Default.sidebar.overlay, _opts.sidebar.overlay),\n          _sbList = this.supplement(Default.sidebar.list, _opts.sidebar.list),\n          _wrapper = $('<div></div>', {\n        class: ClassName.TIMELINE_SIDEBAR\n      }),\n          _margin = $('<div></div>', {\n        class: ClassName.TIMELINE_SIDEBAR_MARGIN\n      }),\n          _list = $('<div></div>', {\n        class: ClassName.TIMELINE_SIDEBAR_ITEM\n      }),\n          _c = 0.5;\n\n      if (_sticky) {\n        _wrapper.addClass(ClassName.STICKY_LEFT);\n      }\n\n      if (_overlay) {\n        _list.addClass(ClassName.OVERLAY);\n      } //_wrapper.css( 'margin-top', margin.top + 'px' ).css( 'margin-bottom', margin.bottom + 'px' )\n\n\n      if (margin.top > 0) {\n        _wrapper.prepend(_margin.clone().css('height', \"\".concat(margin.top + 1, \"px\")));\n      }\n\n      for (var i = 0; i < _props.rows; i++) {\n        var _item = _list.clone().html(_sbList[i]);\n\n        _wrapper.append(_item);\n      }\n\n      _wrapper.find(Selector.TIMELINE_SIDEBAR_ITEM).css('height', \"\".concat(_props.rowSize + _c, \"px\")).css('line-height', \"\".concat(_props.rowSize + _c, \"px\"));\n\n      if (margin.bottom > 0) {\n        _wrapper.append(_margin.clone().css('height', \"\".concat(margin.bottom + 1, \"px\")));\n      }\n\n      return _wrapper;\n    }\n    /*\r\n     * @private: Create the footer of the timeline (:> タイムラインのフッターを作成する\r\n     */\n\n  }, {\n    key: \"_createFooter\",\n    value: function _createFooter() {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _display = this.supplement(Default.footer.display, _opts.footer.display),\n          _content = this.supplement(null, _opts.footer.content),\n          _range = this.supplement(Default.footer.range, _opts.footer.range),\n          _scale = this.supplement(Default.footer.scale, _opts.footer.scale),\n          _locale = this.supplement(Default.footer.locale, _opts.footer.locale),\n          _format = this.supplement(Default.footer.format, _opts.footer.format),\n          _begin = this.supplement(null, _props.begin),\n          _end = this.supplement(null, _props.end),\n          _tl_footer = $('<div></div>', {\n        class: ClassName.TIMELINE_FOOTER\n      });\n\n      if (_range) {\n        if (_begin && _end) {\n          var _meta = \"\".concat(new Date(_begin).toLocaleString(_locale, _format), \"<span class=\\\"\").concat(ClassName.RANGE_SPAN, \"\\\"></span>\").concat(new Date(_end).toLocaleString(_locale, _format)); //let _meta = this.getCorrectDatetime( _begin ).toLocaleString( _locale, _format ) +'<span class=\"jqtl-range-span\"></span>'+ this.getCorrectDatetime( _end ).toLocaleString( _locale, _format )\n\n\n          _tl_footer.append(\"<div class=\\\"\".concat(ClassName.RANGE_META, \" \").concat(ClassName.ALIGN_SELF_RIGHT, \"\\\">\").concat(_meta, \"</div>\"));\n        }\n      }\n\n      if (_content) {\n        _tl_footer.append(\"<div class=\\\"\".concat(ClassName.TIMELINE_FOOTER_CONTENT, \"\\\">\").concat(_content, \"</div>\"));\n      }\n\n      if (!_display) {\n        _tl_footer.addClass(ClassName.HIDE);\n      }\n\n      return _tl_footer;\n    }\n    /*\r\n     * @private: Acquire the difference between two dates with the specified scale value (:> 2つの日付の差分を指定したスケール値で取得する\r\n     */\n\n  }, {\n    key: \"_diffDate\",\n    value: function _diffDate(date1, date2) {\n      var scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'millisecond';\n      var absval = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      //let _opts  = this._config,\n      var _dt1 = this.supplement(null, date1),\n          _dt2 = this.supplement(null, date2),\n          diffMS = 0,\n          retval = false,\n          lastDayOfMonth = function lastDayOfMonth(dateObj) {\n        var _tmp = new Date(dateObj.getFullYear(), dateObj.getMonth() + 1, 1);\n\n        _tmp.setTime(_tmp.getTime() - 1);\n\n        return _tmp.getDate();\n      },\n          isLeapYear = function isLeapYear(dateObj) {\n        var _tmp = new Date(dateObj.getFullYear(), 0, 1),\n            sum = 0;\n\n        for (var i = 0; i < 12; i++) {\n          _tmp.setMonth(i);\n\n          sum += lastDayOfMonth(_tmp);\n        }\n\n        return sum == 365 ? false : true;\n      };\n\n      if (!_dt1 || !_dt2) {\n        console.warn('Cannot parse date because invalid format or undefined.');\n        return false;\n      }\n\n      diffMS = _dt2 - _dt1;\n\n      if (absval) {\n        diffMS = Math.abs(diffMS);\n      }\n\n      var _bd = new Date(_dt1),\n          _ed = new Date(_dt2),\n          _dy = _ed.getFullYear() - _bd.getFullYear(),\n          _m = {};\n\n      switch (true) {\n        case /^years?$/i.test(scale):\n          if (_dy > 0) {\n            for (var i = 0; i <= _dy; i++) {\n              var _cd = new Date(_bd.getFullYear() + i, 0, 1);\n\n              _m[\"\".concat(_bd.getFullYear() + i)] = isLeapYear(_cd) ? 366 : 365;\n            }\n          } else {\n            _m[\"\".concat(_bd.getFullYear())] = isLeapYear(_bd) ? 366 : 365;\n          }\n\n          retval = _m;\n          break;\n\n        case /^months?$/i.test(scale):\n          if (_dy > 0) {\n            for (var _i8 = _bd.getMonth(); _i8 < 12; _i8++) {\n              var _cd2 = new Date(_bd.getFullYear(), _i8, 1);\n\n              _m[\"\".concat(_bd.getFullYear(), \"/\").concat(_i8 + 1)] = lastDayOfMonth(_cd2);\n            }\n\n            if (_dy > 1) {\n              for (var y = 1; y < _dy; y++) {\n                for (var _i9 = 0; _i9 < 12; _i9++) {\n                  var _cd3 = new Date(_bd.getFullYear() + y, _i9, 1);\n\n                  _m[\"\".concat(_bd.getFullYear() + y, \"/\").concat(_i9 + 1)] = lastDayOfMonth(_cd3);\n                }\n              }\n            }\n\n            for (var _i10 = 0; _i10 <= _ed.getMonth(); _i10++) {\n              var _cd4 = new Date(_ed.getFullYear(), _i10, 1);\n\n              _m[\"\".concat(_ed.getFullYear(), \"/\").concat(_i10 + 1)] = lastDayOfMonth(_cd4);\n            }\n          } else {\n            for (var _i11 = _bd.getMonth(); _i11 <= _ed.getMonth(); _i11++) {\n              var _cd5 = new Date(_bd.getFullYear(), _i11, 1);\n\n              _m[\"\".concat(_bd.getFullYear(), \"/\").concat(_i11 + 1)] = lastDayOfMonth(_cd5);\n            }\n          }\n\n          retval = _m;\n          break;\n\n        case /^weeks?$/i.test(scale):\n          retval = Math.ceil(diffMS / (7 * 24 * 60 * 60 * 1000));\n          break;\n\n        case /^(|week)days?$/i.test(scale):\n          retval = Math.ceil(diffMS / (24 * 60 * 60 * 1000));\n          break;\n\n        case /^hours?$/i.test(scale):\n          retval = Math.ceil(diffMS / (60 * 60 * 1000));\n          break;\n\n        case /^minutes?$/i.test(scale):\n          retval = Math.ceil(diffMS / (60 * 1000));\n          break;\n\n        case /^seconds?$/i.test(scale):\n          retval = Math.ceil(diffMS / 1000);\n          break;\n\n        default:\n          retval = diffMS;\n          break;\n      } //console.log( '!_diffDate:', retval )\n\n\n      return retval;\n    }\n    /*\r\n     * @private: Load all enabled events markupped on target element to the timeline object (:> 対象要素にマークアップされたすべての有効なイベントをタイムラインにロードする\r\n     */\n\n  }, {\n    key: \"_loadEvent\",\n    value: function _loadEvent() {\n      this._debug('_loadEvent');\n\n      var _that = this,\n          _elem = this._element,\n          _event_list = $(_elem).find(Selector.DEFAULT_EVENTS),\n          _cnt = 0,\n          events = [],\n          lastEventId = 0;\n\n      _event_list.children().each(function () {\n        var _attr = $(this).attr('data-timeline-node');\n\n        if (typeof _attr !== 'undefined' && _attr !== false) {\n          _cnt++;\n        }\n      });\n\n      if (_event_list.length == 0 || _cnt == 0) {\n        this._debug('Enable event does not exist.');\n      } // Register Event Data\n\n\n      _event_list.children().each(function () {\n        var _evt_params = _that._getPluggableParams($(this).attr('data-timeline-node')),\n            _one_event = {};\n\n        if (!_that.is_empty(_evt_params)) {\n          _one_event = _that._registerEventData(this, _evt_params);\n          events.push(_one_event);\n          lastEventId = Math.max(lastEventId, parseInt(_one_event.eventId, 10));\n        }\n      }); // Set event id with auto increment (:> イベントIDを自動採番\n\n\n      var cacheIds = []; // for checking duplication of id (:> IDの重複チェック用\n\n      events.forEach(function (_evt, _i, _this) {\n        var _chkId = parseInt(_this[_i].eventId, 10);\n\n        if (_chkId == 0 || cacheIds.includes(_chkId)) {\n          lastEventId++;\n          _this[_i].eventId = lastEventId;\n        } else {\n          _this[_i].eventId = _chkId;\n        }\n\n        cacheIds.push(_this[_i].eventId);\n      });\n      this._isCached = this._saveToCache(events);\n    }\n    /*\r\n     * @private: Register one event data as object (:> イベントデータをオブジェクトとして登録する\r\n     */\n\n  }, {\n    key: \"_registerEventData\",\n    value: function _registerEventData(event_element, params) {\n      var _this6 = this;\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          new_event = _objectSpread({}, EventParams, {\n        uid: this.generateUniqueID(),\n        label: $(event_element).html()\n      }),\n          _relation = {},\n          _x,\n          _w,\n          _c; //, _pointSize\n      //console.log( '!_registerEventData:', _opts, params )\n\n\n      if (params.hasOwnProperty('start') && !this.is_empty(params.start)) {\n        _x = this._getCoordinateX(params.start);\n        new_event.x = this.numRound(_x, 2);\n\n        if (params.hasOwnProperty('end') && !this.is_empty(params.end)) {\n          _x = this._getCoordinateX(params.end);\n          _w = _x - new_event.x;\n          new_event.width = this.numRound(_w, 2);\n\n          if (_opts.eventMeta.display) {\n            if (this.is_empty(_opts.eventMeta.content) && !params.hasOwnProperty('rangeMeta')) {\n              //console.log( '!_registerEventData:', _opts.eventMeta.locale, _opts.eventMeta.format, _opts.scale, params )\n              new_event.rangeMeta += this.getLocaleString(params.start, _opts.eventMeta.scale, _opts.eventMeta.locale, _opts.eventMeta.format);\n              new_event.rangeMeta += \" - \".concat(this.getLocaleString(params.end, _opts.eventMeta.scale, _opts.eventMeta.locale, _opts.eventMeta.format));\n            } else {\n              new_event.rangeMeta = _opts.eventMeta.content;\n            }\n          }\n        } else {\n          new_event.width = 0;\n        } //console.log( 'getX:', _x, 'getW:', _w, event_element )\n\n\n        if (params.hasOwnProperty('row')) {\n          _c = Math.floor(params.row / 2);\n          new_event.y = (params.row - 1) * _opts.rowHeight + new_event.margin + _c;\n        }\n\n        Object.keys(new_event).forEach(function (_prop) {\n          switch (true) {\n            case /^eventId$/i.test(_prop):\n              if (params.hasOwnProperty('id') && _this6.is_empty(new_event.eventId)) {\n                new_event.eventId = parseInt(params.id, 10);\n              } else {\n                new_event.eventId = parseInt(params[_prop], 10) || 0;\n              }\n\n              break;\n\n            case /^(label|content)$/i.test(_prop):\n              if (params.hasOwnProperty(_prop) && !_this6.is_empty(params[_prop])) {\n                new_event[_prop] = params[_prop];\n              } // Override the children element to label or content setting\n\n\n              if ($(event_element).children(\".event-\".concat(_prop)).length > 0) {\n                new_event[_prop] = $(event_element).children(\".event-\".concat(_prop)).html();\n              } //console.log( '!_registerEventData:', _prop, params[_prop], new_event[_prop] )\n\n\n              break;\n\n            case /^relation$/i.test(_prop):\n              // For drawing the relation line\n              if (/^point(|er)$/i.test(_opts.type)) {\n                //let _pointSize  = this._getPointerSize( new_event.size, new_event.margin )\n                _relation.x = _this6.numRound(new_event.x, 2);\n                _relation.y = _this6.numRound(_props.rowSize * ((params.row || 1) - 1) + _props.rowSize / 2, 2); //console.log( '!_registerEventData:', params, new_event.x, new_event.y, _pointSize, _relation )\n\n                new_event[_prop] = _objectSpread({}, params[_prop], _relation);\n              }\n\n              break;\n\n            default:\n              if (params.hasOwnProperty(_prop) && !_this6.is_empty(params[_prop])) {\n                new_event[_prop] = params[_prop];\n              }\n\n              break;\n          }\n        });\n      } //console.log( '!_registerEventData:', new_event )\n\n\n      return new_event;\n    }\n    /*\r\n     * @private: Get the coordinate X on the timeline of any date (:> 任意の日付のタイムライン上のX座標（横軸座標）を取得する\r\n     */\n\n  }, {\n    key: \"_getCoordinateX\",\n    value: function _getCoordinateX(date) {\n      //let _opts  = this._config,\n      var _props = this._instanceProps,\n          _date = this.supplement(null, this._getPluggableDatetime(date)),\n          coordinate_x = 0;\n\n      if (_date) {\n        if (_date - _props.begin >= 0 && _props.end - _date >= 0) {\n          // When the given date is within the range of timeline begin and end (:> 指定された日付がタイムラインの開始と終了の範囲内にある場合\n          coordinate_x = Math.abs(_date - _props.begin) / _props.scale * _props.scaleSize;\n        } else {\n          // When the given date is out of timeline range (:> 指定された日付がタイムラインの範囲外にある場合\n          coordinate_x = (_date - _props.begin) / _props.scale * _props.scaleSize;\n        }\n      } else {\n        console.warn('Cannot parse date because invalid format or undefined.');\n      }\n\n      return coordinate_x;\n    }\n    /*\r\n     * @private: Cache the event data to the web storage (:> イベントデータをWEBストレージへキャッシュ\r\n     */\n\n  }, {\n    key: \"_saveToCache\",\n    value: function _saveToCache(data) {\n      var strageEngine = /^local(|Storage)$/i.test(this._config.storage) ? 'localStorage' : 'sessionStorage',\n          is_available = strageEngine in window && (strageEngine === 'localStorage' ? window.localStorage : window.sessionStorage) !== null;\n\n      if (is_available) {\n        if (strageEngine === 'localStorage') {\n          localStorage.setItem(this._selector, JSON.stringify(data));\n        } else {\n          sessionStorage.setItem(this._selector, JSON.stringify(data));\n        }\n\n        return true;\n      } else {\n        throw new TypeError(\"The storage named \\\"\".concat(strageEngine, \"\\\" can not be available.\"));\n      }\n    }\n    /*\r\n     * @private: Load the cached event data from the web storage (:> キャッシュされたイベントデータをWEBストレージから読み込む\r\n     */\n\n  }, {\n    key: \"_loadToCache\",\n    value: function _loadToCache() {\n      var strageEngine = /^local(|Storage)$/i.test(this._config.storage) ? 'localStorage' : 'sessionStorage',\n          is_available = strageEngine in window && (strageEngine === 'localStorage' ? window.localStorage : window.sessionStorage) !== null,\n          data = null;\n\n      if (is_available) {\n        if (strageEngine === 'localStorage') {\n          data = JSON.parse(localStorage.getItem(this._selector));\n        } else {\n          data = JSON.parse(sessionStorage.getItem(this._selector));\n        }\n      } else {\n        throw new TypeError(\"The storage named \\\"\".concat(strageEngine, \"\\\" can not be available.\"));\n      }\n\n      return data;\n    }\n    /*\r\n     * @private: Remove the cache data on the web storage (:> WEBストレージ上のキャッシュデータを削除する\r\n     */\n\n  }, {\n    key: \"_removeCache\",\n    value: function _removeCache() {\n      var strageEngine = /^local(|Storage)$/i.test(this._config.storage) ? 'localStorage' : 'sessionStorage',\n          is_available = strageEngine in window && (strageEngine === 'localStorage' ? window.localStorage : window.sessionStorage) !== null;\n\n      if (is_available) {\n        if (strageEngine === 'localStorage') {\n          localStorage.removeItem(this._selector);\n        } else {\n          sessionStorage.removeItem(this._selector);\n        }\n      } else {\n        throw new TypeError(\"The storage named \\\"\".concat(strageEngine, \"\\\" can not be available.\"));\n      }\n    }\n    /*\r\n     * @private: Controller method to place event data on timeline\r\n     */\n\n  }, {\n    key: \"_placeEvent\",\n    value: function _placeEvent() {\n      var _this7 = this;\n\n      this._debug('_placeEvent');\n\n      if (!this._isCached) {\n        return;\n      }\n\n      var _elem = this._element,\n          _opts = this._config,\n          _evt_container = $(_elem).find(Selector.TIMELINE_EVENTS),\n          _relation_lines = $(_elem).find(Selector.TIMELINE_RELATION_LINES),\n          events = this._loadToCache();\n\n      if (events.length > 0) {\n        _evt_container.empty();\n\n        events.forEach(function (_evt) {\n          var _evt_elem = _this7._createEventNode(_evt);\n\n          if (_evt_elem) {\n            _evt_container.append(_evt_elem);\n          }\n        });\n      }\n\n      if (/^point(|er)$/i.test(_opts.type)) {\n        this._drawRelationLine(events);\n      } // console.log( '!_placeEvent:', _opts )\n\n\n      this.sleep(1).then(function () {\n        _this7.hideLoader();\n\n        _evt_container.fadeIn('fast', function () {\n          _relation_lines.fadeIn('fast');\n        });\n      });\n    }\n    /*\r\n     * @private: Create an event element on the timeline (:> タイムライン上にイベント要素を作成する\r\n     */\n\n  }, {\n    key: \"_createEventNode\",\n    value: function _createEventNode(params) {\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _evt_elem = $('<div></div>', {\n        class: ClassName.TIMELINE_EVENT_NODE,\n        id: \"evt-\".concat(params.eventId),\n        css: {\n          left: \"\".concat(params.x, \"px\"),\n          top: \"\".concat(params.y, \"px\"),\n          width: \"\".concat(params.width, \"px\"),\n          height: \"\".concat(params.height, \"px\"),\n          color: this.hexToRgbA(params.color),\n          backgroundColor: this.hexToRgbA(params.bgColor)\n        },\n        html: \"<div class=\\\"\".concat(ClassName.TIMELINE_EVENT_LABEL, \"\\\">\").concat(params.label, \"</div>\")\n      }); //console.log( '!_createEventNode:', params )\n      // Whether this event is within the display range of the timeline (:> タイムライン表示範囲内のイベントかどうか\n      // For events excluded, set the width to -1 (:> 除外イベントは幅を -1 に設定する\n\n\n      if (params.x >= 0) {\n        // The event start datetime is over the start datetime of the timeline (:> イベント始点がタイムラインの始点以上\n        if (params.x <= _props.fullwidth) {\n          // The event start datetime is less than or equal to the timeline end datetime (:> イベントの始点がタイムラインの終点以下\n          if (params.x + params.width <= _props.fullwidth) {// The event end datetime is less than before the timeline end datetime (regular event) (:> イベント終点がタイムラインの終点以下（通常イベント）\n            // OK\n          } else {\n            // The event end datetime is after the timeline end datetime (event exceeded end datetime) (:> イベント終点がタイムラインの終点より後（終点超過イベント）\n            params.width = _props.fullwidth - params.x;\n          }\n        } else {\n          // The event start datetime is after the timeline end datetime (exclude event) (:> イベント始点がタイムラインの終点より後（除外イベント）\n          params.width = -1;\n        }\n      } else {\n        // The event start datetime is before the timeline start datetime (:> イベント始点がタイムラインの始点より前\n        if (/^point(|er)$/i.test(_opts.type)) {\n          // In the case of \"point\" type, that is an exclude event (:> ポインター型の場合は除外イベント\n          params.width = -1;\n        } else {\n          // The case of \"bar\" type\n          if (params.x + params.width <= 0) {\n            // The event end datetime is less than before the timeline start datetime (exclude event) (:> イベント終点がタイムラインの始点より前（除外イベント）\n            params.width = -1;\n          } else {\n            // The event end datetime is after the timeline start datetime (:> イベント終点がタイムラインの始点より後\n            if (params.x + params.width <= _props.fullwidth) {\n              // The event end datetime is less than or equal the timeline end datetime (event exceeded start datetime) (:> イベント終点がタイムラインの終点以下（始点超過イベント）\n              params.width = Math.abs(params.x + params.width);\n              params.x = 0;\n            } else {\n              // The event end datetime is after the timeline end datetime (event exceeded both start and end datetime) (:> イベント終点がタイムラインの終点より後（始点・終点ともに超過イベント）\n              params.width = _props.fullwidth;\n              params.x = 0;\n            }\n          }\n        }\n      } //console.log( 'x:', params.x, 'w:', params.width, 'x-end:', Math.abs( params.x ) + params.width, 'fw:', _props.fullwidth, 'ps:', params.size )\n\n\n      if (/^point(|er)$/i.test(_opts.type)) {\n        if (params.width < 0) {\n          return null;\n        }\n\n        var _pointSize = this._getPointerSize(params.size, params.margin),\n            _shiftX = this.numRound(params.x - _pointSize / 2, 2),\n            _shiftY = this.numRound(params.y + (params.height - _pointSize) / 2, 2); //console.log( '!_createEventNode:', params, _pointSize, _shiftX, _shiftY )\n\n\n        _evt_elem.addClass(ClassName.VIEWER_EVENT_TYPE_POINTER).css('border-color', params.bdColor).css('left', \"\".concat(_shiftX, \"px\")).css('top', \"\".concat(_shiftY, \"px\")).css('width', \"\".concat(_pointSize, \"px\")).css('height', \"\".concat(_pointSize, \"px\")).attr('data-base-size', _pointSize).attr('data-base-left', _shiftX).attr('data-base-top', _shiftY);\n      } else {\n        if (params.width < 1) {\n          return null;\n        }\n\n        _evt_elem.css('left', \"\".concat(params.x, \"px\")).css('width', \"\".concat(params.width, \"px\"));\n      }\n\n      _evt_elem.attr('data-uid', params.uid);\n\n      if (!this.is_empty(params.image)) {\n        if (/^point(|er)$/i.test(_opts.type)) {\n          _evt_elem.css('background-image', \"url(\".concat(params.image, \")\"));\n        } else {\n          var _imgSize = params.height - params.margin * 2;\n\n          _evt_elem.prepend(\"<img src=\\\"\".concat(params.image, \"\\\" class=\\\"\").concat(ClassName.TIMELINE_EVENT_THUMBNAIL, \"\\\" width=\\\"\").concat(_imgSize, \"\\\" height=\\\"\").concat(_imgSize, \"\\\" />\"));\n        }\n      }\n\n      if (/^bar$/i.test(_opts.type) && _opts.eventMeta.display) {\n        //console.log( '!_createEventNode:', params )\n        params.extend.meta = params.rangeMeta;\n      }\n\n      if (!this.is_empty(params.extend)) {\n        var _arr6 = Object.keys(params.extend);\n\n        for (var _i12 = 0; _i12 < _arr6.length; _i12++) {\n          var _prop = _arr6[_i12];\n\n          _evt_elem.attr(\"data-\".concat(_prop), params.extend[_prop]);\n\n          if (_prop === 'toggle' && ['popover', 'tooltip'].includes(params.extend[_prop])) {\n            // for bootstrap's popover or tooltip\n            _evt_elem.attr('title', params.label);\n\n            if (!params.extend.hasOwnProperty('content')) {\n              _evt_elem.attr('data-content', params.content);\n            }\n          }\n        }\n      }\n\n      if (!this.is_empty(params.callback)) {\n        _evt_elem.attr('data-callback', params.callback);\n      }\n\n      return _evt_elem;\n    }\n    /*\r\n     * @private: Retrieve the diameter size (pixel) of pointer (:> ポインタの直径サイズ（ピクセル値）を取得する\r\n     */\n\n  }, {\n    key: \"_getPointerSize\",\n    value: function _getPointerSize(key, margin) {\n      //let _opts  = this._config,\n      var _props = this._instanceProps,\n          _max = Math.min(_props.scaleSize, _props.rowSize) - margin * 2,\n          _size = null;\n\n      switch (true) {\n        case /^large$/i.test(key):\n          _size = Math.max(this.numRound(_max * 0.8, 1), MIN_POINTER_SIZE);\n          break;\n\n        case /^normal$/i.test(key):\n          _size = Math.max(this.numRound(_max / 2, 1), MIN_POINTER_SIZE);\n          break;\n\n        case /^small$/i.test(key):\n          _size = Math.max(this.numRound(_max / 4, 1), MIN_POINTER_SIZE);\n          break;\n\n        default:\n          _size = Math.max(parseInt(key, 10), MIN_POINTER_SIZE);\n      } //console.log( '!_getPointerSize:', _props, key, _max, _size )\n\n\n      return _size;\n    }\n    /*\r\n     * @private: Draw the relation lines (:> 連結線を描画する\r\n     */\n\n  }, {\n    key: \"_drawRelationLine\",\n    value: function _drawRelationLine(events) {\n      var _this8 = this;\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _canvas = $(this._element).find(Selector.TIMELINE_RELATION_LINES),\n          ctx_relations = _canvas[0].getContext('2d'),\n          drawLine = function drawLine(_sx, _sy, _ex, _ey, evt, _ba) {\n        var _curveType = {},\n            _radius = _this8.numRound(Math.min(_props.scaleSize, _props.rowSize) / 2, 2),\n            _subRadius = _this8.numRound(_this8._getPointerSize(evt.size, _opts.marginHeight) / 2, 2); // Defaults\n\n\n        ctx_relations.strokeStyle = EventParams.bdColor;\n        ctx_relations.lineWidth = 2.5;\n        ctx_relations.filter = 'url(#crisp)';\n\n        var _arr7 = Object.keys(evt.relation);\n\n        for (var _i13 = 0; _i13 < _arr7.length; _i13++) {\n          var _key = _arr7[_i13];\n\n          switch (true) {\n            case /^(|line)color$/i.test(_key):\n              ctx_relations.strokeStyle = evt.relation[_key];\n              break;\n\n            case /^(|line)size$/i.test(_key):\n              ctx_relations.lineWidth = parseInt(evt.relation[_key], 10) || 2.5;\n              break;\n\n            case /^curve$/i.test(_key):\n              if (/^(r|l)(t|b),?(r|l)?(t|b)?$/i.test(evt.relation[_key])) {\n                var _tmp = evt.relation[_key].split(',');\n\n                if (_tmp.length == 2) {\n                  _curveType.before = _tmp[0];\n                  _curveType.after = _tmp[1];\n                } else {\n                  _curveType[_ba] = _tmp[0];\n                }\n              } else if (typeof evt.relation[_key] === 'boolean' && evt.relation[_key] || typeof evt.relation[_key] === 'number' && Boolean(evt.relation[_key])) {\n                // Automatically set the necessary linearity type (:> 自動線形判定\n                //console.log( _sx, _sy, _ex, _ey, _radius, _ba, _subRadius )\n                if (_ba === 'before') {\n                  // before: targetEvent[ _ex, _ey ] <---- selfEvent[ _sx, _sy ]\n                  if (_sy > _ey) {\n                    // 連結点が自分より上にある\n                    if (_sx > _ex) {\n                      // 連結点が自分より左にある \"(_ex,_ey)└(_sx,_sy)\" as \"lb\"\n                      _curveType[_ba] = 'lb';\n                    } else if (_sx < _ex) {\n                      // 連結点が自分より右にある \"⊂￣\" as \"lb+lt\"\n                      _curveType[_ba] = 'lb+lt';\n                    } else {\n                      // 連結点が自分の直上 \"│\" to top\n                      _curveType[_ba] = null;\n                    }\n                  } else if (_sy < _ey) {\n                    // 連結点が自分より下にある\n                    if (_sx > _ex) {\n                      // 連結点が自分より左にある \"(_ex,_ey)┌(_sx,_sy)\" as \"lt\"\n                      _curveType[_ba] = 'lt';\n                    } else if (_sx < _ex) {\n                      // 連結点が自分より右にある \"⊂_\" as \"rt+rb\"\n                      _curveType[_ba] = 'lt+lb';\n                    } else {\n                      // 連結点が自分の直下 \"│\" to bottom\n                      _curveType[_ba] = null;\n                    }\n                  } else {\n                    // 連結点が自分と同じ水平上にある（左右どちらか） _sy == _ey; \"─\" to left or right\n                    _curveType[_ba] = null;\n                  }\n                } else if (_ba === 'after') {\n                  // after: selfEvent[ _sx, _sy ] ----> targetEvent[ _ex, _ey ]\n                  if (_sy < _ey) {\n                    // Relational endpoint is located \"under\" self (:> 連結点が自分の下にある\n                    if (_sx < _ex) {\n                      // Then relational endpoint is located \"right\" self (:> 連結点が自分の右にある \"(_sx,_sy)┐(_ex,_ey)\" as \"rt\"\n                      _curveType[_ba] = 'rt';\n                    } else if (_sx > _ex) {\n                      // Then relational endpoint is located \"left\" self (:> 連結点が自分より左にある \"_⊃\" as \"rt+rb\"\n                      _curveType[_ba] = 'rt+rb';\n                    } else {\n                      // Relational endpoint is located \"just under\" self (:> 連結点が自分の直下 \"│\" to bottom\n                      _curveType[_ba] = null;\n                    }\n                  } else if (_sy > _ey) {\n                    // Relational endpoint is located \"above\" self (:> 連結点が自分より上にある\n                    if (_sx < _ex) {\n                      // Then relational endpoint is located \"right\" self (:> 連結点が自分の右にある \"┘\" as \"rb\"\n                      _curveType[_ba] = 'rb';\n                    } else if (_sx > _ex) {\n                      // Then relational endpoint is located \"left\" self (:> 連結点が自分より左にある \"￣⊃\" as \"rb+rt\"\n                      _curveType[_ba] = 'rb+rt';\n                    } else {\n                      // Relational endpoint is located \"just under\" self (:> 連結点が自分の直上 \"│\" to top\n                      _curveType[_ba] = null;\n                    }\n                  } else {\n                    // 連結点が自分と同じ水平上にある（左右どちらか） _sy == _ey; \"─\" to left or right\n                    _curveType[_ba] = null;\n                  }\n                }\n              }\n\n              break;\n          }\n        }\n\n        if (Math.abs(_ey - _sy) > _props.rowSize) {\n          _ey += Math.floor(Math.abs(_ey - _sy) / _props.rowSize);\n        }\n\n        ctx_relations.beginPath();\n\n        if (!_this8.is_empty(_curveType)) {\n          // console.log( '!_drawLine:', _curveType, _sx, _sy, _ex, _ey, _radius )\n          switch (true) {\n            case /^lt$/i.test(_curveType[_ba]):\n              // \"(_ex,_ey)┌(_sx,_sy)\"\n              ctx_relations.moveTo(_sx, _sy);\n\n              if (Math.abs(_sx - _ex) > _radius) {\n                ctx_relations.lineTo(_ex - _radius, _sy); // \"─\"\n              }\n\n              if (Math.abs(_ey - _sy) > _radius) {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _sy + _radius); // \"┌\"\n\n                ctx_relations.lineTo(_ex, _ey); // \"│\"\n              } else {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _ey); // \"┌\"\n              }\n\n              break;\n\n            case /^lb$/i.test(_curveType[_ba]):\n              // \"(_ex,_ey)└(_sx,_sy)\"\n              ctx_relations.moveTo(_sx, _sy);\n\n              if (Math.abs(_sx - _ex) > _radius) {\n                ctx_relations.lineTo(_ex + _radius, _sy); // \"─\"\n              }\n\n              if (Math.abs(_sy - _ey) > _radius) {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _sy - _radius); // \"└\"\n\n                ctx_relations.lineTo(_ex, _ey); // \"│\"\n              } else {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _ey); // \"└\"\n              }\n\n              break;\n\n            case /^rt$/i.test(_curveType[_ba]):\n              // \"(_sx,_sy)┐(_ex,_ey)\"\n              ctx_relations.moveTo(_sx, _sy);\n\n              if (Math.abs(_ex - _sx) > _radius) {\n                ctx_relations.lineTo(_ex - _radius, _sy); // \"─\"\n              }\n\n              if (Math.abs(_ey - _sy) > _radius) {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _sy + _radius); // \"┐\"\n\n                ctx_relations.lineTo(_ex, _ey);\n              } else {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _ey); // \"┐\"\n              }\n\n              break;\n\n            case /^rb$/i.test(_curveType[_ba]):\n              // \"(_sx,_sy)┘(_ex,_ey)\"\n              ctx_relations.moveTo(_sx, _sy);\n\n              if (Math.abs(_ex - _sx) > _radius) {\n                ctx_relations.lineTo(_ex - _radius, _sy); // \"─\"\n              }\n\n              if (Math.abs(_sy - _ey) > _radius) {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _sy - _radius); // \"┘\"\n\n                ctx_relations.lineTo(_ex, _ey);\n              } else {\n                ctx_relations.quadraticCurveTo(_ex, _sy, _ex, _ey); // \"┘\"\n              }\n\n              break;\n\n            case /^lt\\+lb$/i.test(_curveType[_ba]): // \"⊂＿\"\n\n            case /^lb\\+lt$/i.test(_curveType[_ba]):\n              // \"⊂￣\"\n              ctx_relations.moveTo(_sx, _sy); //ctx_relations.lineTo( _sx - _subRadius, _sy ) // \"─\"\n\n              ctx_relations.lineTo(_sx - _radius, _sy); // \"─\"\n              //ctx_relations.bezierCurveTo( _sx - _subRadius - _radius, _sy, _sx - _subRadius - _radius, _ey, _sx - _subRadius, _ey ) // \"⊂\"\n\n              ctx_relations.bezierCurveTo(_sx - _radius * 2, _sy, _sx - _radius * 2, _ey, _sx - _radius, _ey); // \"⊂\"\n\n              ctx_relations.lineTo(_ex, _ey); // \"─\"\n\n              break;\n\n            case /^rt\\+rb$/i.test(_curveType[_ba]): // \"＿⊃\"\n\n            case /^rb\\+rt$/i.test(_curveType[_ba]):\n              // \"￣⊃\"\n              ctx_relations.moveTo(_sx, _sy); //ctx_relations.lineTo( _sx + _subRadius, _sy ) // \"─\"\n\n              ctx_relations.lineTo(_sx + _radius, _sy); // \"─\"\n              //ctx_relations.bezierCurveTo( _sx + _subRadius + _radius, _sy, _sx + _subRadius + _radius, _ey, _sx + _subRadius, _ey ) // \"⊃\"\n\n              ctx_relations.bezierCurveTo(_sx + _radius * 2, _sy, _sx + _radius * 2, _ey, _sx + _radius, _ey); // \"⊃\"\n\n              ctx_relations.lineTo(_ex, _ey); // \"─\"\n\n              break;\n          }\n        } else {\n          ctx_relations.moveTo(_sx, _sy);\n          ctx_relations.lineTo(_ex, _ey);\n        } //ctx_relations.closePath()\n\n\n        ctx_relations.stroke();\n      };\n\n      ctx_relations.clearRect(0, 0, _canvas[0].width, _canvas[0].height); //console.log( '!_drawRelationLine:', _props, events, _canvas )\n\n      events.forEach(function (evt) {\n        var _rel = evt.relation,\n            _sx,\n            _sy,\n            _ex,\n            _ey,\n            _targetId,\n            _targetEvent;\n\n        if (_rel.hasOwnProperty('before')) {\n          // before: targetEvent[ _ex, _ey ] <---- selfEvent[ _sx, _sy ]\n          // (:> before: 自分を起点（ _sx, _sy ）として左方向の連結点（ _ex, _ey ）へ向かう描画方式\n          _sx = _rel.x;\n          _sy = _rel.y;\n          _targetId = parseInt(_rel.before, 10);\n\n          if (_targetId < 0) {\n            _ex = 0;\n            _ey = _sy;\n          } else {\n            _targetEvent = events.find(function (_evt) {\n              return parseInt(_evt.eventId, 10) == _targetId;\n            });\n\n            if (!_this8.is_empty(_targetEvent) && _targetEvent.relation) {\n              _ex = _targetEvent.relation.x < 0 ? 0 : _targetEvent.relation.x;\n              _ey = _targetEvent.relation.y;\n            }\n          }\n\n          if (_sx >= 0 && _sy >= 0 && _ex >= 0 && _ey >= 0) {\n            drawLine(_sx, _sy, _ex, _ey, evt, 'before');\n          }\n        }\n\n        if (_rel.hasOwnProperty('after')) {\n          // after: selfEvent[ _sx, _sy ] ----> targetEvent[ _ex, _ey ]\n          // (:> after: 自分を起点（ _sx, _sy ）として右方向の連結点（ _ex, _ey ）へ向かう描画方式\n          _sx = _rel.x;\n          _sy = _rel.y;\n          _targetId = parseInt(_rel.after, 10);\n\n          if (_targetId < 0) {\n            _ex = _props.fullwidth;\n            _ey = _sy;\n          } else {\n            _targetEvent = events.find(function (_evt) {\n              return parseInt(_evt.eventId, 10) == _targetId;\n            });\n\n            if (!_this8.is_empty(_targetEvent) && _targetEvent.relation) {\n              _ex = _targetEvent.relation.x > _props.fullwidth ? _props.fullwidth : _targetEvent.relation.x;\n              _ey = _targetEvent.relation.y;\n            }\n          }\n\n          if (_sx >= 0 && _sy >= 0 && _ex >= 0 && _ey >= 0) {\n            drawLine(_sx, _sy, _ex, _ey, evt, 'after');\n          }\n        }\n      });\n    }\n    /*\r\n     * @private: Retrieve the mapping data that placed current events\r\n     */\n\n  }, {\n    key: \"_mapPlacedEvents\",\n    value: function _mapPlacedEvents() {\n      var _that = this,\n          _tl_events = $(this._element).find(Selector.TIMELINE_EVENTS).children(),\n          _cache = this._loadToCache(),\n          _events = [];\n\n      if (!this._isCached || this.is_empty(_cache)) {\n        return _events;\n      }\n\n      _tl_events.each(function () {\n        var _uid = $(this).data('uid'),\n            _data = null;\n\n        if (_cache) {\n          _data = _cache.find(function (_evt) {\n            return _evt.uid === _uid;\n          }) || null;\n        } else {\n          _data = $(this).data();\n        }\n\n        if (!_that.is_empty(_data)) {\n          _events.push(_data);\n        }\n      }); //console.log( '!_mapPlacedEvents:', _events )\n\n\n      return _events;\n    }\n    /*\r\n     * @private: Event when focus or blur\r\n     */\n\n  }, {\n    key: \"_activeEvent\",\n    value: function _activeEvent(event) {\n      // console.log( '!_activeEvent:', event )\n      var _elem = event.target;\n\n      if ('focusin' === event.type) {\n        $(Selector.TIMELINE_EVENT_NODE).removeClass('active');\n        $(_elem).addClass('active');\n      } else if ('focusout' === event.type) {\n        $(_elem).removeClass('active');\n      }\n    }\n    /*\r\n     * @private: Event when hover on the pointer type event\r\n     */\n\n  }, {\n    key: \"_hoverPointer\",\n    value: function _hoverPointer(event) {\n      var _props = this._instanceProps,\n          _elem = event.target,\n          _base = {\n        left: $(_elem).data('baseLeft'),\n        top: $(_elem).data('baseTop'),\n        width: $(_elem).data('baseSize')\n      },\n          _x = _base.left,\n          _y = _base.top,\n          _w = _base.width,\n          _z = 5; //console.log( '!_hoverPointer:', _props )\n\n      if ('mouseenter' === event.type) {\n        _w = Math.max(this.numRound(_w * 1.2, 'ceil'), Math.min(_props.rowSize, _props.scaleSize));\n        _x = this.numRound(_x - (_w - _base.width) / 2, 2);\n        _y = this.numRound(_y - (_w - _base.width) / 2, 2);\n        _z = 9;\n        $(_elem).trigger(Event.FOCUSIN_EVENT);\n      } else {\n        $(_elem).trigger(Event.FOCUSOUT_EVENT);\n      }\n\n      $(_elem).css('left', \"\".concat(_x, \"px\")).css('top', \"\".concat(_y, \"px\")).css('width', \"\".concat(_w, \"px\")).css('height', \"\".concat(_w, \"px\")).css('z-index', _z);\n    }\n    /*\r\n     * @private: Echo the log of plugin for debugging\r\n     */\n\n  }, {\n    key: \"_debug\",\n    value: function _debug(message) {\n      var throwType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Notice';\n\n      if (!this._config.debug) {\n        return;\n      }\n\n      message = this.supplement(null, message);\n\n      if (message) {\n        var _msg = typeof $(this._element).data(DATA_KEY)[message] !== 'undefined' ? \"Called method \\\"\".concat(message, \"\\\".\") : message,\n            _sty = /^Called method \"/.test(_msg) ? 'font-weight:600;color:blue;' : '',\n            _rst = '';\n\n        if (window.console && window.console.log) {\n          if (throwType === 'Notice') {\n            window.console.log('%c%s%c', _sty, _msg, _rst);\n          } else {\n            throw new Error(\"\".concat(_msg));\n          }\n        }\n      }\n    } // Public\n\n    /*\r\n     * @public: This method is able to call only once after completed an initializing of the plugin\r\n     */\n\n  }, {\n    key: \"initialized\",\n    value: function initialized() {\n      var _message = this._isInitialized ? 'Skipped because method \"initialized\" already has been called once' : 'initialized';\n\n      this._debug(_message);\n\n      var _elem = this._element,\n          _opts = this._config,\n          _args = arguments.length <= 0 ? undefined : arguments[0],\n          callback = _args.length > 0 && typeof _args[0] === 'function' ? _args[0] : null,\n          userdata = _args.length > 1 ? _args.slice(1) : null; // console.log( '!initialized:', callback, userdata )\n\n\n      if (callback && !this._isInitialized) {\n        this._debug('Fired your callback function after initializing this plugin.');\n\n        callback(_elem, _opts, userdata);\n      }\n\n      this._isInitialized = true;\n    }\n    /*\r\n     * @public: Destroy the object to which the plugin is applied\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._debug('destroy');\n\n      $.removeData(this._element, DATA_KEY);\n      $(window, document, this._element).off(EVENT_KEY);\n      $(this._element).remove();\n\n      this._removeCache();\n\n      var _arr8 = Object.keys(this);\n\n      for (var _i14 = 0; _i14 < _arr8.length; _i14++) {\n        var _prop = _arr8[_i14];\n        this[_prop] = null;\n        delete this[_prop];\n      }\n    }\n    /*\r\n     * @public: This method has been deprecated since version 2.0.0\r\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      throw new ReferenceError('This method named \"render\" has been deprecated since version 2.0.0');\n    }\n    /*\r\n     * @public: Show hidden timeline\r\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      this._debug('show');\n\n      var _elem = this._element;\n\n      if (!this._isShown) {\n        $(_elem).removeClass(ClassName.HIDE);\n        this._isShown = true;\n      }\n    }\n    /*\r\n     * @public: Hide shown timeline\r\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this._debug('hide');\n\n      var _elem = this._element;\n\n      if (this._isShown) {\n        $(_elem).addClass(ClassName.HIDE);\n        this._isShown = false;\n      }\n    }\n    /*\r\n     * @public: \r\n     */\n\n  }, {\n    key: \"dateback\",\n    value: function dateback() {\n      this._debug('dateback');\n    }\n    /*\r\n     * @public: \r\n     */\n\n  }, {\n    key: \"dateforth\",\n    value: function dateforth() {\n      this._debug('dateforth');\n    }\n    /*\r\n     * @public: Move the display position of the timeline container to the specified position\r\n     */\n\n  }, {\n    key: \"alignment\",\n    value: function alignment() {\n      this._debug('alignment');\n\n      for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      var _opts = this._config,\n          _props = this._instanceProps,\n          _elem = this._element,\n          _tl_container = $(_elem).find(Selector.TIMELINE_CONTAINER),\n          _movX = 0,\n          _args = !this.is_empty(args) ? args[0] : [],\n          position = _args.length > 0 && typeof _args[0] === 'string' ? _args[0] : _opts.rangeAlign,\n          duration = _args.length > 1 && /^(\\d{1,}|fast|normal|slow)$/i.test(_args[1]) ? _args[1] : 0; //console.log( args, _args, position, duration )\n\n\n      if (_props.fullwidth <= _elem.scrollWidth) {\n        return;\n      }\n\n      switch (true) {\n        case /^(left|begin)$/i.test(position):\n          _movX = 0;\n          break;\n\n        case /^center$/i.test(position):\n          _movX = (_tl_container[0].scrollWidth - _elem.scrollWidth) / 2 + 1;\n          break;\n\n        case /^(right|end)$/i.test(position):\n          _movX = _tl_container[0].scrollWidth - _elem.scrollWidth + 1;\n          break;\n\n        case /^latest$/i.test(position):\n          {\n            var events = this._mapPlacedEvents().sort(this.compareValues('x')),\n                lastEvent = events[events.length - 1];\n\n            _movX = !this.is_empty(lastEvent) ? lastEvent.x : 0; // console.log( events, lastEvent, _movX, _elem.scrollWidth / 2 )\n            // Centering\n\n            if (_elem.scrollWidth / 2 < _movX) {\n              _movX -= Math.ceil(_elem.scrollWidth / 2);\n            } else {\n              _movX = 0;\n            } // Focus target event\n\n\n            if (!this.is_empty(lastEvent)) {\n              $(\"\".concat(Selector.TIMELINE_EVENT_NODE, \"[data-uid=\\\"\").concat(lastEvent.uid, \"\\\"]\")).trigger(Event.FOCUSIN_EVENT);\n            }\n\n            break;\n          }\n\n        case /^\\d{1,}$/.test(position):\n          {\n            var _events2 = this._mapPlacedEvents(),\n                targetEvent = {};\n\n            if (_events2.length > 0) {\n              targetEvent = _events2.find(function (evt) {\n                return evt.eventId == parseInt(position, 10);\n              });\n            }\n\n            _movX = !this.is_empty(targetEvent) ? targetEvent.x : 0; // Centering\n\n            if (Math.ceil(_elem.scrollWidth / 2) < _movX) {\n              _movX -= Math.ceil(_elem.scrollWidth / 2);\n            } else {\n              _movX = 0;\n            } // Focus target event\n\n\n            if (!this.is_empty(targetEvent)) {\n              $(\"\".concat(Selector.TIMELINE_EVENT_NODE, \"[data-uid=\\\"\").concat(targetEvent.uid, \"\\\"]\")).trigger(Event.FOCUSIN_EVENT);\n            }\n\n            break;\n          }\n\n        case /^current(|ly)|now$/i.test(position):\n        default:\n          {\n            var _now = new Date().toString(),\n                _nowX = this.numRound(this._getCoordinateX(_now), 2);\n\n            if (_nowX >= 0) {\n              if (_tl_container[0].scrollWidth - _elem.scrollWidth + 1 < _nowX) {\n                _movX = _tl_container[0].scrollWidth - _elem.scrollWidth + 1;\n              } else {\n                _movX = _nowX;\n              }\n            } else {\n              _movX = 0;\n            }\n\n            break;\n          }\n      } //console.log( `!alignment::${position}:`, _props.fullwidth, _props.visibleWidth, _tl_container[0].scrollWidth, _tl_container[0].scrollLeft, _movX )\n\n\n      if (duration === '0') {\n        _tl_container.scrollLeft(_movX);\n      } else {\n        _tl_container.animate({\n          scrollLeft: _movX\n        }, duration);\n      }\n    }\n    /*\r\n     * @public: This method has been deprecated since version 2.0.0\r\n     */\n\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      throw new ReferenceError('This method named \"getOptions\" has been deprecated since version 2.0.0');\n    }\n    /*\r\n     * @public: Add new events to the rendered timeline object\r\n     */\n\n  }, {\n    key: \"addEvent\",\n    value: function addEvent() {\n      var _this9 = this;\n\n      this._debug('addEvent');\n\n      var _args = arguments.length <= 0 ? undefined : arguments[0],\n          events = this.supplement(null, _args[0], this.validateArray),\n          callback = _args.length > 1 && typeof _args[1] === 'function' ? _args[1] : null,\n          userdata = _args.length > 2 ? _args.slice(2) : null,\n          _cacheEvents = this._loadToCache(),\n          lastEventId = 0,\n          add_done = false;\n\n      if (this.is_empty(events) || !this._isCompleted) {\n        return;\n      }\n\n      if (!this.is_empty(_cacheEvents)) {\n        _cacheEvents.sort(this.compareValues('eventId'));\n\n        lastEventId = parseInt(_cacheEvents[_cacheEvents.length - 1].eventId, 10);\n      } //console.log( '!addEvent::before:', _cacheEvents, lastEventId, callback, userdata )\n\n\n      events.forEach(function (evt) {\n        var _one_event = _this9._registerEventData('<div></div>', evt);\n\n        if (!_this9.is_empty(_one_event)) {\n          _one_event.eventId = Math.max(lastEventId + 1, parseInt(_one_event.eventId, 10));\n\n          _cacheEvents.push(_one_event);\n\n          lastEventId = parseInt(_one_event.eventId, 10);\n          add_done = true;\n        }\n      }); //console.log( '!addEvent::after:', _cacheEvents, lastEventId, callback, userdata )\n\n      if (!add_done) {\n        return;\n      }\n\n      this._saveToCache(_cacheEvents);\n\n      this._placeEvent();\n\n      if (callback) {\n        this._debug('Fired your callback function after replacing events.');\n\n        callback(this._element, this._config, userdata);\n      }\n    }\n    /*\r\n     * @public: Remove events from the currently timeline object\r\n     */\n\n  }, {\n    key: \"removeEvent\",\n    value: function removeEvent() {\n      var _this10 = this;\n\n      this._debug('removeEvent');\n\n      var _args = arguments.length <= 0 ? undefined : arguments[0],\n          targets = this.supplement(null, _args[0], this.validateArray),\n          callback = _args.length > 1 && typeof _args[1] === 'function' ? _args[1] : null,\n          userdata = _args.length > 2 ? _args.slice(2) : null,\n          _cacheEvents = this._loadToCache(),\n          condition = {},\n          remove_done = false;\n\n      if (this.is_empty(targets) || !this._isCompleted || this.is_empty(_cacheEvents)) {\n        return;\n      }\n\n      targets.forEach(function (cond) {\n        switch (true) {\n          case /^\\d{1,}$/.test(cond):\n            // By matching event ID\n            condition.type = 'eventId';\n            condition.value = parseInt(cond, 10);\n            break;\n\n          case /^(|\\d{1,}(-|\\/)\\d{1,2}(-|\\/)\\d{1,2}(|\\s\\d{1,2}:\\d{1,2}(|:\\d{1,2})))(|,\\d{1,}(-|\\/)\\d{1,2}(-|\\/)\\d{1,2}(|\\s\\d{1,2}:\\d{1,2}(|:\\d{1,2})))$/.test(cond):\n            {\n              // By matching range of datetime\n              var _tmp = cond.split(',');\n\n              condition.type = 'daterange';\n              condition.value = {};\n              condition.value['from'] = _this10.is_empty(_tmp[0]) ? null : new Date(_tmp[0]);\n              condition.value['to'] = _this10.is_empty(_tmp[1]) ? null : new Date(_tmp[1]);\n              break;\n            }\n\n          default:\n            // By matching regex string\n            condition.type = 'regex';\n            condition.value = new RegExp(cond);\n            break;\n        }\n\n        _cacheEvents.forEach(function (evt, _idx) {\n          switch (condition.type) {\n            case 'eventId':\n              if (parseInt(evt.eventId, 10) == condition.value) {\n                //console.log( `!removeEvent::${condition.type}:${condition.value}:`, _cacheEvents[_idx] )\n                _cacheEvents.splice(_idx, 1);\n\n                remove_done = true;\n              }\n\n              break;\n\n            case 'daterange':\n              {\n                //console.log( condition.value )\n                var _fromX = condition.value.from ? Math.ceil(_this10._getCoordinateX(condition.value.from.toString())) : 0,\n                    _toX = condition.value.to ? Math.floor(_this10._getCoordinateX(condition.value.to.toString())) : _fromX;\n\n                if (_fromX <= evt.x && evt.x <= _toX) {\n                  //console.log( `!removeEvent::${condition.type}:${condition.value.from} ~ ${condition.value.to}:`, _fromX, _toX, evt.x )\n                  _cacheEvents.splice(_idx, 1);\n\n                  remove_done = true;\n                }\n\n                break;\n              }\n\n            case 'regex':\n              //console.log( `!removeEvent::${condition.type}:${condition.value}:`, JSON.stringify( evt ) )\n              if (condition.value.test(JSON.stringify(evt))) {\n                _cacheEvents.splice(_idx, 1);\n\n                remove_done = true;\n              }\n\n              break;\n          }\n        });\n      }); //console.log( `!removeEvent::after:`, _cacheEvents )\n\n      if (!remove_done) {\n        return;\n      }\n\n      this._saveToCache(_cacheEvents);\n\n      this._placeEvent();\n\n      if (callback) {\n        this._debug('Fired your callback function after placing additional events.');\n\n        callback(this._element, this._config, userdata);\n      }\n    }\n    /*\r\n     * @public: Update events on the currently timeline object\r\n     */\n\n  }, {\n    key: \"updateEvent\",\n    value: function updateEvent() {\n      var _this11 = this;\n\n      this._debug('updateEvent');\n\n      var _args = arguments.length <= 0 ? undefined : arguments[0],\n          events = this.supplement(null, _args[0], this.validateArray),\n          callback = _args.length > 1 && typeof _args[1] === 'function' ? _args[1] : null,\n          userdata = _args.length > 2 ? _args.slice(2) : null,\n          _cacheEvents = this._loadToCache(),\n          update_done = false;\n\n      if (this.is_empty(events) || !this._isCompleted || this.is_empty(_cacheEvents)) {\n        return;\n      }\n\n      events.forEach(function (evt) {\n        var _upc_event = _this11._registerEventData('<div></div>', evt),\n            // Update Candidate\n        _old_index = null,\n            _old_event = _cacheEvents.find(function (_evt, _idx) {\n          _old_index = _idx;\n          return _evt.eventId == _upc_event.eventId;\n        }),\n            _new_event = {};\n\n        if (!_this11.is_empty(_old_event) && !_this11.is_empty(_upc_event)) {\n          if (_upc_event.hasOwnProperty('uid')) {\n            delete _upc_event.uid;\n          }\n\n          _new_event = Object.assign(_new_event, _old_event, _upc_event); //console.log( _new_event, _old_event, _upc_event, _old_index )\n\n          _cacheEvents[_old_index] = _new_event;\n          update_done = true;\n        }\n      });\n\n      if (!update_done) {\n        return;\n      }\n\n      this._saveToCache(_cacheEvents);\n\n      this._placeEvent();\n\n      if (callback) {\n        this._debug('Fired your callback function after updating events.');\n\n        callback(this._element, this._config, userdata);\n      }\n    }\n    /*\r\n     * @public: Reload the timeline with overridable any options\r\n     */\n\n  }, {\n    key: \"reload\",\n    value: function reload() {\n      var _this12 = this;\n\n      this._debug('reload');\n\n      var _args = arguments.length <= 0 ? undefined : arguments[0],\n          _upc_options = this.supplement(null, _args[0], this.validateObject),\n          callback = _args.length > 1 && typeof _args[1] === 'function' ? _args[1] : null,\n          userdata = _args.length > 2 ? _args.slice(2) : null,\n          _elem = this._element,\n          $default_evt = $(_elem).find(Selector.DEFAULT_EVENTS),\n          _old_options = this._config,\n          _new_options = {};\n\n      if (!this.is_empty(_upc_options)) {\n        // _new_options = Object.assign( _new_options, _old_options, _upc_options )\n        _new_options = this.mergeDeep(_old_options, _upc_options); // console.log( _new_options, _old_options, _upc_options )\n\n        this._config = _new_options;\n      }\n\n      this._isInitialized = false;\n      this._isCached = false;\n      this._isCompleted = false;\n      this._instanceProps = {};\n      $(_elem).empty().append($default_evt);\n\n      this._calcVars();\n\n      if (!this._verifyMaxRenderableRange()) {\n        throw new RangeError(\"Timeline display period exceeds maximum renderable range.\");\n      }\n\n      if (!this._isInitialized) {\n        this._renderView();\n\n        this._isInitialized = true;\n      }\n\n      if (this._config.reloadCacheKeep) {\n        var _cacheEvents = this._loadToCache(),\n            _renewEvents = [];\n\n        if (!this.is_empty(_cacheEvents)) {\n          _cacheEvents.forEach(function (evt) {\n            delete evt.uid;\n            delete evt.x;\n            delete evt.Y;\n            delete evt.width;\n            delete evt.height;\n            delete evt.relation.x;\n            delete evt.relation.y;\n\n            _renewEvents.push(_this12._registerEventData('<div></div>', evt));\n          });\n        }\n\n        this._isCached = this._saveToCache(_renewEvents);\n      } else {\n        this._loadEvent();\n      }\n\n      this._placeEvent();\n\n      this._isCompleted = true;\n\n      if (callback) {\n        this._debug('Fired your callback function after reloading timeline.');\n\n        callback(this._element, this._config, userdata);\n      }\n    }\n    /*\r\n     * @public: The method that fires when an event on the timeline is clicked (:> タイムライン上のイベントがクリックされた時に発火\r\n     *\r\n     * Note: You can hook the custom processing with the callback specified in the event parameter. (:> イベントパラメータに指定したコールバックでカスタム処理をフックできます\r\n     */\n\n  }, {\n    key: \"openEvent\",\n    value: function openEvent(event) {\n      this._debug('openEvent');\n\n      var _that = this,\n          _self = event.target,\n          $viewer = $(document).find(Selector.EVENT_VIEW),\n          //eventId   = parseInt( $(_self).attr( 'id' ).replace( 'evt-', '' ), 10 ),\n      uid = $(_self).data('uid'),\n          //meta      = this.supplement( null, $(_self).data( 'meta' ) ),\n      callback = this.supplement(null, $(_self).data('callback')); //console.log( '!openEvent:', _self, $viewer, eventId, uid, meta, callback )\n\n\n      if ($viewer.length > 0) {\n        $viewer.each(function () {\n          var _cacheEvents = this._loadToCache(),\n              _eventData = _cacheEvents.find(function (event) {\n            return event.uid === uid;\n          }),\n              _label = $('<div></div>', {\n            class: ClassName.VIEWER_EVENT_TITLE\n          }),\n              _content = $('<div></div>', {\n            class: ClassName.VIEWER_EVENT_CONTENT\n          }),\n              _meta = $('<div></div>', {\n            class: ClassName.VIEWER_EVENT_META\n          }),\n              _image = $('<div></div>', {\n            class: ClassName.VIEWER_EVENT_IMAGE_WRAPPER\n          }); //console.log( '!openEvent:', $(this), $(_self).html(), _eventData.label )\n\n\n          $(this).empty(); // Initialize Viewer\n\n          if (!_that.is_empty(_eventData.image)) {\n            _image.append(\"<img src=\\\"\".concat(_eventData.image, \"\\\" class=\\\"\").concat(ClassName.VIEWER_EVENT_IMAGE, \"\\\" />\"));\n\n            $(this).append(_image);\n          }\n\n          if (!_that.is_empty(_eventData.label)) {\n            _label.html(_eventData.label);\n\n            $(this).append(_label);\n          }\n\n          if (!_that.is_empty(_eventData.content)) {\n            _content.html(_eventData.content);\n\n            $(this).append(_content);\n          }\n\n          if (!_that.is_empty(_eventData.rangeMeta)) {\n            _meta.html(_eventData.rangeMeta);\n\n            $(this).append(_meta);\n          }\n        });\n      }\n\n      if (callback) {\n        this._debug(\"The callback \\\"\".concat(callback, \"\\\" was called by the \\\"openEvent\\\" method.\"));\n\n        try {\n          Function.call(null, \"return \".concat(callback))();\n        } catch (e) {\n          throw new TypeError(e);\n        }\n      }\n    }\n    /*\r\n     * @public: Show the loader (:> ローダー表示\r\n     */\n\n  }, {\n    key: \"showLoader\",\n    value: function showLoader() {\n      this._debug('showLoader');\n\n      var _elem = this._element,\n          _opts = this._config,\n          _container = $(_elem).find(Selector.TIMELINE_CONTAINER),\n          width = _container.length > 0 ? _container.width() : $(_elem).width(),\n          height = (_container.length > 0 ? _container.height() : $(_elem).height()) || 120,\n          _loader = $('<div></div>', {\n        id: 'jqtl-loader',\n        style: \"width:\".concat(width, \"px;height:\").concat(height, \"px;\")\n      }); //console.log( '!showLoader:', width, height, _container.length )\n\n\n      if (_opts.loader === false) {\n        return;\n      }\n\n      if ($(_opts.loader).length == 0) {\n        var _loading_text = LOADING_MESSAGE.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\s\\S]|^$/g).filter(Boolean);\n\n        _loading_text.forEach(function (str, idx) {\n          var _fountain_text = $('<div></div>', {\n            id: \"jqtl-loading_\".concat(idx + 1),\n            class: ClassName.LOADER_ITEM\n          }).text(str);\n\n          _loader.append(_fountain_text);\n        });\n      } else {\n        var _custom_loader = $(_opts.loader).clone().prop('hidden', false).css('display', 'block');\n\n        _loader.append(_custom_loader);\n      }\n\n      if ($(_elem).find(Selector.LOADER).length == 0) {\n        if (_container.length > 0) {\n          _container.append(_loader);\n        } else {\n          $(_elem).css('position', 'relative').css('min-height', \"\".concat(height, \"px\")).append(_loader);\n        }\n      }\n    }\n    /*\r\n     * @public:  Hide the loader (:> ローダー非表示\r\n     */\n\n  }, {\n    key: \"hideLoader\",\n    value: function hideLoader() {\n      this._debug('hideLoader');\n\n      $(this._element).find(Selector.LOADER).remove();\n    }\n    /* ----------------------------------------------------------------------------------------------------------------\r\n     * Utility Api\r\n     * ----------------------------------------------------------------------------------------------------------------\r\n     */\n\n    /*\r\n     * Determine empty that like PHP (:> PHPライクな空判定メソッド\r\n     *\r\n     * @param mixed value (required)\r\n     *\r\n     * @return bool\r\n     */\n\n  }, {\n    key: \"is_empty\",\n    value: function is_empty(value) {\n      if (value == null) {\n        // typeof null -> object : for hack a bug of ECMAScript\n        // Refer: https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/typeof\n        return true;\n      }\n\n      switch (_typeof(value)) {\n        case 'object':\n          if (Array.isArray(value)) {\n            // When object is array:\n            return value.length === 0;\n          } else {\n            // When object is not array:\n            if (Object.keys(value).length > 0 || Object.getOwnPropertySymbols(value).length > 0) {\n              return false;\n            } else if (value.valueOf().length !== undefined) {\n              return value.valueOf().length === 0;\n            } else if (_typeof(value.valueOf()) !== 'object') {\n              return this.is_empty(value.valueOf());\n            } else {\n              return true;\n            }\n          }\n\n        case 'string':\n          return value === '';\n\n        case 'number':\n          return value == 0;\n\n        case 'boolean':\n          return !value;\n\n        case 'undefined':\n        case 'null':\n          return true;\n\n        case 'symbol': // Since ECMAScript6\n\n        case 'function':\n        default:\n          return false;\n      }\n    }\n    /*\r\n     * Determine whether variable is an Object (:> 変数がオブジェクトかどうかを調べる\r\n     *\r\n     * @param mixed item (required)\r\n     *\r\n     * @return bool\r\n     */\n\n  }, {\n    key: \"is_Object\",\n    value: function is_Object(item) {\n      return item && _typeof(item) === 'object' && !Array.isArray(item);\n    }\n    /*\r\n     * Merge two objects deeply as polyfill for instead \"$.extend(true,target,source)\"\r\n     *\r\n     * @param object target (required)\r\n     * @param object source (required)\r\n     *\r\n     * @return object output\r\n     */\n\n  }, {\n    key: \"mergeDeep\",\n    value: function mergeDeep(target, source) {\n      var output = Object.assign({}, target);\n\n      if (this.is_Object(target) && this.is_Object(source)) {\n        var _arr9 = Object.keys(source);\n\n        for (var _i15 = 0; _i15 < _arr9.length; _i15++) {\n          var key = _arr9[_i15];\n\n          if (this.is_Object(source[key])) {\n            if (!(key in target)) {\n              Object.assign(output, _defineProperty({}, key, source[key]));\n            } else {\n              output[key] = this.mergeDeep(target[key], source[key]);\n            }\n          } else {\n            Object.assign(output, _defineProperty({}, key, source[key]));\n          }\n        }\n      }\n\n      return output;\n    }\n    /*\r\n     * Determine whether the object is iterable (:> オブジェクトが反復可能かどうか調べる\r\n     *\r\n     * @param object obj (required)\r\n     *\r\n     * @return bool\r\n     */\n\n  }, {\n    key: \"is_iterable\",\n    value: function is_iterable(obj) {\n      return obj && typeof obj[Symbol.iterator] === 'function';\n    }\n    /*\r\n     * Add an @@iterator method to non-iterable object (:> 反復不能なオブジェクトにイテレータメソッドを追加する\r\n     *\r\n     * @param object obj (required)\r\n     *\r\n     * @return object\r\n     */\n\n  }, {\n    key: \"toIterableObject\",\n    value: function toIterableObject(obj) {\n      if (this.is_iterable(obj)) {\n        return obj;\n      }\n\n      obj[Symbol.iterator] = function () {\n        var index = 0;\n        return {\n          next: function next() {\n            if (obj.length <= index) {\n              return {\n                done: true\n              };\n            } else {\n              return {\n                value: obj[index++]\n              };\n            }\n          }\n        };\n      };\n\n      return obj;\n    }\n    /*\r\n     * Await until next process at specific millisec (:> 指定ミリ秒でスリープ\r\n     *\r\n     * @param int msec (optional; defaults to 1)\r\n     *\r\n     * @return void\r\n     */\n\n  }, {\n    key: \"sleep\",\n    value: function sleep() {\n      var msec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return new Promise(function (resolve) {\n        setTimeout(resolve, msec);\n      });\n    }\n    /*\r\n     * Supplemental method for validating arguments in local scope (:> ローカルスコープ内で引数を検証するための補助メソッド\r\n     *\r\n     * @param mixed default_value (required)\r\n     * @param mixed opt_arg (optional)\r\n     * @param mixed opt_callback (optional; function or string of function to call)\r\n     *\r\n     * @return mixed\r\n     */\n\n  }, {\n    key: \"supplement\",\n    value: function supplement(default_value, opt_arg, opt_callback) {\n      if (opt_arg === undefined) {\n        return default_value;\n      }\n\n      if (opt_callback === undefined) {\n        return opt_arg;\n      }\n\n      return opt_callback(default_value, opt_arg);\n    }\n    /*\r\n     * Generate the pluggable unique id (:> プラガブルな一意のIDを生成する\r\n     *\r\n     * @param int digit (optional)\r\n     *\r\n     * @return string\r\n     */\n\n  }, {\n    key: \"generateUniqueID\",\n    value: function generateUniqueID() {\n      var digit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n      return new Date().getTime().toString(16) + Math.floor(digit * Math.random()).toString(16);\n    }\n    /*\r\n     * Round a number with specific digit (:> 桁指定して数値を丸める\r\n     *\r\n     * @param numeric number (required)\r\n     * @param int digit (optional)\r\n     * @param string round_type (optional; defaults to \"round\")\r\n     *\r\n     * @return numeric\r\n     */\n\n  }, {\n    key: \"numRound\",\n    value: function numRound(number, digit) {\n      var round_type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'round';\n      digit = this.supplement(0, digit, this.validateNumeric);\n\n      var _pow = Math.pow(10, digit);\n\n      switch (true) {\n        case /^ceil$/i.test(round_type):\n          return Math.ceil(number * _pow) / _pow;\n\n        case /^floor$/i.test(round_type):\n          return Math.floor(number * _pow) / _pow;\n\n        case /^round$/i.test(round_type):\n        default:\n          return Math.round(number * _pow) / _pow;\n      }\n    }\n    /*\r\n     * Convert hex of color code to rgba (:> カラーコードのHEX値をRGBA値へ変換する\r\n     *\r\n     * @param string hex (required)\r\n     * @param float alpha (optional; defaults to 1)\r\n     *\r\n     * @return string\r\n     */\n\n  }, {\n    key: \"hexToRgbA\",\n    value: function hexToRgbA(hex) {\n      var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n      var _c;\n\n      if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n        _c = hex.substring(1).split('');\n\n        if (_c.length == 3) {\n          _c = [_c[0], _c[0], _c[1], _c[1], _c[2], _c[2]];\n        }\n\n        _c = \"0x\".concat(_c.join(''));\n        return \"rgba(\".concat([_c >> 16 & 255, _c >> 8 & 255, _c & 255].join(','), \",\").concat(alpha, \")\");\n      } // throw new Error( 'Bad Hex' )\n\n\n      return hex;\n    }\n    /*\r\n     * Get the correct datetime with remapping to that if the year is 0 - 99 (:> 年が0～99の場合に再マッピングして正確な日時を取得する\r\n     *\r\n     * @param string datetime_str (required)\r\n     *\r\n     * @return Date Object, or null if failed\r\n     */\n\n  }, {\n    key: \"getCorrectDatetime\",\n    value: function getCorrectDatetime(datetime_str) {\n      var normalizeDate = function normalizeDate(dateString) {\n        // For Safari, IE\n        var _d = dateString.replace(/-/g, '/');\n\n        return /^\\d{1,4}\\/\\d{1,2}$/.test(_d) ? \"\".concat(_d, \"/1\") : _d;\n      };\n\n      if (isNaN(Date.parse(normalizeDate(datetime_str)))) {\n        console.warn(\"\\\"\".concat(datetime_str, \"\\\" Cannot parse date because invalid format.\"));\n        return null;\n      }\n\n      var _tempDate = new Date(normalizeDate(datetime_str)),\n          _chk_date = datetime_str.split(/-|\\//);\n\n      if (parseInt(_chk_date[0], 10) < 100) {\n        // Remapping if year is 0-99\n        _tempDate.setFullYear(parseInt(_chk_date[0], 10));\n      }\n\n      return _tempDate;\n    }\n    /*\r\n     * Method to get week number as extension of Date object (:> Dateオブジェクトで週番号を取得する拡張メソッド\r\n     *\r\n     * @param string date_str (required)\r\n     *\r\n     * @return int\r\n     */\n\n  }, {\n    key: \"getWeek\",\n    value: function getWeek(date_str) {\n      var targetDate = new Date(date_str),\n          _onejan = new Date(targetDate.getFullYear(), 0, 1),\n          _millisecInDay = 24 * 60 * 60 * 1000;\n\n      return Math.ceil(((targetDate - _onejan) / _millisecInDay + _onejan.getDay() + 1) / 7);\n    }\n    /*\r\n     * Retrieve one higher scale (:> 一つ上のスケールを取得する\r\n     *\r\n     * @param string scale (required)\r\n     *\r\n     * @return string higher_scale\r\n     */\n\n  }, {\n    key: \"getHigherScale\",\n    value: function getHigherScale(scale) {\n      var higher_scale = scale;\n\n      switch (true) {\n        case /^millisec(|ond)s?$/i.test(scale):\n          higher_scale = 'second';\n          break;\n\n        case /^seconds?$/i.test(scale):\n          higher_scale = 'minute';\n          break;\n\n        case /^minutes?$/i.test(scale):\n          higher_scale = 'hour';\n          break;\n\n        case /^quarter-?(|hour)$/i.test(scale):\n        case /^half-?(|hour)$/i.test(scale):\n        case /^hours?$/i.test(scale):\n          higher_scale = 'day';\n          break;\n\n        case /^days?$/i.test(scale):\n        case /^weeks?$/i.test(scale):\n          higher_scale = 'month';\n          break;\n\n        case /^months?$/i.test(scale):\n          higher_scale = 'year';\n          break;\n\n        case /^years?$/i.test(scale):\n          higher_scale = 'lustrum';\n          break;\n\n        case /^lustrum$/i.test(scale):\n          higher_scale = 'decade';\n          break;\n\n        case /^dec(ade|ennium)$/i.test(scale):\n          higher_scale = 'century';\n          break;\n\n        case /^century$/i.test(scale):\n          higher_scale = 'millennium';\n          break;\n\n        case /^millenniums?|millennia$/i.test(scale):\n        default:\n          break;\n      }\n\n      return higher_scale;\n    }\n    /*\r\n     * Retrieve the date string of specified locale (:> 指定されたロケールの日付文字列を取得する\r\n     *\r\n     * @param string date_seed (required)\r\n     * @param string scale (optional)\r\n     * @param string locales (optional)\r\n     * @param object options (optional)\r\n     *\r\n     * @return string locale_string\r\n     */\n\n  }, {\n    key: \"getLocaleString\",\n    value: function getLocaleString(date_seed) {\n      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var locales = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en-US';\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      function toLocaleStringSupportsLocales() {\n        try {\n          new Date().toLocaleString('i');\n        } catch (e) {\n          return e.name === \"RangeError\";\n        }\n\n        return false;\n      }\n\n      var is_toLocalString = toLocaleStringSupportsLocales(),\n          locale_string = '',\n          _options = {},\n          getOrdinal = function getOrdinal(n) {\n        var s = ['th', 'st', 'nd', 'rd'],\n            v = n % 100;\n        return n + (s[(v - 20) % 10] || s[v] || s[0]);\n      },\n          getZerofill = function getZerofill(num) {\n        var digit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n\n        var strDuplicate = function strDuplicate(n, str) {\n          return Array(n + 1).join(str);\n        },\n            zero = strDuplicate(digit - num.length, '0');\n\n        return String(num).length == digit ? String(num) : (zero + num).substr(num * -1);\n      },\n          _prop,\n          _temp;\n\n      for (_prop in options) {\n        if (_prop === 'timeZone' || _prop === 'hour12') {\n          _options[_prop] = options[_prop];\n        }\n      } //console.log( '!getLocaleString:', date_seed, scale, locales, options[scale], is_toLocalString )\n\n\n      switch (true) {\n        case /^millenniums?|millennia$/i.test(scale):\n        case /^century$/i.test(scale):\n        case /^dec(ade|ennium)$/i.test(scale):\n        case /^lustrum$/i.test(scale):\n          if (options.hasOwnProperty(scale) && options[scale] === 'ordinal') {\n            locale_string = getOrdinal(date_seed);\n          } else {\n            locale_string = date_seed;\n          }\n\n          break;\n\n        case /^years?$/i.test(scale):\n          if (is_toLocalString && options.hasOwnProperty(scale)) {\n            if (['numeric', '2-digit'].includes(options[scale])) {\n              _options.year = options[scale];\n              locale_string = this.getCorrectDatetime(date_seed).toLocaleString(locales, _options);\n            } else if ('zerofill' === options[scale]) {\n              locale_string = getZerofill(date_seed);\n            }\n          }\n\n          locale_string = this.is_empty(locale_string) ? this.getCorrectDatetime(date_seed).getFullYear() : locale_string;\n          break;\n\n        case /^months?$/i.test(scale):\n          if (is_toLocalString && options.hasOwnProperty(scale)) {\n            if (['numeric', '2-digit', 'narrow', 'short', 'long'].includes(options[scale])) {\n              _options.month = options[scale];\n              locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n            }\n          } //locale_string = new Date( date_seed ).getMonth() + 1\n\n\n          locale_string = this.is_empty(locale_string) ? new Date(date_seed).getMonth() + 1 : locale_string;\n          break;\n\n        case /^weeks?$/i.test(scale):\n          _temp = date_seed.split(',');\n\n          if (options.hasOwnProperty(scale) && options[scale] === 'ordinal') {\n            locale_string = getOrdinal(_temp);\n          } else {\n            locale_string = _temp[1];\n          }\n\n          break;\n\n        case /^weekdays?$/i.test(scale):\n          _temp = date_seed.split(',');\n\n          if (is_toLocalString) {\n            _options.weekday = options.hasOwnProperty('weekday') ? options.weekday : 'narrow';\n            locale_string = new Date(_temp[0]).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( _temp[0] ).toLocaleString( locales, _options )\n          } else {\n            var _weekday = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n            locale_string = _weekday[_temp[1]];\n          }\n\n          break;\n\n        case /^days?$/i.test(scale):\n          if (is_toLocalString) {\n            _options.day = options.hasOwnProperty('day') ? options.day : 'numeric';\n            locales = options.hasOwnProperty('day') ? locales : 'en-US';\n            locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n          } else {\n            locale_string = new Date(date_seed).getDate(); //locale_string = this.getCorrectDatetime( date_seed ).getDate()\n          }\n\n          break;\n\n        case /^hours?$/i.test(scale):\n        case /^(half|quarter)-?hours?$/i.test(scale):\n          if (typeof date_seed === 'string') {\n            var _parts = date_seed.split(':');\n\n            if (_parts.length == 1) {\n              date_seed = \"\".concat(date_seed, \":00:00\");\n            } else if (_parts.length == 2) {\n              date_seed = \"\".concat(date_seed, \":00\");\n            }\n          }\n\n          if (is_toLocalString) {\n            _options.hour = options.hasOwnProperty('hour') ? options.hour : 'numeric';\n\n            if (options.hasOwnProperty('minute')) {\n              _options.minute = options.hasOwnProperty('minute') ? options.minute : 'numeric';\n            }\n\n            locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n          } else {\n            locale_string = new Date(date_seed).getHours(); //locale_string = this.getCorrectDatetime( date_seed ).getHours()\n          }\n\n          break;\n\n        case /^minutes?$/i.test(scale):\n          if (is_toLocalString) {\n            _options.minute = options.hasOwnProperty('minute') ? options.minute : 'numeric';\n\n            if (options.hasOwnProperty('hour')) {\n              _options.hour = options.hasOwnProperty('hour') ? options.hour : 'numeric';\n            }\n\n            locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n          } else {\n            locale_string = new Date(date_seed).getMinutes(); //locale_string = this.getCorrectDatetime( date_seed ).getMinutes()\n          }\n\n          break;\n\n        case /^seconds?$/i.test(scale):\n          if (is_toLocalString) {\n            _options.second = options.hasOwnProperty('second') ? options.second : 'numeric';\n\n            if (options.hasOwnProperty('hour')) {\n              _options.hour = options.hasOwnProperty('hour') ? options.hour : 'numeric';\n            }\n\n            if (options.hasOwnProperty('minute')) {\n              _options.minute = options.hasOwnProperty('minute') ? options.minute : 'numeric';\n            }\n\n            locale_string = new Date(date_seed).toLocaleString(locales, _options); //locale_string = this.getCorrectDatetime( date_seed ).toLocaleString( locales, _options )\n          } else {\n            locale_string = new Date(date_seed).getSeconds(); //locale_string = this.getCorrectDatetime( date_seed ).getSeconds()\n          }\n\n          break;\n\n        case /^millisec(|ond)s?$/i.test(scale):\n        default:\n          locale_string = new Date(date_seed); //locale_string = this.getCorrectDatetime( date_seed )\n\n          break;\n      } //console.log( '!getLocaleString:', date_seed, scale, locales, options[scale], locale_string )\n\n\n      return locale_string;\n    }\n    /*\r\n     * Get the rendering width of the given string (:> 指定された文字列のレンダリング幅を取得する\r\n     *\r\n     * @param string str (required)\r\n     *\r\n     * @return int\r\n     */\n\n  }, {\n    key: \"strWidth\",\n    value: function strWidth(str) {\n      var _str_ruler = $('<span id=\"jqtl-str-ruler\"></span>'),\n          _width = 0;\n\n      if ($('#jqtl-str-ruler').length == 0) {\n        $('body').append(_str_ruler);\n      }\n\n      _width = $('#jqtl-str-ruler').text(str).get(0).offsetWidth;\n      $('#jqtl-str-ruler').empty();\n      return _width;\n    }\n    /*\r\n     * Sort an array by value of specific property (Note: destructive method) (:> 指定プロパティの値で配列をソートする（注:破壊的メソッド）\r\n     * Usage: Object.sort( this.compareValues( property, order ) )\r\n     *\r\n     * @param string key (required)\r\n     * @param string order (optional; defaults to 'asc')\r\n     *\r\n     * @return object\r\n     */\n\n  }, {\n    key: \"compareValues\",\n    value: function compareValues(key) {\n      var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'asc';\n      return function (a, b) {\n        if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n          return 0;\n        }\n\n        var varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];\n        var varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];\n        var comparison = 0;\n\n        if (varA > varB) {\n          comparison = 1;\n        } else if (varA < varB) {\n          comparison = -1;\n        }\n\n        return order === 'desc' ? comparison * -1 : comparison;\n      };\n    }\n    /*\r\n     * Validators\r\n     */\n\n  }, {\n    key: \"validateString\",\n    value: function validateString(def, val) {\n      return typeof val === 'string' && val !== '' ? val : def;\n    }\n  }, {\n    key: \"validateNumeric\",\n    value: function validateNumeric(def, val) {\n      return typeof val === 'number' ? Number(val) : def;\n    }\n  }, {\n    key: \"validateBoolean\",\n    value: function validateBoolean(def, val) {\n      return typeof val === 'boolean' || _typeof(val) === 'object' && val !== null && typeof val.valueOf() === 'boolean' ? val : def;\n    }\n  }, {\n    key: \"validateObject\",\n    value: function validateObject(def, val) {\n      return _typeof(val) === 'object' ? val : def;\n    }\n  }, {\n    key: \"validateArray\",\n    value: function validateArray(def, val) {\n      return Object.prototype.toString.call(val) === '[object Array]' ? val : def;\n    } // Static\n\n  }], [{\n    key: \"_jQueryInterface\",\n    value: function _jQueryInterface(config) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key3 = 1; _key3 < _len2; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n\n      return this.each(function () {\n        var data = $(this).data(DATA_KEY);\n\n        var _config = _objectSpread({}, Default, $(this).data(), _typeof(config) === 'object' && config ? config : {}); //console.log( '!_jQueryInterface:', data, config, args )\n\n\n        if (!data) {\n          // Apply the plugin and store the instance in data (:> プラグインを適用する\n          data = new Timeline(this, _config);\n          $(this).data(DATA_KEY, data);\n        }\n\n        if (typeof config === 'string' && config.charAt(0) != '_') {\n          if (typeof data[config] === 'undefined') {\n            // Call no method\n            throw new ReferenceError(\"No method named \\\"\".concat(config, \"\\\"\"));\n          } // Call public method (:> （インスタンスがpublicメソッドを持っている場合）メソッドを呼び出す\n\n\n          data[config](args);\n        } else {\n          if (!data._isInitialized) {\n            data._init();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"VERSION\",\n    get: function get() {\n      return VERSION;\n    }\n  }, {\n    key: \"Default\",\n    get: function get() {\n      return Default;\n    }\n  }]);\n\n  return Timeline;\n}(); // class end\n\n/*\r\n * jQuery\r\n */\n\n\n$.fn[NAME] = Timeline._jQueryInterface;\n$.fn[NAME].Constructor = Timeline;\n\n$.fn[NAME].noConflict = function () {\n  $.fn[NAME] = JQUERY_NO_CONFLICT;\n  return Timeline._jQueryInterface;\n};\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}